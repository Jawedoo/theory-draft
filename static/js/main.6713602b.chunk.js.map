{"version":3,"sources":["components/champion/champion.tsx","stores/drag-drop.ts","components/board/cell.tsx","stores/ai.ts","stores/summoner.ts","stores/draft-store.ts","components/board/board.tsx","utils.ts","components/bench/bench-slot.tsx","components/bench/bench.tsx","components/shared/coin.tsx","components/draft/sidebar/draft-refresh-panel.tsx","components/draft/sidebar/draft-xp-panel.tsx","components/draft/sidebar/next-round-panel.tsx","components/draft/sidebar/draft-sidebar.tsx","components/draft/card.tsx","components/draft/blank-card.tsx","components/draft/hand.tsx","components/draft/draft-main.tsx","components/draft/draft-sell.tsx","components/draft/tooltip/tooltip.tsx","components/draft/draft.tsx","components/synergies/synergy-item.tsx","components/synergies/synergy-tier.tsx","components/synergies/synergies-bar.tsx","components/simulation/simulation.tsx","components/hotkeys.tsx","components/advanced/editor.tsx","components/advanced/advanced.tsx","components/splash/splash.tsx","stores/data-store.ts","components/simulation/opponents.tsx","components/main-page.tsx","App.js","serviceWorker.js","index.js"],"names":["Champion","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","unit","props","champ","stars","getTierString","style","backgroundImage","concat","process","id","react","className","name","tier","React","Types","Cell","_ref","boardUnit","isActive","onPickUpUnit","onDropUnit","onDrop","index","_useDrag","useDrag","item","type","collect","monitor","isDragging","begin","end","_useDrag2","slicedToArray","drag","_useDrop","useDrop","accept","drop","isOver","canDrop","_useDrop2","_useDrop2$","dragClass","activeClass","overClass","ref","undefined","Boolean","champion_Champion","AI","summoner","potentialCards","currentHand","filter","x","cost","gold","spendingLimit","willingToSpend","totalSpent","length","Math","floor","random","card","splice","buyCard","DraftStore","BUY_XP_COST","buyXP","nearestTen","min","max","cards","threshold","_this","withinThreshold","map","weight","getSynergyWeight","getExistingUnitWeight","getRarityWeight","pref","reduce","best","current","existingClasses","keys","unitSynergies","classes","includes","matchingUnits","allUnits","sort","reverse","Summoner","_class","draft","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","showPlacedDisposer","autorun","placedUnitCount","showPlaced","setTimeout","nextLevelXp","getXpForLevelUp","level","toConsumableArray","Array","BOARD_SIZE","BENCH_SIZE","_","get","slice","health","drawHand","getRandomStartingUnit","giveRandomStartingUnit","calculateIncome","addXP","XP_PER_ROUND","isHandLocked","REFRESH_COST","refreshHand","amount","calculatePassiveIncome","calculateInterest","calculateStreakBonus","MAXIMIM_INTEREST","roundCount","xp","currentLevel","dataStore","levels","_this2","forEach","pool","push","drawCard","guid","removeExtra","firstEmpty","benchedUnits","findIndex","bu","availableToBuy","mergeUnits","c","_this3","extraUnits","boardUnits","champCount","m","val","champions","find","boardIndex","selection","activeUnit","unitSelection","getUnitSalePrice","returnUnitToPool","source","dest","moveUnit","clearUnitFromSlot","_this4","champIds","Set","flatMap","obj","_this5","synergyData","synergies","count","medalIndex","stages","exact","active","objectSpread","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor","action","ai","draft_store_temp","_class2","draft_store_descriptor","draft_store_descriptor2","draft_store_descriptor3","draft_store_descriptor4","draft_store_descriptor5","draft_store_descriptor6","draft_store_descriptor7","roundInterval","summoners","INITIAL_PLAYER_COUNT","player","initializePool","s","start","isSplashOpen","startTimer","potentialChamps","getChampsByCost","poolIndex","selA","selB","roundTimer","TIME_PER_ROUND","nextRound","purchaseUnit","isPaused","clearInterval","setInterval","guids","iterations","pow","levelData","odds","tierOdds","roll","getCost","cardSet","indexToRemove","poolSize","getInitialPoolSizeForChamp","_this$dataStore","unitsPerTier","total","tierBonus","draft_store_class","Board","inject","_dec","board_class","observer","call","rows","getRow","row","renderRow","i","isOdd","activeBoardIndex","cell_Cell","getKey","unitPickedUp","unitDropped","selectionA","selectionB","swapUnits","shiftUnitToSlot","BenchSlot","Bench","bench_dec","bench_class","activeBenchIndex","bench_slot_BenchSlot","Coin","RefreshPanel","refresh","setTooltip","onClick","onMouseEnter","onMouseLeave","coin_Coin","BuyXpPanel","progressStyle","transform","NextRoundPanel","timer","currentRound","DraftSidebar","draft_sidebar_class","_this$props","draft_refresh_panel_RefreshPanel","draft_xp_panel_BuyXpPanel","next_round_panel_NextRoundPanel","Card","_card$champ","BlankCard","Hand","hand_class","hand","card_Card","blank_card_BlankCard","DraftMain","draft_main_class","hand_Hand","DraftSell","sellUnit","getContent","tooltip","renderIncomeTooltip","renderNextRoundTooltip","renderLockHandTooltip","renderTimerTooltip","Tooltip","content","Draft","draft_dec","draft_class","state","activeTooltip","showSell","area","setState","lockClass","timerClass","toggleTimer","toggleHandLock","draft_sidebar_DraftSidebar","draft_main_DraftMain","draft_sell_DraftSell","tooltip_Tooltip","SynergyItem","synergy_item_class","synergy","currentBonusIndex","nextBonus","bonusesToDisplay","stage","alt","src","passive","base","bonus","SynergyTier","synergy_tier_class","synergy_item_SynergyItem","SynergiesBar","synergies_bar_class","tiers","getSynergiesOfTier","synergy_tier_SynergyTier","unitSynergiesWithTiers","Simulation","simulation_dec","simulation_class","fadeClass","synergies_bar_SynergiesBar","Hotkeys","useHotkeys","Editor","json","onChange","schema","es","ace","theme","AdvancedScreen","activeDataset","updatedData","data","mapToObj","JSON","parse","stringify","_this$state","setLevelsFromJson","setUnitsPerTierFromJson","setChampsFromJson","close","setActive","setActiveDataset","bind","getTitle","editor_Editor","getActiveJson","j","updateActiveDataset","getSchema","applyChanges","SplashScreen","isAdvancedOpen","advanced_AdvancedScreen","closeAdvancedPage","openAdvancedPage","DataStore","data_store_temp","data_store_class2","data_store_descriptor","data_store_descriptor2","data_store_descriptor3","data_store_descriptor4","Map","tiersData","levelsData","championsData","setSynergiesFromJson","clear","set","Number","emptyLevel","emptyChamp","data_store_class","Opponents","opponents_dec","opponents_class","opponents","renderOpponent","opponent","units","a","b","MainPage","main_page_class2","main_page_descriptor","assertThisInitialized","draftStore","splash_SplashScreen","lib","backend","MultiBackend","HTML5toTouch","mobx_react_module","simulation_Simulation","board_Board","bench_Bench","opponents_Opponents","draft_Draft","hotkeys_Hotkeys","main_page_class","App","react_default","createElement","main_page_MainPage","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6713602b.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Unit } from '../../stores/types';\r\n\r\ninterface ChampionProps {\r\n    unit: Unit;\r\n}\r\n\r\nexport class Champion extends React.Component<ChampionProps> {\r\n\r\n    public render() {\r\n        const { unit } = this.props;\r\n        const { champ } = unit;\r\n\r\n        const stars = this.getTierString(unit);\r\n\r\n        const style = {\r\n            backgroundImage: `url(${process.env.PUBLIC_URL}/img/champ-square/${champ.id}.png)`\r\n        };\r\n\r\n        return (\r\n            <div className=\"champion\" style={style}>\r\n                <div className=\"champion-tier\">{stars}</div>\r\n                <div className=\"champion-name\">{champ.name}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getTierString(unit: Unit): string {\r\n        switch(unit.tier) {\r\n            case 1: return '★';\r\n            case 2: return '★★';\r\n            case 3: return '★★★';\r\n        }\r\n    }\r\n}","export const Types = {\r\n    BENCH: 'bench',\r\n    BOARD: 'board',\r\n    SELL: 'sell'\r\n}","import * as React from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { BoardUnit, Unit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\nimport { Types } from '../../stores/drag-drop';\r\n// import {Preview } from 'react-dnd-multi-backend';\r\n\r\ninterface CellProps {\r\n    boardUnit: BoardUnit;\r\n    isActive: boolean;\r\n    onPickUpUnit: (unit: Unit, index: number) => void;\r\n    onDropUnit: () => void;\r\n    onDrop:(source: any, dest: any) => void;\r\n}\r\n\r\n// const generatePreview = (type, item, style) => {\r\n//     const modStyle = {\r\n//         ...style,\r\n//         width: '8em',\r\n//         height: '8em'\r\n//     };\r\n//     return <div className=\"cell\" style={modStyle}>\r\n//         <div className=\"contents\">\r\n//             <Champion unit={item.unit} />\r\n//         </div>\r\n//     </div>;\r\n// }\r\n\r\nexport const Cell: React.FC<CellProps> = ({\r\n    boardUnit,\r\n    isActive,\r\n    onPickUpUnit,\r\n    onDropUnit,\r\n    onDrop\r\n }) => {\r\n    const { unit, index } = boardUnit;\r\n    \r\n    const [{isDragging}, drag] = useDrag({\r\n        item: { unit, index, type: Types.BOARD },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        begin: () => onPickUpUnit(unit, index),\r\n        end: () => onDropUnit()\r\n    });\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: [Types.BENCH, Types.BOARD],\r\n        drop: (item) => onDrop(item, {\r\n            unit,\r\n            index,\r\n            type: Types.BOARD\r\n        }),\r\n        collect: monitor => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n    });    \r\n\r\n    const dragClass = isDragging ? 'dragging' : '';\r\n    const activeClass = isActive ? 'active' : '';\r\n    const overClass = isOver && canDrop ? 'drag-over' : '';\r\n\r\n    return (\r\n        <div ref={drop} className={`cell ${dragClass} ${activeClass} ${overClass}`}>\r\n            <div ref={unit ? drag : undefined} className=\"contents\">\r\n                {Boolean(unit) && <Champion unit={unit} /> }\r\n            </div>\r\n            {/* <Preview generator={generatePreview} /> */}\r\n        </div>\r\n    );\r\n}","import { Summoner } from './summoner';\r\nimport { DraftStore } from './draft-store';\r\nimport { ChampCard } from './types';\r\n\r\ninterface CardPref {\r\n    card: ChampCard;\r\n    weight: number;\r\n}\r\n\r\nexport class AI {\r\n    purchaseUnit(summoner: Summoner): void {\r\n        //Limit to affordable cards\r\n        const potentialCards = summoner.currentHand\r\n            .filter(x => x !== null && x.champ.cost < summoner.gold);\r\n    \r\n        const spendingLimit = this.willingToSpend(summoner);\r\n        let totalSpent = 0;\r\n        \r\n        while (potentialCards.length > 0 && totalSpent < spendingLimit ) {\r\n            //Purchase Random Card\r\n            const index = Math.floor(Math.random() * potentialCards.length);\r\n            const card = potentialCards.splice(index, 1)[0];\r\n        \r\n            if (card !== null) {\r\n                summoner.buyCard(card);\r\n                totalSpent += card.champ.cost;\r\n            }\r\n        }\r\n\r\n        if (spendingLimit - totalSpent > DraftStore.BUY_XP_COST) {\r\n            summoner.buyXP();\r\n        }\r\n\r\n    };\r\n    \r\n    //If they have more than 50 gold, spend all the excess down to 40\r\n    //Otherwise, spend down the the nearest 10, to a minimum of 5 gold\r\n    willingToSpend(summoner: Summoner): number {\r\n        if(summoner.gold > 50) {\r\n            return summoner.gold - 40;\r\n        } else {\r\n            const nearestTen = Math.floor(summoner.gold / 10) * 10;\r\n            return Math.min(Math.max(summoner.gold - nearestTen, 5), summoner.gold);\r\n        }\r\n    };\r\n\r\n    getPurchasePreference(cards: ChampCard[], summoner: Summoner, threshold: number): ChampCard|null {\r\n\r\n        //Add weights for:\r\n        // +2 Has this champ at Tier 2\r\n        // +1 Has this champ at Tier 1\r\n        // -10 Has this champ at Tier 3\r\n        // +1 Per synergy bonus\r\n        // +2 For a 5 cost\r\n        // +1 For a 4 cost\r\n\r\n        const allWeighted: CardPref[] = cards.map(card => {\r\n            let weight = this.getSynergyWeight(summoner, card)\r\n             + this.getExistingUnitWeight(summoner, card)\r\n             + this.getRarityWeight(card);\r\n\r\n            return {\r\n                card,\r\n                weight\r\n            };\r\n        });\r\n\r\n        const withinThreshold: CardPref[] = allWeighted.filter(pref => pref.weight >= threshold);\r\n        if (withinThreshold.length === 0) { return null; }\r\n\r\n        const topCard: CardPref = withinThreshold.reduce((best, current) => {\r\n            if (best == null) {\r\n                return current;\r\n            } else if (best !== null && best.weight < current.weight) {\r\n                return current;\r\n            } else {\r\n                return best;\r\n            }\r\n        }, withinThreshold[0]);\r\n\r\n\r\n        return topCard.card;\r\n    }\r\n\r\n    getSynergyWeight(summoner: Summoner, card: ChampCard): number {\r\n        const existingClasses = Object.keys (summoner.unitSynergies)\r\n        return card.champ.classes.filter(x => existingClasses.includes(x)).length;\r\n    }\r\n\r\n    getExistingUnitWeight(summoner: Summoner, card: ChampCard): number {\r\n        const matchingUnits = summoner.allUnits.filter(\r\n            x => x.unit !== undefined &&\r\n            x.unit.champ.id === card.champ.id\r\n        );\r\n\r\n        if(matchingUnits.length === 0) { return 0; }\r\n\r\n        const topTier = matchingUnits.map(x => x.unit !== undefined ? x.unit.tier : 0)\r\n            .sort()\r\n            .reverse()[0];\r\n\r\n        switch(topTier) {\r\n            case 1: return 1;\r\n            case 2: return 2;\r\n            case 3: return -10;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    getRarityWeight(card: ChampCard): number {\r\n        switch(card.champ.cost) {\r\n            case 5: return 2;\r\n            case 4: return 1;\r\n            default: return 0;\r\n        }\r\n    }\r\n}\r\n\r\n","import { DraftStore } from './draft-store';\r\nimport { observable, action, computed, autorun } from 'mobx';\r\nimport { UnitSelection, BoardUnit, ChampCard, Unit, Synergy, SynergyData, SynergyStage, ChampData } from './types';\r\nexport class Summoner {\r\n\r\n    draft: DraftStore;\r\n\r\n    @observable\r\n    currentHand: (ChampCard | null)[];\r\n\r\n    //All Units 0-8 = Bench, 9+ = Board\r\n    @observable\r\n    allUnits: BoardUnit[] = [];\r\n\r\n    @computed\r\n    get benchedUnits(): BoardUnit[] {\r\n        return this.allUnits.slice(0,DraftStore.BENCH_SIZE);\r\n    }\r\n\r\n    @computed \r\n    get boardUnits(): BoardUnit[] {\r\n        return this.allUnits.slice(DraftStore.BENCH_SIZE);\r\n    }\r\n\r\n    @observable\r\n    xp: number = 0;\r\n\r\n    @observable\r\n    nextLevelXp: number = 2;\r\n\r\n    @observable\r\n    level: number = 1;\r\n\r\n    @observable\r\n    gold: number = 3;\r\n\r\n    @observable\r\n    isHandLocked: boolean = false;\r\n\r\n    @observable\r\n    activeUnit?: UnitSelection = undefined;\r\n\r\n    @observable\r\n    health: number = 100;\r\n\r\n    @computed\r\n    public get isAlive() {\r\n        return this.health > 0;\r\n    }\r\n    \r\n    constructor(draft: DraftStore) {\r\n        this.draft = draft;\r\n\r\n        this.currentHand = [];\r\n        this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n\r\n        this.allUnits = [...Array(DraftStore.BOARD_SIZE + DraftStore.BENCH_SIZE)].map(\r\n            (_, index) => ({unit: undefined, index})\r\n        );\r\n    }\r\n\r\n    @action\r\n    public start() {\r\n        this.drawHand();        \r\n        this.getRandomStartingUnit();\r\n    }\r\n\r\n    @action\r\n    private getRandomStartingUnit() {\r\n        this.draft.giveRandomStartingUnit(this);\r\n    }\r\n\r\n    @action\r\n    public nextRound() {\r\n        this.gold += this.calculateIncome();\r\n        this.addXP(DraftStore.XP_PER_ROUND);\r\n        if(!this.isHandLocked) {\r\n            this.gold += DraftStore.REFRESH_COST;\r\n            this.refreshHand();    \r\n        }\r\n    }\r\n\r\n/****************\r\n *  HEALTH\r\n ***************/\r\n@action\r\npublic takeDamage(amount: number) {\r\n    this.health = Math.max(this.health - amount, 0);\r\n}\r\n\r\n/**************\r\n * INCOME\r\n ****************/\r\n\r\npublic calculateIncome(): number {\r\n    const passive = this.calculatePassiveIncome();\r\n    const interest =  this.calculateInterest();\r\n    const streak = this.calculateStreakBonus();\r\n    return passive + interest + streak;\r\n}\r\n\r\npublic calculateInterest(): number {\r\n    return Math.min(Math.floor(this.gold / 10), DraftStore.MAXIMIM_INTEREST);\r\n}\r\n\r\npublic calculateStreakBonus(): number {\r\n    return 0; //TODO: Simulate Wins/Losses??\r\n}\r\n\r\npublic calculatePassiveIncome(): number {\r\n    switch(this.draft.roundCount) {\r\n        case 0: \r\n        case 1: return 2;\r\n        case 2:\r\n        case 3: return 3;\r\n        case 4: return 4;\r\n        default: return 5;\r\n    }\r\n}\r\n\r\n/****************\r\n * XP AND LEVELS\r\n ****************/\r\n    \r\n    @action\r\n    public buyXP() {\r\n        if(this.gold < DraftStore.BUY_XP_COST) {\r\n            return;\r\n        }\r\n        this.addXP(4);\r\n        this.gold -= DraftStore.BUY_XP_COST;\r\n    }\r\n\r\n    @action\r\n    public addXP(amount: number) {\r\n        this.xp += amount;\r\n        //Level Up\r\n        if(this.xp >= this.nextLevelXp) {\r\n            this.xp = this.xp - this.nextLevelXp;\r\n            this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n            this.level += 1;\r\n        }\r\n    }\r\n\r\n    private getXpForLevelUp(currentLevel: number) {\r\n        const level = (this.draft.dataStore.levels).get(`level${currentLevel}`);\r\n        return level ? level.xp : 0;\r\n    }\r\n\r\n/****************\r\n * STORE / CARDS\r\n ****************/\r\n    \r\n    @action\r\n    public toggleHandLock() {\r\n        this.isHandLocked = !this.isHandLocked;\r\n    }\r\n\r\n    @action\r\n    public refreshHand() {\r\n        if (this.gold < DraftStore.REFRESH_COST) {\r\n            return;\r\n        }\r\n\r\n        //Return hand to pool\r\n        this.currentHand.forEach(card => {\r\n            if(card) {\r\n                this.draft.pool.push(card); //TODO: Refactor into draft.returnCardToPool\r\n            }\r\n        });\r\n\r\n        this.currentHand.splice(0, 5);\r\n\r\n        this.drawHand();\r\n        this.gold -= DraftStore.REFRESH_COST;\r\n    }\r\n\r\n\r\n    @action\r\n    public drawHand() {\r\n        while(this.currentHand.length < 5) {\r\n            this.drawCard();\r\n        }\r\n    }\r\n\r\n    @action\r\n    public drawCard() {\r\n        const card = this.draft.drawCard(this);     \r\n        this.currentHand.push(card);\r\n    }\r\n    \r\n    \r\n    @action\r\n    public buyCard(card: ChampCard) {\r\n\r\n        if(!card || !card.champ) {\r\n            return;\r\n        }\r\n\r\n        const { guid, champ } = card;\r\n        \r\n        let cost = champ.cost;\r\n        let removeExtra = false;\r\n\r\n        if(this.gold < champ.cost) {\r\n            return;\r\n        }\r\n\r\n        /* Several cases:\r\n        1. Player has empty space for unit, all good\r\n        2. Player has no empty space, but has 2 units of the same type at tier 1 already, merge to free up space\r\n        3. Player has no empty space, but has 1 unit of the same type at tier 1,\r\n           and the hand has 2 of that same champ\r\n           3a. If they have the gold to buy 2, buy both and merge to free up space\r\n           3b. If they don't have the gold, abort\r\n        */\r\n\r\n        //Add unit to bench\r\n        const firstEmpty = this.benchedUnits.findIndex(x => x.unit === undefined);\r\n        //Case 1\r\n        if(firstEmpty >= 0) {\r\n            this.allUnits[firstEmpty].unit = ({\r\n                tier: 1,\r\n                champ\r\n            });\r\n\r\n        } else {\r\n            const matchingUnits = this.allUnits\r\n                .map(bu => bu.unit)\r\n                .filter(unit => unit !== undefined && unit.tier === 1 && unit.champ.id === champ.id);\r\n\r\n            const availableToBuy = this.currentHand\r\n                .filter(card => card != null && card.champ.id === champ.id) as ChampCard[];\r\n\r\n            //Case 2\r\n            if (matchingUnits.length === 2) {\r\n                this.mergeUnits(1, availableToBuy); //Upgrade\r\n            } else if (matchingUnits.length === 1 && availableToBuy.length >= 2) {\r\n                if(this.gold >= champ.cost * 2) { //3a\r\n                    cost *= 2; //Increase Cost\r\n                    this.mergeUnits(1, availableToBuy); //Upgrade\r\n                    removeExtra = true; //Flag that theres a 2nd card to remove\r\n                } else { //3b\r\n                    return;\r\n                }\r\n            } else {        \r\n                return;\r\n            }\r\n        }\r\n\r\n        //Remove card\r\n        const index = this.currentHand.findIndex(c => c != null && c.guid === guid);\r\n        this.currentHand[index] = null;\r\n\r\n        //Remove 2nd card if needed\r\n        if(removeExtra) {\r\n            const index = this.currentHand.findIndex(card => card != null && card.champ.id === champ.id);\r\n            this.currentHand[index] = null;    \r\n        }\r\n\r\n        //Merge Units\r\n        this.mergeUnits(1);\r\n\r\n        //Pay money\r\n        this.gold -= cost;\r\n    }\r\n\r\n\r\n/*************************\r\n * UNITS (BENCH AND BOARD)\r\n *************************/\r\n\r\n@action\r\nprivate mergeUnits(tier: number = 1, extraCards: ChampCard[] = []) {\r\n    const extraUnits: Unit[] = extraCards.map(card => ({champ: card.champ, tier: 1}));\r\n    const boardUnits: (Unit|null)[] = this.boardUnits.map(bu => bu.unit || null);\r\n    const benchedUnits: (Unit|null)[] = this.benchedUnits.map(bu => bu.unit || null);\r\n    const totalUnits: (Unit|null)[] = [...benchedUnits, ...boardUnits, ...extraUnits];\r\n\r\n    const onlyCurrentTier = totalUnits.filter(c => c!== null && c.tier === tier) as Unit[];\r\n    \r\n    //Remap to count champions\r\n    const champCount = onlyCurrentTier.reduce((m: object, unit: Unit) => {\r\n        const id = unit.champ.id;\r\n        const val = (m as any)[id];\r\n        if (!val) {\r\n            (m as any)[id] = 1;\r\n        } else {\r\n            (m as any)[id] = val+1;\r\n        }\r\n        return m;\r\n    }, {});\r\n\r\n    //Find champs to merge\r\n    const idsToMerge = Object.keys(champCount).filter(x => (champCount as any)[x] >= 3);\r\n\r\n    //Merge and upgrade the champs\r\n    idsToMerge.forEach(id => {\r\n        const champ = (this.draft.dataStore.champions).find(c => c.id === id);\r\n        \r\n        //Remove all of that unit from bench and board\r\n        let index = -1;\r\n        let boardIndex = -1;\r\n        while(-1 !== (index = this.allUnits.findIndex(boardUnit => \r\n            boardUnit.unit !== undefined &&\r\n            boardUnit.unit.champ.id === id &&\r\n            boardUnit.unit.tier === tier\r\n        ))) {\r\n            this.allUnits[index].unit = undefined;\r\n            if (index >= DraftStore.BENCH_SIZE) {\r\n                boardIndex = index;\r\n            }\r\n        }\r\n\r\n        //Add upgraded unit\r\n        //Priorise returning to board\r\n        if(boardIndex !== -1) {\r\n            this.allUnits[boardIndex].unit = {\r\n                tier: tier + 1,\r\n                champ\r\n            } as Unit;\r\n        } else {\r\n            const firstEmpty = this.allUnits.findIndex(x => x.unit === undefined);\r\n            this.allUnits[firstEmpty].unit = {\r\n                tier: tier + 1,\r\n                champ\r\n            } as Unit;    \r\n        }\r\n    });\r\n\r\n    if (tier === 1) {\r\n        this.mergeUnits(2);\r\n    }\r\n}\r\n\r\n    @action unitPickedUp(selection: UnitSelection) {\r\n        this.activeUnit = selection;\r\n    }\r\n\r\n    @action unitDropped() {\r\n        this.activeUnit = undefined;\r\n    }\r\n\r\n    @action\r\n    public sellUnit(unitSelection: UnitSelection) {\r\n        const { unit, index } = unitSelection;\r\n\r\n        //If there is a unit to sell, give gold;\r\n        if(this.allUnits[index].unit !== undefined) {\r\n            this.allUnits[index].unit = undefined;\r\n            this.gold += DraftStore.getUnitSalePrice(unit);\r\n            this.draft.returnUnitToPool(unit);\r\n        }\r\n    }\r\n\r\n    \r\n    @action\r\n    public swapUnits(source: UnitSelection, dest: UnitSelection) {\r\n        this.moveUnit(dest.unit, source.index);\r\n        this.moveUnit(source.unit, dest.index);\r\n    }\r\n\r\n    @action shiftUnitToSlot(boardUnit: BoardUnit, index: number) {\r\n\r\n        //Only if the slot is empty\r\n        if (this.allUnits[index].unit !== undefined || !boardUnit.unit) {\r\n            return;\r\n        }\r\n\r\n        //If it's to be placed on the board, enforece the unit limit\r\n        if(index >= DraftStore.BENCH_SIZE && this.placedUnitCount >= this.level) {\r\n            return;\r\n        }\r\n\r\n        //Remove unit from current slot\r\n        this.clearUnitFromSlot(boardUnit);\r\n\r\n        //Place into new slot\r\n        this.allUnits[index].unit = boardUnit.unit;\r\n    }\r\n\r\n    private clearUnitFromSlot(boardUnit: BoardUnit) {\r\n        this.allUnits[boardUnit.index].unit = undefined;\r\n    }\r\n\r\n    @action\r\n    private moveUnit(unit: Unit, index: number) {\r\n        this.allUnits[index].unit = unit;\r\n    }\r\n\r\n\r\n/***************************\r\n * Synergies and Place Units\r\n ***************************/\r\n    \r\n    @computed\r\n    public get placedUnitCount() {\r\n        return this.boardUnits.filter(bu => bu.unit).length;\r\n    }\r\n\r\n\r\n    @observable\r\n    showPlaced: boolean = false;\r\n\r\n    public showPlacedDisposer = autorun(() => {\r\n        if (this.placedUnitCount !== -1) {\r\n            this.showPlaced = true;\r\n            setTimeout(() => {\r\n                this.showPlaced = false;\r\n            }, 500);          \r\n        }\r\n    });\r\n\r\n    @computed\r\n    public get unitSynergies() {\r\n        const champs: ChampData[] = this.boardUnits.map(x => x.unit).map(unit => unit ? unit.champ : null).filter(champ => champ !== null) as ChampData[];\r\n        const champIds: string[] = champs.map(champ => champ.id);\r\n        const uniqueChampIds: string[] = [...new Set(champIds)];\r\n\r\n        const champClasses: string[] = uniqueChampIds.map(id => this.draft.dataStore.champions.find(champ => champ.id === id)).flatMap(champ => champ === undefined ? [] : champ.classes).sort();\r\n        const classCounts: object = champClasses.reduce((obj, id) => {\r\n            obj[id] = (obj[id] || 0) + 1;\r\n            return obj;\r\n        }, {} as any);\r\n\r\n        return classCounts;\r\n    }\r\n\r\n    @computed\r\n    public get unitSynergiesWithTiers(): Synergy[] {\r\n        const activeClasses = Object.keys(this.unitSynergies);\r\n\r\n        return activeClasses.map( key => {\r\n            const synergyData = (this.draft.dataStore.synergies).get(key) as SynergyData;\r\n            const count = (this.unitSynergies as any)[key] as number;\r\n\r\n            let medalIndex = -1;\r\n            synergyData.stages.forEach((x: SynergyStage, index: number) => {\r\n                if (synergyData.exact && count === x.amount) {\r\n                    medalIndex = index;\r\n                } else if(synergyData && count >= x.amount) {\r\n                    medalIndex = index;\r\n                }\r\n            });\r\n\r\n            //Tiers, 1 = Gold, 2 = Silver, 3 = Bronze, 4 = Inactive;\r\n            const tier = medalIndex === -1 ? 4 : synergyData.stages.length - medalIndex;\r\n            const active = tier < 4;\r\n\r\n            return {\r\n                ...synergyData,\r\n                id: key,\r\n                tier,\r\n                active,\r\n                count\r\n            } as Synergy;\r\n        });\r\n    }\r\n}","import { observable, action } from 'mobx';\r\nimport { AI } from './ai';\r\nimport { Unit, ChampCard, UnitSelection } from './types';\r\nimport { DataStore } from './data-store';\r\nimport { Summoner } from './summoner';\r\n\r\nconst ai = new AI();\r\n\r\nexport class DraftStore {\r\n\r\n    public static REFRESH_COST = 2;\r\n    public static BUY_XP_COST = 4;\r\n    public static BENCH_SIZE = 9;\r\n    public static BOARD_SIZE = 10;\r\n    public static XP_PER_ROUND = 2;\r\n    public static MAXIMIM_INTEREST = 5;\r\n    public static TIME_PER_ROUND = 30;//seconds\r\n    public static INITIAL_PLAYER_COUNT = 8;\r\n\r\n    dataStore: DataStore;\r\n\r\n    @observable\r\n    pool: ChampCard[];\r\n\r\n    @observable\r\n    roundCount: number = 1;\r\n\r\n    @observable\r\n    isSplashOpen = true;\r\n\r\n    @observable\r\n    summoners: Summoner[];\r\n\r\n    @observable\r\n    player: Summoner;\r\n\r\n    constructor(dataStore: DataStore) {\r\n        this.dataStore = dataStore;\r\n        this.pool = [];\r\n        this.summoners = [...Array(DraftStore.INITIAL_PLAYER_COUNT)].map(_ => new Summoner(this));\r\n        //First summoner is always the player;\r\n        this.player = this.summoners[0]; \r\n    }\r\n    \r\n    @action\r\n    public start() { \r\n        this.initializePool();\r\n\r\n        this.summoners.forEach(s => s.start());\r\n\r\n        this.isSplashOpen = false;\r\n\r\n        this.startTimer();\r\n\r\n        \r\n    }\r\n\r\n /*****************************\r\n * Unit Selection and Movement\r\n ******************************/\r\n\r\n    public giveRandomStartingUnit(summoner: Summoner) {\r\n        //Always start with a 2 cost unit\r\n        const potentialChamps = this.getChampsByCost(2);\r\n        const index = Math.floor(Math.random() * potentialChamps.length);\r\n        const champ = potentialChamps[index];\r\n\r\n        //Find that champ\r\n        const poolIndex = this.pool.findIndex(x => x.champ.id === champ.id);\r\n        //Remove from pool\r\n        this.pool.splice(poolIndex, 1);\r\n        \r\n        //Add to bench\r\n        summoner.allUnits[0].unit = {\r\n            tier: 1,\r\n            champ\r\n        };\r\n\r\n    }\r\n \r\n    public selectionsMatch(selA: UnitSelection, selB: UnitSelection): boolean {\r\n        return selA !== undefined\r\n            && selB !== undefined\r\n            && selB.index === selA.index\r\n    }\r\n\r\n    @action\r\n    public nextRound() {\r\n        this.roundCount += 1;   \r\n        this.roundTimer = DraftStore.TIME_PER_ROUND;   \r\n\r\n        this.summoners.forEach((summoner, index) => {\r\n            summoner.nextRound();\r\n            if(index > 0) {\r\n                ai.purchaseUnit(summoner);\r\n            }\r\n        });\r\n    }\r\n\r\n    @observable\r\n    roundTimer: number = DraftStore.TIME_PER_ROUND;\r\n\r\n    @observable\r\n    isPaused: boolean = true;\r\n\r\n    private roundInterval: any = null;\r\n\r\n    @action\r\n    public startTimer() {\r\n        this.isPaused = false;\r\n\r\n        if(this.roundInterval) {\r\n            clearInterval(this.roundInterval);\r\n        }\r\n\r\n        this.roundTimer = DraftStore.TIME_PER_ROUND;\r\n\r\n        this.roundInterval = setInterval(() => {\r\n            if(this.isPaused) { return; }\r\n            --this.roundTimer;\r\n\r\n            if(this.roundTimer <= 0) {\r\n                this.nextRound();\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    @action\r\n    public toggleTimer() {\r\n        this.isPaused = !this.isPaused;\r\n    }\r\n\r\n    @action\r\n    public  returnUnitToPool(unit: Unit) {\r\n        const {champ} = unit;\r\n        const unitsInPool = this.pool.filter(x => x.champ.id === champ.id);\r\n        const guids = unitsInPool.map(x => x.guid);\r\n\r\n        let iterations = 3**(unit.tier - 1);\r\n        \r\n        let index = 0;\r\n        while(iterations > 0) {\r\n            const guid = `${champ.id}_${index}`;\r\n            if(!guids.includes(guid)) {\r\n                --iterations;\r\n                this.pool.push({\r\n                    guid,\r\n                    champ\r\n                });\r\n            }\r\n            ++index;\r\n        }\r\n    }\r\n\r\n    public static getUnitSalePrice(unit: Unit): number {\r\n        let tierBonus = (unit.tier - 1) * 2;\r\n        return unit.champ.cost + tierBonus;\r\n    }\r\n\r\n    @action\r\n    public drawCard(summoner: Summoner) {\r\n        const key = `level${summoner.level}`;\r\n        const levelData = this.dataStore.levels.get(key);\r\n        const odds = levelData ? levelData.tierOdds : [0,0,0,0,0];\r\n        const roll = Math.random();\r\n\r\n        const cost = this.getCost(roll, odds);\r\n\r\n        const cardSet = this.pool.filter(x => x.champ.cost === cost);\r\n        const index = Math.floor(Math.random() * cardSet.length);\r\n        const card = cardSet[index];\r\n\r\n        const indexToRemove = this.pool.findIndex(c => c.guid === card.guid);\r\n        this.pool.splice(indexToRemove, 1);\r\n        \r\n        return card;\r\n    }\r\n\r\n    @action\r\n    public initializePool() {\r\n        this.pool = this.dataStore.champions.flatMap(champ => {\r\n            const poolSize = this.getInitialPoolSizeForChamp(champ.id);\r\n            return [...Array(poolSize)].map((_, index) => ({\r\n                champ,\r\n                guid: champ.id + \"_\" + index\r\n            } as ChampCard));            \r\n        });\r\n    }\r\n\r\n    private getInitialPoolSizeForChamp(id: string): number {\r\n        const { unitsPerTier, champions} = this.dataStore;\r\n        const champ = champions.find(x => x.id === id);\r\n        if(champ == null) { return 0; }\r\n\r\n        switch(champ.cost) {\r\n            case 1: return unitsPerTier.get(\"tier1\") || 0;\r\n            case 2: return unitsPerTier.get(\"tier2\") || 0;\r\n            case 3: return unitsPerTier.get(\"tier3\") || 0;\r\n            case 4: return unitsPerTier.get(\"tier4\") || 0;\r\n            case 5: return unitsPerTier.get(\"tier5\") || 0;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    private getCost(roll: number, odds: number[]) {\r\n        let total = 0;\r\n        let index = 0;\r\n        while(total < roll) {\r\n            total += odds[index];\r\n            ++index;\r\n        }\r\n        return index;\r\n    }\r\n\r\n    private getChampsByCost(cost: number) {\r\n        return this.dataStore.champions.filter(champ => champ.cost === cost);\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport { Cell } from './cell';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport \"./board.scss\";\r\nimport { BOARD_HEIGHT, BOARD_WIDTH } from '../../utils';\r\nimport { BoardUnit, UnitSelection, Unit } from '../../stores/types';\r\nimport { Summoner } from '../../stores/summoner';\r\n\r\ninterface BoardProps {\r\n    player: Summoner;\r\n}\r\n\r\n@inject('player')\r\n@observer\r\nexport class Board extends React.Component<BoardProps> {\r\n\r\n    public constructor(props: BoardProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const { player } = this.props;\r\n\r\n        if(!player) { return; }\r\n\r\n        const rows = [...Array(BOARD_HEIGHT)].map((_, index) => this.getRow(index + 1));\r\n\r\n        return (\r\n            <div className=\"board\">\r\n                {rows.map((row: BoardUnit[], index: number) => this.renderRow(row, index))}                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getRow(i: number): BoardUnit[] {\r\n        const { player } = this.props;\r\n        const start = BOARD_WIDTH * (i - 1);\r\n        const end = BOARD_WIDTH * i;\r\n\r\n        return player.boardUnits.slice(start, end);\r\n    }\r\n\r\n\r\n    private renderRow(boardUnits: BoardUnit[], row: number) {\r\n        const { player } = this.props;\r\n        const { activeUnit } = player;\r\n        const isOdd = row % 2 === 1;\r\n        const activeBoardIndex = (activeUnit !== undefined && activeUnit.index >= DraftStore.BENCH_SIZE) ? activeUnit.index : -1;\r\n\r\n        return (\r\n            <div className=\"board__row\" key={row}>\r\n                {isOdd && <div className=\"board-spacer spacer--left\"></div>}\r\n                {boardUnits.map(bu=>\r\n                    <Cell\r\n                        key={this.getKey(bu)}\r\n                        boardUnit={bu}\r\n                        isActive={activeBoardIndex === bu.index}\r\n                        onPickUpUnit={(unit, index) => this.onPickUpUnit(unit, index)}\r\n                        onDropUnit={() => this.onDropUnit()}\r\n                        onDrop={(source, dest) => this.onDrop(source, dest)}                        \r\n                    />\r\n                )}\r\n                {!isOdd && <div className=\"board-spacer spacer--right\"></div>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onPickUpUnit(unit: Unit, index: number) {\r\n        const { player } = this.props;\r\n        player.unitPickedUp({\r\n            unit,\r\n            index\r\n        } as UnitSelection);\r\n        \r\n    }\r\n\r\n    private onDropUnit() {\r\n        const { player } = this.props;\r\n        player.unitDropped();\r\n    }\r\n\r\n    private onDrop(source, dest) {\r\n        const { player } = this.props;\r\n\r\n        const selectionA = {\r\n            unit: source.unit,\r\n            index: source.index\r\n        } as UnitSelection;\r\n\r\n        const selectionB = {\r\n            unit: dest.unit,\r\n            index: dest.index\r\n        } as UnitSelection;\r\n\r\n        //Is destination empty\r\n        if(!dest.unit) {\r\n            player.shiftUnitToSlot(selectionA, dest.index);\r\n        } else {\r\n            player.swapUnits(selectionA, selectionB);\r\n        }\r\n    }\r\n    \r\n    private getKey(boardUnit: BoardUnit): string {\r\n        const { unit, index } = boardUnit;\r\n        if(unit === undefined) {\r\n            return `blank_${index}`;\r\n        } else {\r\n            return `${unit.champ.id}_${unit.tier}_${index}`;\r\n        }\r\n    }\r\n}","export const BOARD_WIDTH = 5;\r\nexport const BOARD_HEIGHT = 2;\r\n","import * as React from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\n\r\nimport { Unit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\nimport { Types } from '../../stores/drag-drop';\r\n\r\ninterface BenchSlotProps {\r\n    unit?: Unit;\r\n    index: number;\r\n    isActive: boolean;\r\n    onPickUpUnit: (unit: Unit, index: number) => void;\r\n    onDropUnit: () => void;\r\n    onDrop:(source: any, dest: any) => void;\r\n}\r\n\r\nexport const BenchSlot: React.FC<BenchSlotProps> = ({\r\n    unit,\r\n    index,\r\n    isActive,\r\n    onPickUpUnit,\r\n    onDropUnit,\r\n    onDrop\r\n}) => {    \r\n    const [{isDragging}, drag] = useDrag({\r\n        item: { unit, index, type: Types.BENCH },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        begin: () => onPickUpUnit(unit, index),\r\n        end: () => onDropUnit()\r\n    });\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: [Types.BENCH, Types.BOARD],\r\n        drop: (item) => onDrop(item, {\r\n            unit,\r\n            index,\r\n            type: Types.BENCH\r\n        }),\r\n        collect: monitor => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n    });\r\n\r\n    const dragClass = isDragging ? 'dragging' : '';\r\n    const activeClass = isActive ? 'active' : '';\r\n    const overClass = isOver && canDrop ? 'drag-over' : '';\r\n    return (\r\n        <div ref={drop} className={`bench-slot ${activeClass} ${dragClass} ${overClass}`}>\r\n            <div ref={unit ? drag : undefined} className=\"bench-slot-inner\">\r\n                {Boolean(unit) && <Champion unit={unit} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { BenchSlot } from './bench-slot';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { UnitSelection, Unit } from '../../stores/types';\r\nimport { Summoner } from '../../stores/summoner';\r\n\r\nimport './bench.scss';\r\n\r\ninterface BenchProps {\r\n    player: Summoner;\r\n}\r\n\r\n@inject('player')\r\n@observer\r\nexport class Bench extends React.Component<BenchProps> {\r\n    public render() {\r\n        const { player } = this.props;\r\n        const { benchedUnits, activeUnit } = player;\r\n        const activeBenchIndex = (activeUnit !== undefined && activeUnit.index < DraftStore.BENCH_SIZE) ? activeUnit.index : -1;\r\n\r\n        return (\r\n            <div className=\"bench\">\r\n                {benchedUnits.map(({unit, index}) => <BenchSlot\r\n                    unit={unit}\r\n                    index={index}\r\n                    isActive={activeBenchIndex === index}\r\n                    onPickUpUnit={(unit, index) => this.onPickUpUnit(unit, index)}\r\n                    onDropUnit={() => this.onDropUnit()}\r\n                    onDrop={(source, dest) => this.onDrop(source, dest)}\r\n                    key={ `${unit ? unit.champ.id + '_' + unit.tier : 'blank'}_${index}`}\r\n                />)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onPickUpUnit(unit: Unit, index: number) {\r\n        const { player } = this.props;\r\n        player.unitPickedUp({\r\n            unit,\r\n            index\r\n        } as UnitSelection);\r\n        \r\n    }\r\n\r\n    private onDropUnit() {\r\n        const { player } = this.props;\r\n        player.unitDropped();\r\n    }\r\n\r\n    private onDrop(source, dest) {\r\n        const { player } = this.props;\r\n        \r\n        const selectionA = {\r\n            unit: source.unit,\r\n            index: source.index\r\n        } as UnitSelection;\r\n        const selectionB = {\r\n            unit: dest.unit,\r\n            index: dest.index\r\n        } as UnitSelection;\r\n\r\n        //Is destination empty\r\n        if(!dest.unit) {\r\n            player.shiftUnitToSlot(selectionA, dest.index);\r\n        } else {\r\n            player.swapUnits(selectionA, selectionB);\r\n        }\r\n\r\n    }\r\n}","import * as React from 'react';\r\nimport './coin.scss'\r\nexport class Coin extends React.Component{\r\n    public render() {\r\n        return (\r\n            <i className=\"coin\">\r\n                <span className=\"a11y\">Coin</span>\r\n            </i>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Coin } from '../../shared/coin';\r\n\r\ninterface RefreshPanelProps {\r\n    refresh: () => void;\r\n    cost: number;\r\n    setTooltip: (area: string) => void;\r\n}\r\n\r\nexport const RefreshPanel: React.FC<RefreshPanelProps> = ({ refresh, cost, setTooltip }) => {\r\n    return (<div className=\"sidebar-item refresh clickable\" onClick={refresh}>\r\n        <div className=\"refresh-panel\" onMouseEnter={() => setTooltip('refresh')} onMouseLeave={() => setTooltip(\"\")}>\r\n            <div className=\"content\">\r\n                <div>Refresh</div>\r\n                <div><Coin /> {cost}</div>\r\n            </div>\r\n            <div className=\"icon\" style={{backgroundImage: \"url(img/refresh.png)\"}}>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}","import * as React from 'react';\r\nimport { Coin } from '../../shared/coin';\r\n\r\ninterface BuyXpPanelProps {\r\n    buyXP: () => void;\r\n    cost: number;\r\n    xp: number;\r\n    nextLevelXp: number;\r\n    level: number;\r\n    setTooltip: (area: string) => void;\r\n}\r\n\r\nexport const BuyXpPanel: React.FC<BuyXpPanelProps> = ({ buyXP, cost, xp, nextLevelXp, level, setTooltip }) => {\r\n    \r\n    const progress = xp/nextLevelXp * 100;\r\n    const progressStyle = {\r\n        transform: `translateX(${-100 + progress}%)`\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar-item xp clickable\" onClick={() => buyXP()}>\r\n            <div className=\"xp-panel\" onMouseEnter={() => setTooltip('buyXp')} onMouseLeave={() => setTooltip(\"\")}>\r\n                <div className=\"details\">\r\n                    <div className=\"content\">\r\n                        <div className=\"label\">Buy XP</div>\r\n                        <div className=\"sub-label\">\r\n                            <Coin />{cost}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"icon\" style={{backgroundImage: \"url(img/level-up.png)\"}}></div>\r\n                </div>\r\n                <div className=\"xp-progress\">\r\n                    <div className=\"xp-label\">{xp}/{nextLevelXp}</div>\r\n                    <div className=\"xp-progress-bar\">\r\n                        <div className=\"bar\">\r\n                            <div className=\"fill\" style={progressStyle}></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"level\">{level}</div>\r\n            </div>\r\n        </div>        \r\n    );\r\n}","import * as React from 'react';\r\n\r\ninterface NextRoundPanelProps {\r\n    nextRound: () => void;\r\n    setTooltip: (area: string) => void;\r\n    isPaused: boolean;\r\n    timer: number;\r\n    currentRound: number;\r\n}\r\n\r\nexport const NextRoundPanel: React.FC<NextRoundPanelProps> = ({ nextRound, setTooltip, isPaused, timer, currentRound }) => {\r\n    return (<div className=\"sidebar-item next-round clickable\" onClick={nextRound}>\r\n        <div className=\"next-round-panel\" onMouseEnter={() => setTooltip('nextRound')} onMouseLeave={() => setTooltip(\"\")}>\r\n            <div className=\"content\">\r\n                <div>Go to Next Round</div>\r\n                <div>{timer}s</div>\r\n                <div>Current Round: {currentRound}</div>\r\n            </div>\r\n            <div className=\"icon\" style={{backgroundImage: \"url(img/next-round.png)\"}}>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../../stores/draft-store';\r\nimport { observer } from 'mobx-react';\r\nimport { RefreshPanel } from './draft-refresh-panel';\r\nimport { BuyXpPanel } from './draft-xp-panel';\r\nimport { NextRoundPanel } from './next-round-panel';\r\nimport { Summoner } from '../../../stores/summoner';\r\n\r\ninterface DraftSidebarProps {\r\n    draft: DraftStore;\r\n    player: Summoner;\r\n    setTooltip: (area: string) => void;\r\n}\r\n\r\n@observer\r\nexport class DraftSidebar extends React.Component<DraftSidebarProps> {\r\n    \r\n    public render() {\r\n\r\n        const { draft, player, setTooltip } = this.props;\r\n        const { xp, nextLevelXp, level } = player;\r\n\r\n        return (\r\n            <div className=\"draft-sidebar draft-area\">\r\n                <div className=\"draft-sidebar-items\">\r\n                    <RefreshPanel cost={DraftStore.REFRESH_COST} refresh={() => player.refreshHand()} setTooltip={setTooltip}/>\r\n                    <BuyXpPanel\r\n                        cost={DraftStore.BUY_XP_COST}\r\n                        buyXP={() => player.buyXP()}\r\n                        setTooltip={setTooltip}\r\n                        level={level}\r\n                        xp={xp}\r\n                        nextLevelXp={nextLevelXp}\r\n                    />\r\n                    <NextRoundPanel \r\n                        nextRound={() => draft.nextRound()}\r\n                        isPaused={draft.isPaused}\r\n                        setTooltip={setTooltip}\r\n                        timer={draft.roundTimer}\r\n                        currentRound={draft.roundCount}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\nimport { ChampCard } from '../../stores/types';\r\nimport { Coin } from '../shared/coin';\r\n\r\ninterface CardProps {\r\n    card: ChampCard;\r\n    action: (card: ChampCard) => void;\r\n}\r\n\r\nexport class Card extends React.Component<CardProps> {\r\n\r\n    public render() {\r\n        const { card, action } = this.props;\r\n        const { name, cost, id, classes } = card.champ;\r\n\r\n        const style = {\r\n            backgroundImage: `url(${process.env.PUBLIC_URL}/img/champ-square/${id}.png)`\r\n        };\r\n\r\n        return (\r\n            <div className={`champ-card champ-cost-${cost}`} onClick={() => action(card)}>\r\n                <div className=\"decoration\"></div>\r\n                <div className={`hero champ-bg-${id}`} style={style}>\r\n                    {classes.map(x => <div className=\"champ-class\" key={x}>{x}</div>)}\r\n                </div>\r\n                <div className={`banner banner-cost-${cost}`}>\r\n                    <div className=\"name\">{name}</div>\r\n                    <div className=\"cost\">\r\n                        <span>\r\n                            <Coin />\r\n                            {cost}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\n\r\nexport class BlankCard extends React.Component {\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"champ-card blank\">\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Card } from './card';\r\nimport { BlankCard } from './blank-card';\r\nimport { observer } from 'mobx-react';\r\nimport { ChampCard } from '../../stores/types';\r\n\r\n\r\ninterface HandProps {\r\n    hand: (ChampCard|null)[];\r\n    action: (card: ChampCard) => void;\r\n}\r\n\r\n\r\n@observer\r\n export class Hand extends React.Component<HandProps> {\r\n\r\n    public render() {\r\n        const { hand, action } = this.props;\r\n\r\n        return (\r\n            <div className=\"hand\">\r\n                {hand.map( (card, index) => card !== null ? \r\n                    <Card card={card} key={card.guid} action={action}/> :\r\n                    <BlankCard key={index + '-blank'} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { ChampCard } from '../../stores/types';\r\nimport { Hand } from './hand';\r\nimport { observer } from 'mobx-react';\r\nimport { Summoner } from '../../stores/summoner';\r\n\r\ninterface DraftMainProps {\r\n    player: Summoner;\r\n}\r\n\r\n@observer\r\nexport class DraftMain extends React.Component<DraftMainProps> {\r\n    \r\n    public render() {\r\n\r\n        const { player } = this.props;\r\n        const { currentHand} = player;\r\n\r\n        return (\r\n            <div className=\"draft-main draft-area\">\r\n                <Hand hand={currentHand} action={x => this.buyCard(x)} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private buyCard(card: ChampCard) {\r\n        this.props.player.buyCard(card);\r\n    }\r\n}","import * as React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\n\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { Coin } from '../shared/coin';\r\nimport { Types } from '../../stores/drag-drop';\r\nimport { UnitSelection } from '../../stores/types';\r\nimport { Summoner } from '../../stores/summoner';\r\n\r\ninterface DraftSellProps {\r\n    player: Summoner\r\n}\r\n\r\nexport const DraftSell: React.FC<DraftSellProps> = ({ player }) => {\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: [Types.BENCH, Types.BOARD],\r\n        drop: (item) => onDrop(item, player),\r\n        collect: monitor => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n    });\r\n    const { activeUnit } = player;\r\n    if(activeUnit === undefined || !activeUnit.unit) { return null; }\r\n\r\n    const { name } = activeUnit.unit.champ;\r\n    const cost = DraftStore.getUnitSalePrice(activeUnit.unit);\r\n\r\n    const activeClass = canDrop && isOver ? 'active' : '';\r\n\r\n    return (\r\n        <div className={`draft-sell draft-area ${activeClass}`} ref={drop}>\r\n            <div className=\"\">\r\n                <i className=\"trash\"></i>\r\n            </div>\r\n            <div className=\"message\">\r\n                <span>Sell {name} for <Coin /> {cost} </span>\r\n            </div>\r\n            { canDrop && isOver && <div>\r\n                Release to Sell\r\n            </div> }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst onDrop = (item: any, player: Summoner) => {\r\n    const selection = {\r\n        unit: item.unit,\r\n        index: item.index\r\n    } as UnitSelection;\r\n    player.sellUnit(selection);\r\n};","import * as React from 'react';\r\n\r\nimport \"./tooltip.scss\";\r\n\r\nimport { DraftStore } from '../../../stores/draft-store';\r\nimport { Coin } from '../../shared/coin';\r\nimport { Summoner } from '../../../stores/summoner';\r\n\r\ninterface TooltipProps {\r\n    tooltip: string;\r\n    draft: DraftStore;\r\n}\r\n\r\nconst renderRefreshTooltip = () => {\r\n    return (\r\n        <>\r\n            <div>Refresh [Shift + D]</div>\r\n            <div>Refresh the store with a new set of champions</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst renderBuyXpTooltip = () => {\r\n    return (\r\n        <>\r\n            <div>Buy XP [Shift + F]</div>\r\n            <div>Gain 4 XP toward your next level. Levelling up increases your team size and gives you access to stronger champions in the store. You gain 2 XP for free at the begninning of each round</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst renderIncomeTooltip = (player: Summoner) => {\r\n    return (\r\n        <>\r\n            <h4>Total Income <Coin /> {player.calculateIncome()}</h4>\r\n            <div>Passive Income <Coin /> +{player.calculatePassiveIncome()}</div>\r\n            <div>Interest (Max 5) <Coin /> +{player.calculateInterest()}</div>\r\n            <div>Win/Lost Streak <Coin /> +{player.calculateStreakBonus()}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst renderTimerTooltip = (draft: DraftStore) => {\r\n    return (\r\n        <>\r\n            <div>Toggle the Timer [Shift + P]</div>\r\n            <div>{draft.isPaused ? 'Resume' : 'Pause'} the Round Timer</div>\r\n        </>\r\n    );\r\n}\r\n\r\nconst renderNextRoundTooltip = (draft: DraftStore) => {\r\n    return (\r\n        <>\r\n            <div>Go to the next round [Shift + R]</div>\r\n            <div>Current Round: {draft.roundCount}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst renderLockHandTooltip = (player: Summoner) => {\r\n    return (\r\n        <>\r\n            <div>Toggle Lock [Shift + L]</div>\r\n            <div>{player.isHandLocked ? 'Unlock' : 'Lock'} your current store offerings.</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst getContent = (tooltip: string, draft: DraftStore): string|React.ReactElement|null => {\r\n    const { player } = draft;\r\n    switch(tooltip) {\r\n        case 'refresh': return renderRefreshTooltip();\r\n        case 'income': return renderIncomeTooltip(player);\r\n        case 'buyXp': return renderBuyXpTooltip();\r\n        case 'nextRound': return renderNextRoundTooltip(draft);\r\n        case 'lock': return renderLockHandTooltip(player);\r\n        case 'timer': return renderTimerTooltip(draft);\r\n        default: return null;\r\n    }\r\n}\r\n\r\nexport const Tooltip: React.FC<TooltipProps> = ({tooltip, draft}) => {\r\n    if(!tooltip) { return null; }\r\n    const content = getContent(tooltip, draft);\r\n\r\n    return (\r\n        <div className=\"tooltip\">\r\n            <div className=\"inner\">\r\n                {content}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport './draft.scss';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { inject } from 'mobx-react';\r\nimport { observer } from 'mobx-react';\r\nimport { DraftSidebar } from './sidebar/draft-sidebar';\r\nimport { DraftMain } from './draft-main';\r\nimport { DraftSell } from './draft-sell';\r\nimport { Tooltip } from './tooltip/tooltip';\r\nimport { Coin } from '../shared/coin';\r\nimport { Summoner } from '../../stores/summoner';\r\n\r\ninterface DraftProps {\r\n    player: Summoner;\r\n    draft: DraftStore;\r\n}\r\n\r\ninterface DraftState {\r\n    activeTooltip: string;\r\n}\r\n\r\n@inject('draft', 'player')\r\n@observer\r\nexport class Draft extends React.Component<DraftProps, DraftState> {\r\n    \r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            activeTooltip: \"\"\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const { player, draft } = this.props;\r\n        const { gold } = player;\r\n        const showSell = player.activeUnit !== undefined;\r\n\r\n        const setTooltip = ((area: string) => this.setState({\r\n            activeTooltip: area\r\n        }));\r\n\r\n        const lockClass = player.isHandLocked ? 'closed' : 'open';\r\n        const timerClass = draft.isPaused ? 'pause' : 'play';\r\n        return (\r\n            <section className=\"draft\">\r\n                {!showSell && <>\r\n                     <div className=\"draft-gold-bar above-bar\" \r\n                        onMouseEnter={() => setTooltip('income')}\r\n                        onMouseLeave={() => setTooltip(\"\")}\r\n                    >\r\n                        <div className=\"draft-gold\">\r\n                            <Coin/>{gold}\r\n                        </div>\r\n                    </div>\r\n                     <div className=\"draft-timer-bar above-bar\" \r\n                        onClick={() => draft.toggleTimer()}\r\n                        onMouseEnter={() => setTooltip('timer')}\r\n                        onMouseLeave={() => setTooltip(\"\")}\r\n                    >\r\n                        <div className=\"timer-bar\">                    \r\n                            <div className={`timer-icon ${timerClass}`}></div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"draft-lock above-bar\"\r\n                        onClick={() => player.toggleHandLock()}\r\n                        onMouseEnter={() => setTooltip('lock')}\r\n                        onMouseLeave={() => setTooltip(\"\")}\r\n                    >\r\n                        <div className={`lock ${lockClass}`}></div>\r\n                    </div> \r\n                </>}\r\n                <DraftSidebar draft={draft} player={player} setTooltip={setTooltip} />\r\n                <DraftMain player={player} />              \r\n                {showSell && <DraftSell player={player} />}\r\n                <Tooltip tooltip={this.state.activeTooltip} draft={draft} />\r\n            </section>            \r\n        );\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Synergy } from '../../stores/types';\r\n\r\ninterface SynergyItemProps {\r\n    synergy: Synergy;\r\n}\r\n\r\n@observer\r\nexport class SynergyItem extends React.Component<SynergyItemProps> {\r\n\r\n    public render() {\r\n\r\n        const { synergy } = this.props;\r\n        const { tier } = synergy;\r\n\r\n        const currentBonusIndex = tier === 4 ? -1 : synergy.stages.length - tier;\r\n        const nextBonus = tier === 1 ? -1 : synergy.stages[currentBonusIndex + 1].amount;\r\n        \r\n        const bonusesToDisplay = synergy.stages.slice(0, currentBonusIndex + 2).map((stage, index) => ({\r\n            ...stage,\r\n            isActive: synergy.exact ? index === currentBonusIndex : index <= currentBonusIndex\r\n        }));\r\n\r\n        return (\r\n            <div className={`synergy-item tier-${synergy.tier}`}>\r\n                <div className=\"icon\">\r\n                   <img className=\"\" alt=\"icon\" src={`img/class-icons/${synergy.id}.png`} />\r\n                </div>\r\n               <span>\r\n                <span className=\"synergy-name\">{synergy.name}: </span>{synergy.count}\r\n                {nextBonus > 0 && <span> / {nextBonus}</span>}\r\n               </span>\r\n               <div className=\"tooltip\">\r\n                    <div className=\"tooltip-name\">\r\n                        <img className=\"tooltip-icon\" alt=\"icon\" src={`img/class-icons/${synergy.id}.png`} />\r\n                        <span>{synergy.name}</span>\r\n                    </div>\r\n                    <div className=\"separator\"></div>\r\n                    <div className=\"bonus-section\">\r\n                        {synergy.passive && <div className=\"synergy-passive\">Passive: {synergy.passive}</div>}\r\n                        {bonusesToDisplay.length > 0 && synergy.base &&\r\n                            <div className=\"synergy-base\">Synergy: {synergy.base}</div>\r\n                        }\r\n                        {bonusesToDisplay.map((item) => \r\n                            <div className={`synergy-bonus ${item.isActive ? 'active' : ''}`} key={item.amount}>\r\n                                ({item.amount}) {item.bonus}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Synergy } from '../../stores/types';\r\nimport { SynergyItem } from './synergy-item';\r\n\r\ninterface SynergyTierProps {\r\n    synergies: Synergy[];\r\n    tier: number;\r\n}\r\n\r\n@observer\r\nexport class SynergyTier extends React.Component<SynergyTierProps> {\r\n\r\n    public render() {\r\n\r\n        const { synergies, tier} = this.props;\r\n        if(synergies.length === 0) { return null; }\r\n\r\n        return (\r\n            <div className=\"synergy-tier\">\r\n                <ul className={`tier-${tier}`}>\r\n                    {synergies.map( s => <SynergyItem synergy={s} key={s.id} />)}\r\n                </ul>                \r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { Synergy } from '../../stores/types';\r\nimport { Summoner } from '../../stores/summoner';\r\nimport { SynergyTier } from './synergy-tier';\r\n\r\nimport \"./synergy.scss\";\r\n\r\ninterface SynergiesBarProps {\r\n    player: Summoner;\r\n}\r\n\r\n@observer\r\nexport class SynergiesBar extends React.Component<SynergiesBarProps> {\r\n\r\n    public render() {\r\n        const goldItems = this.getSynergiesOfTier(1);\r\n        const silverItems = this.getSynergiesOfTier(2);\r\n        const bronzeItems = this.getSynergiesOfTier(3);\r\n        const greyItems = this.getSynergiesOfTier(4);\r\n\r\n        const tiers = [ goldItems, silverItems, bronzeItems, greyItems ];\r\n\r\n        return (\r\n            <section className=\"synergies\">\r\n                { tiers.map((tier, index) => \r\n                    <SynergyTier synergies={tier} tier={index + 1} key={`tier_${index + 1}`} />\r\n                )}\r\n            </section>\r\n\r\n        );\r\n    }\r\n\r\n    private getSynergiesOfTier(tier: number): Synergy[] {\r\n        const { player } = this.props;\r\n        return player.unitSynergiesWithTiers.filter(s => s.tier === tier);\r\n    }\r\n}","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { Summoner } from '../../stores/summoner';\r\nimport { SynergiesBar } from '../synergies/synergies-bar';\r\n\r\nimport './simulation.scss';\r\n\r\ninterface SimulationProps {\r\n    player: Summoner;\r\n}\r\n\r\n@inject(\"player\")\r\n@observer\r\nexport class Simulation extends React.Component<SimulationProps> {\r\n    public render() {\r\n        const { player } = this.props;\r\n        const { level, showPlaced, placedUnitCount } = player;\r\n\r\n        const fadeClass = showPlaced ? '' : 'fade';\r\n\r\n        return (\r\n            <section className=\"simulation\">\r\n                <div className=\"inner\">\r\n                    <SynergiesBar player={player} />\r\n                    <div className={`level-section ${fadeClass}`}>\r\n                        <span>Units Placed: { placedUnitCount } / { level }</span>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../stores/draft-store';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\n\r\ninterface HotKeysProps{\r\n    draft: DraftStore;\r\n}\r\n\r\nexport const Hotkeys: React.FC<HotKeysProps> = ({draft}) =>{\r\n    useHotkeys(\"shift+r\", () => draft.nextRound());\r\n    useHotkeys(\"shift+p\", () => draft.toggleTimer());\r\n    useHotkeys('shift+d', () => draft.refreshHand());\r\n    useHotkeys('shift+f', () => draft.buyXP());\r\n    useHotkeys('shift+l', () => draft.toggleHandLock());\r\n    return null;\r\n}","import * as React from 'react';\r\nimport { JsonEditor } from 'jsoneditor-react';\r\nimport ace from 'brace';\r\n\r\nimport 'jsoneditor-react/es/editor.min.css';\r\nimport 'brace/mode/json';\r\nimport 'brace/theme/github';\r\n\r\ninterface EditorProps {\r\n    json: string;\r\n    onChange: (string) => void;\r\n    schema: any\r\n}\r\n\r\nexport class Editor extends React.Component<EditorProps> {\r\n    render() {\r\n        const { json, onChange, schema } = this.props;\r\n\r\n        return (\r\n            <section className=\"editor\">\r\n                <JsonEditor\r\n                    value={json}\r\n                    onChange={onChange}\r\n                    ace={ace}\r\n                    theme=\"ace/theme/github\"\r\n                    schema={schema}\r\n                />\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { DataStore } from '../../stores/data-store';\r\nimport { Editor } from './editor';\r\n\r\nimport \"./advanced.scss\";\r\n\r\ninterface AdvancedScreenProps {\r\n    data: DataStore;\r\n    close: () => void;\r\n}\r\n\r\ninterface AdvancedScreenState {\r\n    activeDataset: string;\r\n    updatedData: any;\r\n}\r\n\r\nexport class AdvancedScreen extends React.Component<AdvancedScreenProps, AdvancedScreenState> {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeDataset: null,\r\n            updatedData: null\r\n        };\r\n    }\r\n\r\n    private updateActiveDataset(json) {\r\n        const { activeDataset } = this.state;\r\n        if(!activeDataset) { return; }\r\n        this.setState({ updatedData: json });\r\n    }\r\n\r\n    private getActiveJson() {\r\n        const {activeDataset} = this.state;\r\n        const {data} = this.props;\r\n\r\n        const mapToObj = m => JSON.parse(JSON.stringify(m));\r\n\r\n        switch(activeDataset) {\r\n            case \"levels\": return mapToObj(data.levels);\r\n            case \"tiers\": return mapToObj(data.unitsPerTier);\r\n            case \"champs\": return mapToObj(data.champions);\r\n            default: return \"\";\r\n        }\r\n    }\r\n\r\n    private getSchema() {\r\n        return null;\r\n    }\r\n\r\n    private getTitle() {\r\n        switch(this.state.activeDataset) {\r\n            case \"levels\": return \"Levels\";\r\n            case \"tiers\": return \"Units Per Tier\";\r\n            case \"champs\": return \"Champions\";\r\n            default: return \"\";\r\n        }\r\n    }\r\n\r\n    private applyChanges() {\r\n        const { activeDataset, updatedData } = this.state;\r\n        const { data } = this.props;\r\n\r\n        if(!activeDataset) { return; }\r\n\r\n        if(activeDataset === 'levels') {\r\n            data.setLevelsFromJson(updatedData);\r\n        } else if(activeDataset === 'tiers') {\r\n            data.setUnitsPerTierFromJson(updatedData);\r\n        } else if(activeDataset === 'champs') {\r\n            data.setChampsFromJson(updatedData);\r\n        }\r\n    }\r\n\r\n    private setActiveDataset(val) {\r\n        return () => {\r\n            \r\n            this.setState({\r\n                activeDataset: null\r\n            }, () => this.setState({\r\n                activeDataset: val\r\n            }));\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        const { close } = this.props;\r\n        const { activeDataset } = this.state;\r\n\r\n        const setActive = this.setActiveDataset.bind(this);\r\n\r\n        return (\r\n            <div className=\"advanced-screen\">\r\n                <div className=\"inner\">\r\n                    <div className=\"close\" onClick={close}>X</div>\r\n                    <h2>Edit Datasets</h2>\r\n                    <div className=\"actions\">\r\n                        <button className=\"action\" onClick={setActive('champs')}>\r\n                            Champions\r\n                        </button>\r\n                        <button className=\"action\" onClick={setActive('tiers')}>\r\n                            Levels\r\n                        </button>\r\n                        <button className=\"action\" onClick={setActive('levels')}>\r\n                            Units Per Tier\r\n                        </button>\r\n                    </div>\r\n                    {activeDataset && <div className=\"editor-container\">\r\n                        <h4>Editing {this.getTitle()}</h4>\r\n                        <Editor\r\n                            json={this.getActiveJson()}\r\n                            onChange={(j) => this.updateActiveDataset(j)}\r\n                            schema={this.getSchema()}\r\n                        />\r\n                        <button className=\"action\" onClick={() => this.applyChanges()}>Apply Changes</button>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}   ","import * as React from 'react';\r\nimport \"./splash.scss\";\r\nimport { DataStore } from '../../stores/data-store';\r\nimport { AdvancedScreen } from '../advanced/advanced';\r\n\r\ninterface SplashScreenProps {\r\n    begin: () => void;\r\n    data: DataStore;\r\n}\r\n\r\ninterface SplaceScreenState {\r\n    isAdvancedOpen: boolean;\r\n}\r\n\r\nexport class SplashScreen extends React.Component<SplashScreenProps, SplaceScreenState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isAdvancedOpen: false\r\n        }\r\n    }\r\n\r\n    openAdvancedPage() {\r\n        this.setState({\r\n            isAdvancedOpen: true\r\n        });\r\n    }\r\n\r\n    closeAdvancedPage() {\r\n        this.setState({\r\n            isAdvancedOpen: false\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const { begin, data } = this.props;\r\n        const { isAdvancedOpen } = this.state;\r\n\r\n        return (\r\n            <div className=\"splash\">\r\n                {isAdvancedOpen && <AdvancedScreen data={data} close={() => this.closeAdvancedPage()} />}\r\n                <div className=\"island\"></div>  \r\n                <div className=\"inner\">\r\n                    <h1>Theory Draft for</h1>\r\n                    <div className=\"tft-logo\"></div>\r\n                    <p> A Drafting Simulator and Practice Tool</p>\r\n                    <div className=\"tft-end-cap\"></div>\r\n                    <div className=\"actions\">\r\n                        <button className=\"action\" onClick={begin}>\r\n                            Begin\r\n                        </button>\r\n                        <button className=\"action minor\" onClick={() => this.openAdvancedPage()}>\r\n                            Advanced\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { observable, action } from 'mobx';\r\n\r\nimport * as tiersData from '../data/tiers.json';\r\nimport * as levelsData from '../data/levels.json';\r\nimport * as championsData from '../data/champions.json';\r\nimport { synergies } from '../data/synergies.json';\r\nimport { LevelData, ChampData, SynergyData } from './types';\r\n\r\nexport class DataStore {\r\n\r\n    @observable\r\n    unitsPerTier: Map<string, number>;\r\n\r\n    @observable\r\n    levels: Map<string, LevelData>;\r\n\r\n    @observable\r\n    champions: ChampData[];\r\n\r\n    @observable\r\n    synergies: Map<string, SynergyData>;\r\n\r\n    private static emptyChamp: ChampData = {\r\n        name: \"\",\r\n        id: \"\",\r\n        cost: 0,\r\n        classes: []\r\n    };\r\n\r\n    private static emptyLevel: LevelData = {\r\n        xp: 0,\r\n        tierOdds: [0, 0, 0, 0, 0]\r\n    };\r\n\r\n    constructor() {\r\n        this.unitsPerTier = new Map();\r\n        this.levels = new Map();\r\n        this.synergies = new Map();\r\n        this.champions = [];\r\n\r\n        this.setUnitsPerTierFromJson(tiersData.unitsPerTier);\r\n        this.setLevelsFromJson(levelsData.levels);\r\n        this.setChampsFromJson(championsData.champions);\r\n        this.setSynergiesFromJson(synergies);\r\n    }\r\n\r\n    @action\r\n    public setSynergiesFromJson(synergies: any) {\r\n        this.synergies.clear();\r\n        Object.keys(synergies).forEach(key => {\r\n            let val = synergies[key];\r\n            this.synergies.set(key, val);\r\n        });\r\n    }\r\n\r\n\r\n    @action\r\n    public setUnitsPerTierFromJson(unitsPerTier: any) {\r\n        this.unitsPerTier.clear();\r\n        Object.keys(unitsPerTier).forEach(key => {\r\n            let val = Number(unitsPerTier[key]) || 0;\r\n            this.unitsPerTier.set(key, val);\r\n        });\r\n    }\r\n\r\n    @action\r\n    public setLevelsFromJson(levels: any) {\r\n        this.levels.clear();\r\n        Object.keys(levels).forEach(key => {\r\n            let val = levels[key] as LevelData || DataStore.emptyLevel;\r\n            this.levels.set(key, val);\r\n        });\r\n    }\r\n\r\n    @action\r\n    public setChampsFromJson(champions: any) {\r\n        this.champions.splice(0);//Inline clear an array\r\n        Object.keys(champions).forEach(key => {\r\n            let val = champions[key] as ChampData || null;\r\n            if(val !== null) {\r\n                this.champions.push(val);\r\n            }\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { Summoner } from '../../stores/summoner';\r\n\r\nimport \"./opponents.scss\";\r\nimport { Champion } from '../champion/champion';\r\n\r\ninterface OpponentsProps {\r\n    draft: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Opponents extends React.Component<OpponentsProps> {\r\n\r\n    public render() {\r\n        const { draft } = this.props;\r\n\r\n        const opponents = draft.summoners.slice(1);\r\n\r\n        return (\r\n            <section className=\"opponents\">\r\n                {opponents.map((x, index) => this.renderOpponent(x, index))}\r\n            </section>\r\n        );\r\n    }\r\n\r\n    public renderOpponent(opponent: Summoner, index: number) {\r\n        const units = opponent.allUnits\r\n            .filter(x => x.unit !== undefined)\r\n            .map(x => x.unit)\r\n            .sort((a,b) => b.champ.name < a.champ.name ? 1 : -1)\r\n            .sort((a, b) => b.tier - a.tier);\r\n        return (\r\n            <div className=\"summoner\" key={index}>\r\n                <div className=\"summoner-health\">{opponent.health}</div>\r\n                <div className=\"summoner-avatar\">\r\n                    <div className=\"health-display\"></div>\r\n                    <div className=\"summoner-avatar__icon\"></div>\r\n                </div>\r\n                <div className=\"summoner__units\">\r\n                        {units.map((x, index) => \r\n                            <div className=\"summoner__unit\" key={`${index}_${x.tier}_${x.champ.id}`}>\r\n                                <Champion unit={x} />\r\n                            </div>\r\n                        )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport MultiBackend from 'react-dnd-multi-backend';\r\nimport HTML5toTouch from 'react-dnd-multi-backend/lib/HTML5toTouch'\r\nimport { observable } from 'mobx';\r\nimport { Provider, observer } from 'mobx-react';\r\n\r\nimport './main-page.scss';\r\n\r\nimport { Board } from './board/board';\r\nimport { Bench } from './bench/bench';\r\nimport { Draft } from './draft/draft';\r\n\r\nimport { DraftStore } from '../stores/draft-store';\r\nimport { Simulation } from './simulation/simulation';\r\nimport { Hotkeys } from './hotkeys';\r\nimport { SplashScreen } from './splash/splash';\r\nimport { DataStore } from '../stores/data-store';\r\nimport { Opponents } from './simulation/opponents';\r\n\r\n@observer\r\nexport class MainPage extends React.Component {\r\n\r\n    @observable\r\n    draftStore: DraftStore = null;\r\n\r\n    dataStore: DataStore = null;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.dataStore = new DataStore();\r\n        this.draftStore = new DraftStore(this.dataStore);\r\n    }\r\n\r\n    public render() {\r\n        const showSp1ash = this.draftStore.isSplashOpen;\r\n\r\n        if(showSp1ash) {\r\n            return (\r\n                <section className=\"main-page\">\r\n                    <SplashScreen data={this.dataStore} begin={() => this.draftStore.start()} />\r\n                </section>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <section className=\"main-page\">\r\n\t\t\t\t<DndProvider backend={MultiBackend(HTML5toTouch)}>\r\n                    <Provider draft={this.draftStore} player={this.draftStore.player}>\r\n                        <>\r\n                            <div className=\"board-container\">\r\n                                <div className=\"sidebar\">\r\n                                    <Simulation />\r\n                                </div>\r\n                                <div className=\"board-and-bench\">\r\n                                    <Board />\r\n                                    <Bench />\r\n                                </div>\r\n                                <div className=\"sidebar\">\r\n                                    <Opponents />\r\n                                </div>\r\n                            </div>\r\n                            <Draft />\r\n                        </>\r\n                    </Provider>\r\n                </DndProvider>\r\n                <Hotkeys draft={this.draftStore} />\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './app.scss';\r\nimport { MainPage } from './components/main-page';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"theory-draft app\">\r\n      <main>\r\n        <MainPage />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}