{"version":3,"sources":["components/champion/champion.tsx","components/board/cell.tsx","utils.ts","components/board/board.tsx","components/bench/bench-slot.tsx","components/bench/bench.tsx","stores/draft-store.ts","components/shared/coin.tsx","components/draft/sidebar/draft-sidebar.tsx","components/draft/card.tsx","components/draft/blank-card.tsx","components/draft/hand.tsx","components/draft/draft-main.tsx","components/draft/draft-sell.tsx","components/draft/draft.tsx","components/simulation/simulation.tsx","components/main-page.tsx","App.js","serviceWorker.js","index.js"],"names":["Champion","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","unit","props","champ","stars","getTierString","style","backgroundImage","concat","id","react","className","name","tier","React","Cell","_this$props","boardUnit","onSelect","onClick","champion_Champion","BOARD_WIDTH","BOARD_HEIGHT","Board","inject","_dec","_class","observer","call","_this","draft","rows","toConsumableArray","Array","map","_","index","getRow","row","renderRow","i","start","end","boardUnits","slice","_this2","isOdd","bu","cell_Cell","getKey","x","undefined","console","log","selection","isBenched","toggleSelectedUnit","moveSelectedUnitToBoard","BenchSlot","selectedClass","isSelected","Boolean","Bench","bench_dec","bench_class","benchedUnits","selectedUnit","selectedBenchIndex","bench_slot_BenchSlot","onSelectUnit","moveSelectedUnitToBench","DraftStore","_temp","_class2","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","pool","currentHand","nextLevelXp","getXpForLevelUp","level","BENCH_SIZE","fill","moveUnitToBench","moveUnitToBoard","newBoardUnit","isHandLocked","roundCount","gold","calculateIncome","addXP","XP_PER_ROUND","REFRESH_COST","refreshHand","calculatePassiveIncome","calculateInterest","Math","min","floor","MAXIMIM_INTEREST","forEach","card","push","drawHand","BUY_XP_COST","amount","xp","getUnitSalePrice","tierBonus","cost","length","drawCard","odds","levels","tierOdds","roll","random","getCost","cardSet","filter","splice","champions","flatMap","poolSize","getInitialPoolSizeForChamp","guid","removeExtra","firstEmpty","findIndex","matchingBenchUnits","matchingBoardUnits","matchingUnits","availableToBuy","mergeUnits","c","_this3","extraUnits","champCount","reduce","m","val","keys","find","boardIndex","currentLevel","tiers","tier1","tier2","tier3","tier4","tier5","total","draft_store_class","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","Coin","DraftSidebar","draft_sidebar_class","hideAboveBar","progressStyle","transform","lockClass","toggleHandLock","coin_Coin","buyXP","Card","_card$champ","classes","BlankCard","Hand","hand_class","hand","card_Card","blank_card_BlankCard","DraftMain","draft_main_class","hand_Hand","buyCard","DraftSell","draft_sell_class","sellSelectedUnit","Draft","draft_dec","draft_class","showSell","draft_sidebar_DraftSidebar","draft_main_DraftMain","draft_sell_DraftSell","Simulation","simulation_dec","simulation_class","nextRound","MainPage","main_page_class","main_page_descriptor","assertThisInitialized","draftStore","initializePool","window","ChampionsData","mobx_react_module","board_Board","bench_Bench","simulation_Simulation","draft_Draft","App","react_default","a","createElement","main_page_MainPage","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68906acc.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Unit } from '../../stores/types';\r\n\r\ninterface ChampionProps {\r\n    unit: Unit;\r\n}\r\n\r\nexport class Champion extends React.Component<ChampionProps> {\r\n\r\n    public render() {\r\n        const { unit } = this.props;\r\n        const { champ } = unit;\r\n\r\n        const stars = this.getTierString(unit);\r\n\r\n        const style = {\r\n            backgroundImage: `url(img/champ-square/${champ.id}.png)`\r\n        };\r\n\r\n        return (\r\n            <div className=\"champion\" style={style}>\r\n                <div className=\"champion-tier\">{stars}</div>\r\n                <div className=\"champion-name\">{champ.name}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getTierString(unit: Unit): string {\r\n        switch(unit.tier) {\r\n            case 1: return '★';\r\n            case 2: return '★★';\r\n            case 3: return '★★★';\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { BoardUnit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\n\r\ninterface CellProps {\r\n    boardUnit: BoardUnit;\r\n    onSelect: (bu: BoardUnit) => void;\r\n}\r\n\r\nexport class Cell extends React.Component<CellProps> {\r\n    public render() {\r\n        const { boardUnit, onSelect } = this.props;\r\n        const { unit } = boardUnit;\r\n        \r\n        return (\r\n            <div className=\"cell\" onClick={() => onSelect(boardUnit)}>\r\n                <div className=\"contents\">\r\n                    {unit && <Champion unit={unit} /> }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import { Coords } from './stores/types';\r\n\r\nexport const BOARD_WIDTH = 7;\r\nexport const BOARD_HEIGHT = 3;\r\n\r\nexport const getIndexForCoords = (x: number, y: number): number => {\r\n    return y * BOARD_WIDTH + x;\r\n}\r\n\r\nexport const getCoordsForIndex = (index: number): Coords => {\r\n    return {\r\n        x: index % BOARD_WIDTH,\r\n        y: Math.floor(index / BOARD_WIDTH)\r\n    };\r\n}","import * as React from 'react';\r\nimport { Cell } from './cell';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport \"./board.scss\";\r\nimport { BOARD_HEIGHT, BOARD_WIDTH } from '../../utils';\r\nimport { BoardUnit, UnitSelection } from '../../stores/types';\r\n\r\ninterface BoardProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Board extends React.Component<BoardProps> {\r\n\r\n    public constructor(props: BoardProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const { draft } = this.props;\r\n\r\n        if(!draft) { return; }\r\n\r\n        const rows = [...Array(BOARD_HEIGHT)].map((_, index) => this.getRow(index + 1));\r\n\r\n        return (\r\n            <div className=\"board\">\r\n                {rows.map((row: BoardUnit[], index: number) => this.renderRow(row, index))}                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getRow(i: number): BoardUnit[] {\r\n        const { draft } = this.props;\r\n        const start = BOARD_WIDTH * (i - 1);\r\n        const end = BOARD_WIDTH * i;\r\n\r\n        return draft.boardUnits.slice(start, end);\r\n    }\r\n\r\n\r\n    private renderRow(boardUnits: BoardUnit[], row: number) {\r\n        const isOdd = row%2 === 1; \r\n        return (\r\n            <div className=\"board__row\" key={row}>\r\n                {isOdd && <div className=\"board-spacer spacer--left\"></div>}\r\n                {boardUnits.map(bu=>\r\n                    <Cell key={this.getKey(bu)} boardUnit={bu} onSelect={x => this.onSelect(x)} />\r\n                )}\r\n                {!isOdd && <div className=\"board-spacer spacer--right\"></div>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getKey(boardUnit: BoardUnit): string {\r\n        const { unit, index } = boardUnit;\r\n        if(unit === undefined) {\r\n            return `blank_${index}`;\r\n        } else {\r\n            return `${unit.champ.id}_${unit.tier}_${index}`;\r\n        }\r\n    }\r\n\r\n    private onSelect(boardUnit: BoardUnit) {\r\n        const { draft } = this.props;\r\n\r\n        console.log(\"Selected Board Unit\", boardUnit);\r\n        //If empty space\r\n        if(boardUnit.unit === undefined) {\r\n            draft.moveSelectedUnitToBoard(boardUnit.index);\r\n            return;\r\n        }\r\n\r\n        const selection = {\r\n            unit: boardUnit.unit,\r\n            index: boardUnit.index,\r\n            isBenched: false\r\n        } as UnitSelection;\r\n\r\n        draft.toggleSelectedUnit(selection);\r\n    }\r\n}","import * as React from 'react';\r\nimport { Unit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\n\r\ninterface BenchSlotProps {\r\n    unit?: Unit;\r\n    index: number;\r\n    isSelected: boolean;\r\n    onSelect: (unit: Unit, index: number) => void\r\n}\r\n\r\nexport class BenchSlot extends React.Component<BenchSlotProps> {\r\n    public render() {\r\n        const { unit, index, onSelect, isSelected } = this.props;\r\n        const selectedClass = isSelected ? 'selected' : '';\r\n        return (\r\n            <div className={`bench-slot ${selectedClass}`} onClick={() => onSelect(unit, index)}>\r\n                {Boolean(unit) && <Champion unit={unit} />}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { BenchSlot } from './bench-slot';\r\nimport './bench.scss';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { UnitSelection, Unit } from '../../stores/types';\r\ninterface BenchProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Bench extends React.Component<BenchProps> {\r\n    public render() {\r\n        const { draft } = this.props;\r\n        const { benchedUnits, selectedUnit } = draft;\r\n        const selectedBenchIndex = (selectedUnit !== undefined && selectedUnit.isBenched) ? selectedUnit.index : -1;\r\n\r\n        return (\r\n            <div className=\"bench\">\r\n                {benchedUnits.map((unit, index) => <BenchSlot\r\n                    unit={unit}\r\n                    index={index}\r\n                    isSelected={selectedBenchIndex === index}\r\n                    onSelect={(unit, index) => this.onSelectUnit(unit, index)}\r\n                    key={ `${unit ? unit.champ.id + '_' + unit.tier : 'blank'}_${index}`}\r\n                />)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onSelectUnit(unit: Unit, index: number) {\r\n        const { draft } = this.props;\r\n        if(!unit) {\r\n            draft.moveSelectedUnitToBench(index);\r\n            return;\r\n        }\r\n        \r\n        const selection = {\r\n            unit,\r\n            index,\r\n            isBenched: true\r\n        } as UnitSelection;\r\n\r\n        draft.toggleSelectedUnit(selection);\r\n    }\r\n}","import { observable, action } from 'mobx';\r\n\r\nimport * as tiers from '../data/tiers.json';\r\nimport * as levels from '../data/levels.json';\r\nimport * as champions from '../data/champions.json';\r\nimport { Unit, ChampData, ChampCard, UnitSelection, BoardUnit } from './types';\r\nimport { BOARD_WIDTH, BOARD_HEIGHT } from '../utils';\r\n\r\n\r\nexport class DraftStore {\r\n\r\n    public static REFRESH_COST = 2;\r\n    public static BUY_XP_COST = 4;\r\n    public static BENCH_SIZE = 9;\r\n    public static XP_PER_ROUND = 2;\r\n    public static MAXIMIM_INTEREST = 5;\r\n\r\n    @observable\r\n    pool: ChampCard[];\r\n\r\n    @observable\r\n    currentHand: (ChampCard | null)[];\r\n\r\n    @observable\r\n    benchedUnits: (Unit | null)[] = [];\r\n\r\n    @observable\r\n    boardUnits: BoardUnit[] = [];\r\n\r\n    @observable\r\n    xp: number = 0;\r\n\r\n    @observable\r\n    nextLevelXp: number = 2;\r\n\r\n    @observable\r\n    level: number = 1;\r\n\r\n    @observable\r\n    gold: number = 3;\r\n\r\n    @observable\r\n    isHandLocked: boolean = false;\r\n\r\n    @observable\r\n    selectedUnit?: UnitSelection = undefined;\r\n\r\n    @observable\r\n    roundCount: number = 1;\r\n\r\n    constructor() {\r\n        this.pool = [];\r\n        this.currentHand = [];\r\n        this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n        this.benchedUnits = [...Array(DraftStore.BENCH_SIZE)].fill(null);\r\n        this.boardUnits = [...Array(BOARD_WIDTH * BOARD_HEIGHT)].map(\r\n            (_, index) => ({ unit: undefined, index } as BoardUnit)\r\n        );\r\n    }\r\n\r\n    @action\r\n    public toggleSelectedUnit(selection: UnitSelection) {\r\n\r\n        if(this.selectedUnit === undefined) {\r\n            this.selectedUnit = selection;\r\n            console.log(\"Selected\", selection.unit);\r\n            return;\r\n        }\r\n        \r\n        const isSameUnit = this.selectedUnit !== undefined && selection.index === this.selectedUnit.index;\r\n\r\n        //Click the same unit twice to Deselect it.\r\n        //Click 2 different units to swap their positions\r\n        if(isSameUnit) { \r\n            this.selectedUnit = undefined;\r\n            console.log(\"Deselected\", selection.unit.champ.name);\r\n        } else {\r\n           if(this.selectedUnit.isBenched) {\r\n               this.moveUnitToBench(selection.unit, this.selectedUnit.index);\r\n           } else {\r\n               this.moveUnitToBoard(selection.unit, this.selectedUnit.index);\r\n           }\r\n\r\n           if(selection.isBenched) {\r\n                this.moveUnitToBench(this.selectedUnit.unit, selection.index);\r\n            } else {\r\n               this.moveUnitToBoard(this.selectedUnit.unit, selection.index);\r\n            }\r\n\r\n            this.selectedUnit = undefined;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public moveSelectedUnitToBench(index: number) {\r\n        if(this.selectedUnit === undefined || this.selectedUnit.unit === null) { return; }\r\n        //Remove selected unit from current space;\r\n        if(this.selectedUnit.isBenched) {\r\n            this.benchedUnits[this.selectedUnit.index] = null;\r\n        } else {\r\n            this.boardUnits[this.selectedUnit.index].unit = undefined;\r\n        }\r\n        //Move into new space\r\n        this.moveUnitToBench(this.selectedUnit.unit, index);\r\n\r\n        //Remove selection\r\n        this.selectedUnit = undefined;\r\n    }\r\n\r\n    @action\r\n    public moveSelectedUnitToBoard(index: number) {\r\n        if(this.selectedUnit === undefined || this.selectedUnit.unit === null) { return; }\r\n\r\n        //Remove the selected unit from current space\r\n        if(this.selectedUnit.isBenched) {\r\n            this.benchedUnits[this.selectedUnit.index] = null;\r\n        } else {\r\n            this.boardUnits[this.selectedUnit.index].unit = undefined;\r\n        }\r\n\r\n        //Move into new space\r\n        this.moveUnitToBoard(this.selectedUnit.unit, index);\r\n\r\n        //Remove selection\r\n        this.selectedUnit = undefined;\r\n    }\r\n\r\n    @action\r\n    private moveUnitToBench(unit: Unit, index: number) {\r\n        this.benchedUnits[index] = unit;\r\n    }\r\n\r\n    @action\r\n    private moveUnitToBoard(unit: Unit, index: number) {\r\n        const newBoardUnit = { index, unit } as BoardUnit;\r\n        this.boardUnits[index] = newBoardUnit;\r\n    }\r\n\r\n    @action\r\n    public toggleHandLock() {\r\n        this.isHandLocked = !this.isHandLocked;\r\n    }\r\n\r\n    @action\r\n    public nextRound() {\r\n        this.roundCount += 1;      \r\n        this.gold += this.calculateIncome();\r\n        this.addXP(DraftStore.XP_PER_ROUND);\r\n        if(!this.isHandLocked) {\r\n            this.gold += DraftStore.REFRESH_COST;\r\n            this.refreshHand();    \r\n        }\r\n\r\n    }\r\n\r\n    private calculateIncome(): number {\r\n        const passive = this.calculatePassiveIncome();\r\n        const interest =  this.calculateInterest();\r\n        const streak = 0; //TODO: Simulate Wins/Losses??\r\n        return passive + interest + streak;\r\n    }\r\n\r\n    private calculateInterest(): number {\r\n        return Math.min(Math.floor(this.gold / 10), DraftStore.MAXIMIM_INTEREST);\r\n    }\r\n\r\n    private calculatePassiveIncome(): number {\r\n        if(this.roundCount > 6) {\r\n            return 5;\r\n        } else if (this.roundCount > 3) {\r\n            return 4\r\n        } else {\r\n            return 3;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public refreshHand() {\r\n        if (this.gold < DraftStore.REFRESH_COST) {\r\n            console.log(\"You cannot afford to refresh\");\r\n            return;\r\n        }\r\n\r\n        //Return hand to pool\r\n        this.currentHand.forEach(card => {\r\n            if(card) {\r\n                this.pool.push(card);\r\n            }\r\n        });\r\n\r\n        this.currentHand = [];\r\n\r\n        this.drawHand();\r\n        this.gold -= DraftStore.REFRESH_COST;\r\n    }\r\n\r\n    @action\r\n    public buyXP() {\r\n        if(this.gold < DraftStore.BUY_XP_COST) {\r\n            console.log(\"You cannot afford to buy XP\");\r\n            return;\r\n        }\r\n        this.addXP(4);\r\n        this.gold -= DraftStore.BUY_XP_COST;\r\n    }\r\n\r\n    @action\r\n    public addXP(amount: number) {\r\n        this.xp += amount;\r\n        //Level Up\r\n        if(this.xp >= this.nextLevelXp) {\r\n            this.xp = this.xp - this.nextLevelXp;\r\n            this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n            this.level += 1;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public sellSelectedUnit() {\r\n        if(this.selectedUnit === undefined) { return; }\r\n\r\n        //Give gold;\r\n        this.gold += this.getUnitSalePrice(this.selectedUnit.unit);\r\n\r\n        //Remove Unit;\r\n        if(this.selectedUnit.isBenched) {\r\n            this.benchedUnits[this.selectedUnit.index] = null;\r\n        } else {\r\n            this.boardUnits[this.selectedUnit.index].unit = undefined;\r\n        }\r\n\r\n        this.selectedUnit = undefined;\r\n    }\r\n\r\n    public getUnitSalePrice(unit: Unit): number {\r\n        let tierBonus = 0;\r\n        switch (unit.tier) {\r\n            case 2: {\r\n                tierBonus = 2;\r\n                break; \r\n            }\r\n            case 3: {\r\n                tierBonus = 4;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return unit.champ.cost + tierBonus;\r\n    }\r\n\r\n    @action\r\n    public drawHand() {\r\n        while(this.currentHand.length < 5) {\r\n            this.drawCard();\r\n        }\r\n    }\r\n\r\n    @action\r\n    public drawCard() {\r\n        const key = `level${this.level}`;\r\n        \r\n        const odds = (levels.levels as any)[key].tierOdds;\r\n        const roll = Math.random();\r\n\r\n        const cost = this.getCost(roll, odds);\r\n\r\n        const cardSet = this.pool.filter(x => x.champ.cost === cost);\r\n        const index = Math.floor(Math.random() * cardSet.length);\r\n        const card = cardSet[index];\r\n\r\n        this.currentHand.push(card);\r\n        this.pool.splice(index, 1);\r\n        console.log(`Your new card: ${card.champ.name}`);\r\n    }\r\n\r\n    @action\r\n    public initializePool() {\r\n        this.pool = champions.champions.flatMap(champ => {\r\n            const poolSize = this.getInitialPoolSizeForChamp(champ.id);\r\n            return [...Array(poolSize)].map((_, index) => ({\r\n                champ,\r\n                guid: champ.id + \"_\" + index\r\n            } as ChampCard));            \r\n        });\r\n    }\r\n\r\n    @action\r\n    public buyCard(card: ChampCard) {\r\n\r\n        if(!card || !card.champ) {\r\n            return;\r\n        }\r\n\r\n        const { guid, champ } = card;\r\n        \r\n        console.log(\"DraftStore::buyCard\", champ);\r\n        let cost = champ.cost;\r\n        let removeExtra = false;\r\n\r\n        if(this.gold < champ.cost) {\r\n            console.log(`You cannot afford to buy ${champ.name} for ${champ.cost} coins`);\r\n            return;\r\n        }\r\n\r\n        /* Several cases:\r\n        1. Player has empty space for unit, all good\r\n        2. Player has no empty space, but has 2 units of the same type at tier 1 already, merge to free up space\r\n        3. Player has no empty space, but has 1 unit of the same type at tier 1,\r\n           and the hand has 2 of that same champ\r\n           3a. If they have the gold to buy 2, buy both and merge to free up space\r\n           3b. If they don't have the gold, abort\r\n        */\r\n\r\n\r\n        //Add unit to bench\r\n        const firstEmpty = this.benchedUnits.findIndex(x => x === null);\r\n        //Case 1\r\n        if(firstEmpty >= 0) {\r\n            this.benchedUnits[firstEmpty] = ({\r\n                tier: 1,\r\n                champ\r\n            });\r\n\r\n        } else {\r\n            const matchingBenchUnits = this.benchedUnits\r\n                .filter(unit => unit !== null && unit.tier === 1 && unit.champ.id === champ.id);\r\n            const matchingBoardUnits = this.boardUnits\r\n                .map(bu => bu.unit || null)\r\n                .filter(unit => unit !== null && unit.tier === 1 && unit.champ.id === champ.id);\r\n\r\n            const matchingUnits = [...matchingBenchUnits, ...matchingBoardUnits];\r\n\r\n            const availableToBuy = this.currentHand\r\n                .filter(card => card != null && card.champ.id === champ.id) as ChampCard[];\r\n\r\n            //Case 2\r\n            if (matchingUnits.length === 2) {\r\n                this.mergeUnits(1, availableToBuy); //Upgrade\r\n            } else if (matchingUnits.length === 1 && availableToBuy.length >= 2) {\r\n                if(this.gold >= champ.cost * 2) { //3a\r\n                    cost *= 2; //Increase Cost\r\n                    this.mergeUnits(1, availableToBuy); //Upgrade\r\n                    removeExtra = true; //Flag that theres a 2nd card to remove\r\n                } else { //3b\r\n                    console.log(\"You don't have space and can't afford to buy 2 of unit: \", champ.name);\r\n                    return;\r\n                }\r\n            } else {\r\n                \r\n                console.log(\"You don't have space to buy this unit: \", champ.name);\r\n                return;\r\n            }\r\n        }\r\n\r\n        //Remove card\r\n        const index = this.currentHand.findIndex(c => c != null && c.guid === guid);\r\n        this.currentHand[index] = null;\r\n\r\n        //Remove 2nd card if needed\r\n        if(removeExtra) {\r\n            const index = this.currentHand.findIndex(card => card != null && card.champ.id === champ.id);\r\n            this.currentHand[index] = null;    \r\n        }\r\n\r\n        //Merge Units\r\n        this.mergeUnits(1);\r\n\r\n        console.log(\"Hello\", cost, this.gold);\r\n        //Pay money\r\n        this.gold -= cost;\r\n    }\r\n\r\n    @action\r\n    private mergeUnits(tier: number = 1, extraCards: ChampCard[] = []) {\r\n        const extraUnits: Unit[] = extraCards.map(card => ({champ: card.champ, tier: 1}));\r\n        const boardUnits: (Unit|null)[] = this.boardUnits.map(bu => bu.unit || null);\r\n        const totalUnits: (Unit|null)[] = [...this.benchedUnits, ...boardUnits, ...extraUnits];\r\n\r\n        const onlyCurrentTier = totalUnits.filter(c => c!== null && c.tier === tier) as Unit[];\r\n        \r\n        //Remap to count champions\r\n        const champCount = onlyCurrentTier.reduce((m: object, unit: Unit) => {\r\n            const id = unit.champ.id;\r\n            const val = (m as any)[id];\r\n            if (!val) {\r\n                (m as any)[id] = 1;\r\n            } else {\r\n                (m as any)[id] = val+1;\r\n            }\r\n            return m;\r\n        }, {});\r\n\r\n        //Find champs to merge\r\n        const idsToMerge = Object.keys(champCount).filter(x => (champCount as any)[x] >= 3);\r\n\r\n        //Merge and upgrade the champs\r\n        idsToMerge.forEach(id => {\r\n            const champ = (champions.champions as ChampData[]).find(c => c.id === id);\r\n            \r\n            let index = -1;\r\n            //Remove all of that unit from bench\r\n            while(-1 !== (index = this.benchedUnits.findIndex(unit => \r\n                unit !== null &&\r\n                unit.champ.id === id &&\r\n                unit.tier === tier\r\n            ))) {\r\n                this.benchedUnits[index] = null;\r\n            }\r\n\r\n            //Remove all of that unit from the board\r\n            index = -1;\r\n            let boardIndex = 1;\r\n            while(-1 !== (index = this.boardUnits.findIndex(boardUnit => \r\n                boardUnit.unit !== undefined &&\r\n                boardUnit.unit.champ.id === id &&\r\n                boardUnit.unit.tier === tier\r\n            ))) {\r\n                this.boardUnits[index].unit = undefined;\r\n                boardIndex = index;\r\n            }\r\n\r\n            //Add upgraded unit\r\n            //Priorise returning to board\r\n            if(boardIndex !== -1) {\r\n                this.boardUnits[boardIndex].unit = {\r\n                    tier: tier + 1,\r\n                    champ\r\n                } as Unit;\r\n            } else {\r\n                const firstEmpty = this.benchedUnits.findIndex(x => x === null);\r\n                this.benchedUnits[firstEmpty] = {\r\n                    tier: tier + 1,\r\n                    champ\r\n                } as Unit;    \r\n            }\r\n        });\r\n\r\n        if (tier === 1) {\r\n            this.mergeUnits(2);\r\n        }\r\n    }\r\n\r\n    private getXpForLevelUp(currentLevel: number) {\r\n        return (levels.levels as any)[`level${currentLevel}`].xp;\r\n    }\r\n\r\n    private getInitialPoolSizeForChamp(id: string): number {\r\n        const champ = champions.champions.find(x => x.id === id);\r\n        if(champ == null) { return 0; }\r\n\r\n        switch(champ.cost) {\r\n            case 1: return tiers.unitsPerTier.tier1;\r\n            case 2: return tiers.unitsPerTier.tier2;\r\n            case 3: return tiers.unitsPerTier.tier3;\r\n            case 4: return tiers.unitsPerTier.tier4;\r\n            case 5: return tiers.unitsPerTier.tier5;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    private getCost(roll: number, odds: number[]) {\r\n        let total = 0;\r\n        let index = 0;\r\n       console.log(`You rolled: ${roll}`, odds);\r\n        while(total < roll) {\r\n            total += odds[index];\r\n            ++index;\r\n            console.log(`Total odds for cost ${index} unit: ${total}`);\r\n        }\r\n        console.log(`You're getting as ${index} cost unit`);\r\n\r\n        return index;\r\n    }\r\n\r\n    private getUnitsByCost(cost: number) {\r\n        return champions.champions.filter(champ => champ.cost === cost);\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport './coin.scss'\r\nexport class Coin extends React.Component{\r\n    public render() {\r\n        return (\r\n            <i className=\"coin\">\r\n                <span className=\"a11y\">Coin</span>\r\n            </i>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../../stores/draft-store';\r\nimport { Coin } from '../../shared/coin';\r\nimport { observer } from 'mobx-react';\r\n\r\ninterface DraftSidebarProps {\r\n    draft: DraftStore;\r\n    hideAboveBar: boolean;\r\n}\r\n\r\n@observer\r\nexport class DraftSidebar extends React.Component<DraftSidebarProps> {\r\n    \r\n    public render() {\r\n\r\n        const { draft, hideAboveBar } = this.props;\r\n        const { xp, nextLevelXp, level } = draft;\r\n\r\n        const progress = xp/nextLevelXp * 100;\r\n        const progressStyle = {\r\n            transform: `translateX(${-100 + progress}%)`\r\n        }\r\n\r\n        const lockClass = draft.isHandLocked ? 'closed' : 'open';\r\n\r\n        return (\r\n            <div className=\"draft-sidebar draft-area\">\r\n                {!hideAboveBar && <div className=\"draft-lock above-bar\" onClick={() => draft.toggleHandLock()}>\r\n                    <div className={`lock ${lockClass}`}></div>\r\n                </div> }\r\n                <div className=\"draft-sidebar-items\">\r\n                    <div className=\"sidebar-item refresh clickable\" onClick={() => draft.refreshHand()}>\r\n                        <div className=\"refresh-panel\">\r\n                            <div className=\"content\">\r\n                                <div>Refresh</div>\r\n                                <div><Coin /> {DraftStore.REFRESH_COST}</div>\r\n                            </div>\r\n                            <div className=\"icon\" style={{backgroundImage: \"url(img/refresh.png)\"}}>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"sidebar-item xp clickable\" onClick={() => draft.buyXP()}>\r\n                        <div className=\"xp-panel\">\r\n                            <div className=\"details\">\r\n                                <div className=\"content\">\r\n                                    <div className=\"label\">Buy XP</div>\r\n                                    <div className=\"sub-label\">\r\n                                        <Coin />{DraftStore.BUY_XP_COST}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"icon\" style={{backgroundImage: \"url(img/level-up.png)\"}}></div>\r\n                            </div>\r\n                            <div className=\"xp-progress\">\r\n                                <div className=\"xp-label\">{xp}/{nextLevelXp}</div>\r\n                                <div className=\"xp-progress-bar\">\r\n                                    <div className=\"bar\">\r\n                                        <div className=\"fill\" style={progressStyle}></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"level\">{level}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\nimport { ChampCard } from '../../stores/types';\r\nimport { Coin } from '../shared/coin';\r\n\r\ninterface CardProps {\r\n    card: ChampCard;\r\n    action: (card: ChampCard) => void;\r\n}\r\n\r\nexport class Card extends React.Component<CardProps> {\r\n\r\n    public render() {\r\n        const { card, action } = this.props;\r\n        const { name, cost, id, classes } = card.champ;\r\n\r\n        const style = {\r\n            backgroundImage: `url('img/champ-square/${id}.png')`\r\n        };\r\n\r\n        return (\r\n            <div className={`champ-card champ-cost-${cost}`} onClick={() => action(card)}>\r\n                <div className=\"decoration\"></div>\r\n                <div className={`hero champ-bg-${id}`} style={style}>\r\n                    {classes.map(x => <div className=\"champ-class\" key={x}>{x}</div>)}\r\n                </div>\r\n                <div className={`banner banner-cost-${cost}`}>\r\n                    <div className=\"name\">{name}</div>\r\n                    <div className=\"cost\">\r\n                        <span>\r\n                            <Coin />\r\n                            {cost}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\n\r\nexport class BlankCard extends React.Component {\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"champ-card blank\">\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Card } from './card';\r\nimport { BlankCard } from './blank-card';\r\nimport { observer } from 'mobx-react';\r\nimport { ChampCard } from '../../stores/types';\r\n\r\n\r\ninterface HandProps {\r\n    hand: ChampCard[];\r\n    action: (card: ChampCard) => void;\r\n}\r\n\r\n\r\n@observer\r\n export class Hand extends React.Component<HandProps> {\r\n\r\n    public render() {\r\n        const { hand, action } = this.props;\r\n\r\n        return (\r\n            <div className=\"hand\">\r\n                {hand.map( (card, index) => Boolean(card) ? \r\n                    <Card card={card} key={card.guid} action={action}/> :\r\n                    <BlankCard key={index + '-blank'} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { Coin } from '../shared/coin';\r\nimport { ChampCard } from '../../stores/types';\r\nimport { Hand } from './hand';\r\nimport { observer } from 'mobx-react';\r\n\r\ninterface DraftMainProps {\r\n    draft: DraftStore;\r\n    hideAboveBar: boolean;\r\n}\r\n\r\n@observer\r\nexport class DraftMain extends React.Component<DraftMainProps> {\r\n    \r\n    public render() {\r\n\r\n        const { draft, hideAboveBar } = this.props;\r\n        const { currentHand, gold} = draft;\r\n\r\n        return (\r\n            <div className=\"draft-main draft-area\">\r\n                {!hideAboveBar && <div className=\"draft-gold-bar above-bar\">\r\n                    <div className=\"draft-gold\">\r\n                        <Coin/>{gold}\r\n                    </div>\r\n                </div>}\r\n                <Hand hand={currentHand} action={x => this.buyCard(x)} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private buyCard(card: ChampCard) {\r\n        console.log(\"Attempting to buy champ\", card.champ.name);\r\n        this.props.draft.buyCard(card);\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { Coin } from '../shared/coin';\r\nimport { observer } from 'mobx-react';\r\n\r\ninterface DraftSellProps {\r\n    draft: DraftStore;\r\n}\r\n\r\n@observer\r\nexport class DraftSell extends React.Component<DraftSellProps> {\r\n    \r\n    public render() {\r\n\r\n        const { draft } = this.props;\r\n        const { selectedUnit } = draft;\r\n        if(selectedUnit === undefined || !selectedUnit.unit) { return null; }\r\n\r\n        const { name } = selectedUnit.unit.champ;\r\n        const cost = draft.getUnitSalePrice(selectedUnit.unit);\r\n\r\n        return (\r\n            <div className=\"draft-sell draft-area\" onClick={() => draft.sellSelectedUnit()}>\r\n                <i className=\"trash\"></i>\r\n                <span>Sell {name} for <Coin /> {cost} </span>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport './draft.scss';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { inject } from 'mobx-react';\r\nimport { observer } from 'mobx-react';\r\nimport { DraftSidebar } from './sidebar/draft-sidebar';\r\nimport { DraftMain } from './draft-main';\r\nimport { DraftSell } from './draft-sell';\r\n\r\ninterface DraftProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Draft extends React.Component<DraftProps> {\r\n    \r\n    public render() {\r\n        const { draft } = this.props;\r\n\r\n        const showSell = draft.selectedUnit !== undefined;\r\n\r\n        return (\r\n            <section className=\"draft\">\r\n                <DraftSidebar draft={draft} hideAboveBar={showSell} />\r\n                <DraftMain draft={draft} hideAboveBar={showSell}/>              \r\n                {showSell && <DraftSell draft={draft} />}\r\n            </section>            \r\n        );\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { DraftStore } from '../../stores/draft-store';\r\n\r\nimport './simulation.scss';\r\n\r\ninterface SimulationProps {\r\n    draft?: DraftStore\r\n}\r\n\r\n@inject(\"draft\")\r\n@observer\r\nexport class Simulation extends React.Component<SimulationProps> {\r\n    public render() {\r\n        const { draft } = this.props;\r\n        if (!draft) { return null; }\r\n\r\n        return (\r\n            <section className=\"simulation\">\r\n                <div className=\"inner\">\r\n                    <div className=\"round-section\">\r\n                        <span>Current Round: {draft.roundCount}</span>\r\n                        <button onClick={() => draft.nextRound()}>Next Round</button>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './main-page.scss';\r\n\r\nimport { Board } from './board/board';\r\nimport { Bench } from './bench/bench';\r\nimport { Draft } from './draft/draft';\r\n\r\nimport { DraftStore } from '../stores/draft-store';\r\nimport { observable } from 'mobx';\r\n\r\nimport * as ChampionsData from '../data/champions.json';\r\nimport { Provider } from 'mobx-react';\r\nimport { Simulation } from './simulation/simulation';\r\nexport class MainPage extends React.Component {\r\n\r\n    @observable\r\n    draftStore: DraftStore = null;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.draftStore = new DraftStore();\r\n\r\n        this.draftStore.initializePool();\r\n        this.draftStore.drawHand();\r\n        console.log(this.draftStore);\r\n\r\n        window[\"champions\"] = ChampionsData;\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <section className=\"main-page\">\r\n                <Provider draft={this.draftStore} >\r\n                    <>\r\n                        <div className=\"split\">\r\n                            <div className=\"split-section main\">\r\n                                <Board />\r\n                                <Bench />\r\n                            </div>\r\n                            <div className=\"split-section aside\">\r\n                                <Simulation />\r\n                            </div>\r\n                        </div>\r\n                        <Draft />\r\n                    </>\r\n                </Provider>\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './app.scss';\r\nimport { MainPage } from './components/main-page';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"theory-draft app\">\r\n      <main>\r\n        <MainPage />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}