{"version":3,"sources":["components/board/cell.tsx","components/board/board.tsx","components/champion/champion.tsx","components/bench/bench-slot.tsx","components/bench/bench.tsx","stores/draft-store.ts","components/hand/card.tsx","components/hand/blank-card.tsx","components/hand/hand.tsx","components/hand/draft.tsx","components/main-page.tsx","App.js","serviceWorker.js","index.js"],"names":["Cell","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","x","y","unit","react","className","JSON","stringify","React","Board","_this","call","renderRow","bind","assertThisInitialized","fullBoard","WIDTH","HEIGHT","push","findCellData","getCoords","rows","getRow","map","i","start","end","slice","cells","row","isOdd","c","cell_Cell","assign","index","cellData","_Board$getCoords","find","datum","Math","floor","Champion","champ","stars","getTierString","name","tier","BenchSlot","Boolean","champion_Champion","Bench","inject","_dec","_class","observer","benchedUnits","draft","bench_slot_BenchSlot","random","DraftStore","_temp","_class2","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","pool","currentHand","nextLevelXp","getXpForLevelUp","level","toConsumableArray","Array","BENCH_SIZE","fill","boardUnits","gold","REFRESH_COST","console","log","forEach","card","drawHand","BUY_XP_COST","addXP","amount","xp","length","drawCard","concat","odds","levels","tierOdds","roll","cost","getCost","cardSet","filter","splice","_this2","champions","flatMap","poolSize","getInitialPoolSizeForChamp","id","objectSpread","firstEmpty","findIndex","currentLevel","tiers","tier1","tier2","tier3","tier4","tier5","total","draft_store_class","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","Card","classes","style","backgroundImage","onClick","src","alt","BlankCard","Hand","hand_class","hand","card_Card","blank_card_BlankCard","Draft","draft_dec","draft_class","refreshHand","buyXP","hand_Hand","buyUnit","buyCard","MainPage","main_page_class","main_page_descriptor","draftStore","initializePool","window","ChampionsData","mobx_react_module","board_Board","bench_Bench","draft_Draft","App","react_default","a","createElement","main_page_MainPage","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c350a62d.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface CellProps {\n    x: number;\n    y: number;\n    unit?: any;\n}\n\nexport class Cell extends React.Component<CellProps> {\n    public render() {\n        const { x, y, unit } = this.props;\n        \n        return (\n            <div className=\"cell\">\n                <div className=\"contents\">\n                    {x}, {y}, {unit && JSON.stringify(unit, null, 2)}\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { CellOccupancy } from './cell-occupancy';\nimport { Cell } from './cell';\ninterface BoardProps {\n    cellData: CellOccupancy[];\n}\n\nexport class Board extends React.Component<BoardProps> {\n    public static WIDTH = 7;\n    public static HEIGHT = 3;\n\n    public constructor(props) {\n        super(props);\n        this.renderRow = this.renderRow.bind(this);\n    }\n\n    public render() {\n\n        let fullBoard = [];\n        for (let x = 0; x < Board.WIDTH * Board.HEIGHT; ++x) {\n            fullBoard.push(this.findCellData(x) || Board.getCoords(x));\n        }\n\n        let rows = [];\n        for (let x = 1; x <= Board.HEIGHT; ++x) {\n            rows.push(this.getRow(fullBoard, x));\n        }\n\n        return (\n            <div className=\"board\">\n                {rows.map(this.renderRow)}                \n            </div>\n        );\n    }\n\n    private getRow(fullBoard, i) {\n        const start = Board.WIDTH * (i-1);\n        const end = Board.WIDTH * i;\n\n        return fullBoard.slice(start, end);\n    }\n\n\n    private renderRow(cells, row) {\n        const isOdd = row%2 === 1; \n        return (\n            <div className=\"board__row\" key={row}>\n                {isOdd && <div className=\"board-spacer spacer--left\"></div>}\n                {cells.map(c=>\n                    <Cell key={c.x + ',' + c.y} {...c} />\n                )}\n                {!isOdd && <div className=\"board-spacer spacer--right\"></div>}\n            </div>\n        );\n    }\n\n    private findCellData(index) {\n        const { cellData } = this.props;\n        const {x, y} = Board.getCoords(index);\n\n        return cellData.find(datum => datum.x === x && datum.y === y) || null;\n    }\n\n    public static getIndex(x, y) {\n        return y * Board.WIDTH + x;\n    }\n\n    public static getCoords(index) {\n        return {\n            x: index % Board.WIDTH,\n            y: Math.floor(index / Board.WIDTH)\n        };\n    }\n}","import * as React from 'react';\nimport { Unit } from '../../stores/unit';\n\ninterface ChampionProps {\n    unit: Unit;\n}\n\nexport class Champion extends React.Component<ChampionProps> {\n\n    public render() {\n        const { unit } = this.props;\n        const { champ } = unit;\n\n        const stars = this.getTierString(unit);\n\n        return (\n            <div className=\"champion\">\n                <div className=\"champion-name\">{champ.name}</div>\n                <div className=\"champion-tier\">{stars}</div>\n            </div>\n        );\n    }\n\n    private getTierString(unit: Unit): string {\n        switch(unit.tier) {\n            case 1: return '*';\n            case 2: return '**';\n            case 3: return '***';\n        }\n    }\n}","import * as React from 'react';\nimport { Unit } from '../../stores/unit';\nimport { Champion } from '../champion/champion';\n\ninterface BenchSlotProps {\n    unit?: Unit;\n}\n\nexport class BenchSlot extends React.Component<BenchSlotProps> {\n    public render() {\n        const { unit } = this.props;\n\n        return (\n            <div className=\"bench-slot\">\n                {Boolean(unit) && <Champion unit={unit} />}\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { BenchSlot } from './bench-slot';\nimport './bench.css';\nimport { inject, observer } from 'mobx-react';\nimport { DraftStore } from '../../stores/draft-store';\ninterface BenchProps {\n    draft?: DraftStore;\n}\n\n@inject('draft')\n@observer\nexport class Bench extends React.Component<BenchProps> {\n    public render() {\n        const { draft } = this.props;\n        const { benchedUnits } = draft;\n\n        return (\n            <div className=\"bench\">\n                {benchedUnits.map(unit => <BenchSlot unit={unit} key={Math.random()}/>)}\n            </div>\n        );\n    }\n}","import { observable, action } from 'mobx';\n\nimport * as tiers from '../data/tiers.json';\nimport * as levels from '../data/levels.json';\nimport * as champions from '../data/champions.json';\nimport { Unit } from './unit.js';\nimport { ChampData } from './champ-data';\n\nexport interface BoardUnit {\n    x: number;\n    y: number;\n    unit: Unit;\n};\n\nexport class DraftStore {\n\n    public static REFRESH_COST = 2;\n    public static BUY_XP_COST = 4;\n    public static BENCH_SIZE = 9;\n\n    @observable\n    pool: ChampData[];\n\n    @observable\n    currentHand: (ChampData | null)[];\n\n    @observable\n    benchedUnits: (Unit | null)[] = [];\n\n    @observable\n    boardUnits: (BoardUnit | null)[] = [];\n\n    @observable\n    xp: number = 0;\n\n    @observable\n    nextLevelXp: number = 2;\n\n    @observable\n    level: number = 4;\n\n    @observable\n    gold: number = 30;\n\n    constructor() {\n        this.pool = [];\n        this.currentHand = [];\n        this.nextLevelXp = this.getXpForLevelUp(this.level);\n        this.benchedUnits = [...Array(DraftStore.BENCH_SIZE)].fill(null);\n        this.boardUnits = [];\n    }\n\n    @action\n    public refreshHand() {\n        if (this.gold < DraftStore.REFRESH_COST) {\n            console.log(\"You cannot afford to refresh\");\n            return;\n        }\n\n        //Return hand to pool\n        this.currentHand.forEach(card => {\n            if(card) {\n                this.pool.push(card);\n            }\n        });\n\n        this.currentHand = [];\n\n        this.drawHand();\n        this.gold -= DraftStore.REFRESH_COST;\n    }\n\n    @action\n    public buyXP() {\n        if(this.gold < DraftStore.BUY_XP_COST) {\n            console.log(\"You cannot afford to buy XP\");\n            return;\n        }\n        this.addXP(4);\n        this.gold -= DraftStore.BUY_XP_COST;\n    }\n\n    @action\n    public addXP(amount: number) {\n        this.xp += amount;\n        //Level Up\n        if(this.xp >= this.nextLevelXp) {\n            this.xp = this.xp - this.nextLevelXp;\n            this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\n            this.level += 1;\n        }\n    }\n\n    @action\n    public drawHand() {\n        while(this.currentHand.length < 5) {\n            this.drawCard();\n        }\n    }\n\n    @action\n    public drawCard() {\n        const key = `level${this.level}`;\n        \n        const odds = (levels.levels as any)[key].tierOdds;\n        const roll = Math.random();\n\n        const cost = this.getCost(roll, odds);\n\n        const cardSet = this.pool.filter(x => x.cost === cost);\n        const index = Math.floor(Math.random() * cardSet.length);\n        const card = cardSet[index];\n\n        this.currentHand.push(card);\n        this.pool.splice(index, 1);\n        console.log(`Your new card: ${card.name}`);\n    }\n\n    @action\n    public initializePool() {\n        this.pool = champions.champions.flatMap(champ => {\n            const poolSize = this.getInitialPoolSizeForChamp(champ.id);\n            return [...Array(poolSize)].fill({\n                ...champ\n            });\n        });\n    }\n\n    @action\n    public buyCard(champ: ChampData) {\n        console.log(\"DraftStore::buyCard\", champ);\n        if(this.gold < champ.cost) {\n            console.log(`You cannot afford to buy ${champ.name} for ${champ.cost} coins`);\n        }\n\n        //Add unit to bench\n        const firstEmpty = this.benchedUnits.findIndex(x => x === null);\n        this.benchedUnits[firstEmpty] = ({\n            tier: 1,\n            champ\n        });\n\n        //Remove card\n        const index = this.currentHand.findIndex(card => card != null && card.id === champ.id);\n        this.currentHand[index] = null;\n\n        //Merge Units\n        //TODO\n\n    }\n\n    private getXpForLevelUp(currentLevel: number) {\n        return (levels.levels as any)[`level${currentLevel}`].xp;\n    }\n\n    private getInitialPoolSizeForChamp(id: string): number {\n        const champ = champions.champions.find(x => x.id === id);\n        if(champ == null) { return 0; }\n\n        switch(champ.cost) {\n            case 1: return tiers.unitsPerTier.tier1;\n            case 2: return tiers.unitsPerTier.tier2;\n            case 3: return tiers.unitsPerTier.tier3;\n            case 4: return tiers.unitsPerTier.tier4;\n            case 5: return tiers.unitsPerTier.tier5;\n            default: return 0;\n        }\n    }\n\n    private getCost(roll: number, odds: number[]) {\n        let total = 0;\n        let index = 0;\n       console.log(`You rolled: ${roll}`, odds);\n        while(total < roll) {\n            total += odds[index];\n            ++index;\n            console.log(`Total odds for cost ${index} unit: ${total}`);\n        }\n        console.log(`You're getting as ${index} cost unit`);\n\n        return index;\n    }\n\n    private getUnitsByCost(cost: number) {\n        return champions.champions.filter(champ => champ.cost === cost);\n    }\n\n}","import * as React from 'react';\n\nimport './card.scss';\nimport { ChampData } from '../../stores/draft-store';\n\ninterface CardProps {\n    champ: ChampData;\n    action: (ChampData) => void;\n}\n\nexport class Card extends React.Component<CardProps> {\n\n    public render() {\n        const { champ, action } = this.props;\n        const { name, cost, id, classes } = champ;\n\n        const style = {\n            backgroundImage: `url('img/champ-square/${id}.png')`\n        };\n\n        return (\n            <div className={`champ-card champ-cost-${cost}`} onClick={() => action(champ)}>\n                <div className=\"decoration\"></div>\n                <div className={`hero champ-bg-${id}`} style={style}>\n                    {classes.map(x => <div className=\"champ-class\" key={x}>{x}</div>)}\n                </div>\n                <div className={`banner banner-cost-${cost}`}>\n                    <div className=\"name\">{name}</div>\n                    <div className=\"cost\">\n                        <span>\n                            <img src=\"img/coin.svg\" alt=\"cost\"></img>\n                            {cost}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react';\n\nimport './card.scss';\n\nexport class BlankCard extends React.Component {\n\n    public render() {\n        return (\n            <div className=\"champ-card blank\">\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { Card } from './card';\nimport { BlankCard } from './blank-card';\nimport { observer } from 'mobx-react';\nimport { ChampData } from '../../stores/champ-data';\n\n\ninterface HandProps {\n    hand: ChampData[];\n    action: (ChampData) => void;\n}\n\n\n@observer\n export class Hand extends React.Component<HandProps> {\n\n    public render() {\n        const { hand, action } = this.props;\n\n        return (\n            <div className=\"hand\">\n                {hand.map( (champ, index) => Boolean(champ) ? \n                    <Card champ={champ} key={Math.random()} action={action}/> :\n                    <BlankCard key={index + '-blank'} />\n                )}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Hand } from './hand';\nimport './draft.css';\nimport { DraftStore, ChampData } from '../../stores/draft-store';\nimport { inject } from 'mobx-react';\nimport { observer } from 'mobx-react';\n\ninterface DraftProps {\n    draft?: DraftStore;\n}\n\n@inject('draft')\n@observer\nexport class Draft extends React.Component<DraftProps> {\n    public render() {\n        const { draft } = this.props;\n        const { currentHand, gold, xp, nextLevelXp, level } = draft;\n\n        return (\n            <div className=\"draft\">\n                <div className=\"draft-sidebar draft-area\">\n                    <div className=\"draft-lock above-bar\">\n                        Lock\n                    </div>\n                    <div className=\"draft-sidebar-items\">\n                        <div className=\"sidebar-item refresh\">\n                            <button onClick={() => draft.refreshHand()}>Refresh</button>\n                        </div>\n                        <div className=\"sidebar-item xp\">\n                            <button className=\"xp-panel\" onClick={() => draft.buyXP()}>\n                                <div className=\"label\">Buy XP</div>\n                                <div className=\"sub-label\">() 4</div>\n                                <div className=\"xp-progress\">\n                                    {/* TODO: XP stats */}\n                                    <div className=\"xp-label\">{xp}/{nextLevelXp}</div>\n                                    <div className=\"xp-progress-bar\">||....</div>\n                                    <div className=\"level\">{level}</div>\n                                </div>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"draft-main draft-area\">\n                    <div className=\"draft-gold-bar above-bar\">\n                        <div className=\"draft-gold\">\n                            {gold}\n                        </div>\n                    </div>\n                    <Hand hand={currentHand} action={x => this.buyUnit(x)} />\n                </div>\n            </div>            \n        );\n    }\n\n    private buyUnit(champ: ChampData) {\n        console.log(\"Attempting to buy champ\", champ.name);\n        this.props.draft.buyCard(champ);\n    }\n}","import * as React from 'react';\nimport { Board } from './board/board';\nimport { Bench } from './bench/bench';\nimport { Draft } from './hand/draft';\n\nimport { DraftStore } from '../stores/draft-store';\nimport { observable } from 'mobx';\n\nimport * as ChampionsData from '../data/champions.json';\nimport { Provider } from 'mobx-react';\nexport class MainPage extends React.Component {\n\n    @observable\n    draftStore: DraftStore = null;\n\n    constructor(props) {\n        super(props);\n        this.draftStore = new DraftStore();\n\n        this.draftStore.initializePool();\n        this.draftStore.drawHand();\n        console.log(this.draftStore);\n\n        window[\"champions\"] = ChampionsData;\n\n    }\n\n    public render() {\n\n        const units = [...Array(Bench.BENCH_SIZE)].map(x => null);\n\n        return (\n            <section className=\"main-page\">\n                <Provider draft={this.draftStore} >\n                    <>\n                        <Board cellData={[]}/>\n                        <Bench />\n                        <Draft />\n                    </>\n                </Provider>\n            </section>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { MainPage } from './components/main-page';\n\nfunction App() {\n  return (\n    <div className=\"theory-draft app\">\n      <main>\n        <MainPage />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}