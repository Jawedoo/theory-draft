{"version":3,"sources":["components/champion/champion.tsx","components/bench/bench-slot.tsx","components/bench/bench.tsx","components/shared/coin.tsx","components/hand/card.tsx","components/hand/blank-card.tsx","components/hand/hand.tsx","stores/draft-store.ts","components/hand/draft.tsx","components/main-page.tsx","App.js","serviceWorker.js","index.js"],"names":["Champion","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","unit","props","champ","stars","getTierString","style","backgroundImage","concat","id","react","className","name","tier","React","BenchSlot","Boolean","champion_Champion","Bench","inject","_dec","_class","observer","benchedUnits","draft","map","bench_slot_BenchSlot","Math","random","Coin","Card","_this$props","card","action","_card$champ","cost","classes","onClick","x","coin_Coin","BlankCard","Hand","hand_class","hand","index","card_Card","guid","blank_card_BlankCard","DraftStore","_temp","_class2","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","pool","currentHand","nextLevelXp","getXpForLevelUp","level","toConsumableArray","Array","BENCH_SIZE","fill","boardUnits","isHandLocked","gold","goldPerRound","addXP","XP_PER_ROUND","REFRESH_COST","refreshHand","_this","console","log","forEach","push","drawHand","BUY_XP_COST","amount","xp","length","drawCard","odds","levels","tierOdds","roll","getCost","cardSet","filter","floor","splice","_this2","champions","flatMap","poolSize","getInitialPoolSizeForChamp","_","removeExtra","firstEmpty","findIndex","matchingUnits","availableToBuy","mergeUnits","c","_this3","undefined","extraUnits","champCount","reduce","m","val","keys","find","currentLevel","tiers","tier1","tier2","tier3","tier4","tier5","total","draft_store_class","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","getOwnPropertyDescriptor","Draft","draft_dec","draft_class","progressStyle","transform","lockClass","toggleHandLock","buyXP","hand_Hand","buyUnit","buyCard","MainPage","main_page_class","call","main_page_descriptor","assertThisInitialized","draftStore","initializePool","window","ChampionsData","mobx_react_module","nextRound","bench_Bench","draft_Draft","App","react_default","a","createElement","main_page_MainPage","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70298124.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Unit } from '../../stores/types';\r\n\r\ninterface ChampionProps {\r\n    unit: Unit;\r\n}\r\n\r\nexport class Champion extends React.Component<ChampionProps> {\r\n\r\n    public render() {\r\n        const { unit } = this.props;\r\n        const { champ } = unit;\r\n\r\n        const stars = this.getTierString(unit);\r\n\r\n        const style = {\r\n            backgroundImage: `url(img/champ-square/${champ.id}.png)`\r\n        };\r\n\r\n        return (\r\n            <div className=\"champion\" style={style}>\r\n                <div className=\"champion-tier\">{stars}</div>\r\n                <div className=\"champion-name\">{champ.name}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getTierString(unit: Unit): string {\r\n        switch(unit.tier) {\r\n            case 1: return '★';\r\n            case 2: return '★★';\r\n            case 3: return '★★★';\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { Unit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\n\r\ninterface BenchSlotProps {\r\n    unit?: Unit;\r\n}\r\n\r\nexport class BenchSlot extends React.Component<BenchSlotProps> {\r\n    public render() {\r\n        const { unit } = this.props;\r\n\r\n        return (\r\n            <div className=\"bench-slot\">\r\n                {Boolean(unit) && <Champion unit={unit} />}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { BenchSlot } from './bench-slot';\r\nimport './bench.scss';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\ninterface BenchProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Bench extends React.Component<BenchProps> {\r\n    public render() {\r\n        const { draft } = this.props;\r\n        const { benchedUnits } = draft;\r\n\r\n        return (\r\n            <div className=\"bench\">\r\n                {benchedUnits.map(unit => <BenchSlot unit={unit} key={Math.random()}/>)}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport './coin.scss'\r\nexport class Coin extends React.Component{\r\n    public render() {\r\n        return (\r\n            <i className=\"coin\">\r\n                <span className=\"a11y\">Coin</span>\r\n            </i>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\nimport { ChampData, ChampCard } from '../../stores/types';\r\nimport { Coin } from '../shared/coin';\r\n\r\ninterface CardProps {\r\n    card: ChampCard;\r\n    action: (ChampData) => void;\r\n}\r\n\r\nexport class Card extends React.Component<CardProps> {\r\n\r\n    public render() {\r\n        const { card, action } = this.props;\r\n        const { name, cost, id, classes } = card.champ;\r\n\r\n        const style = {\r\n            backgroundImage: `url('img/champ-square/${id}.png')`\r\n        };\r\n\r\n        return (\r\n            <div className={`champ-card champ-cost-${cost}`} onClick={() => action(card)}>\r\n                <div className=\"decoration\"></div>\r\n                <div className={`hero champ-bg-${id}`} style={style}>\r\n                    {classes.map(x => <div className=\"champ-class\" key={x}>{x}</div>)}\r\n                </div>\r\n                <div className={`banner banner-cost-${cost}`}>\r\n                    <div className=\"name\">{name}</div>\r\n                    <div className=\"cost\">\r\n                        <span>\r\n                            <Coin />\r\n                            {cost}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\n\r\nexport class BlankCard extends React.Component {\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"champ-card blank\">\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Card } from './card';\r\nimport { BlankCard } from './blank-card';\r\nimport { observer } from 'mobx-react';\r\nimport { ChampCard } from '../../stores/types';\r\n\r\n\r\ninterface HandProps {\r\n    hand: ChampCard[];\r\n    action: (ChampCard) => void;\r\n}\r\n\r\n\r\n@observer\r\n export class Hand extends React.Component<HandProps> {\r\n\r\n    public render() {\r\n        const { hand, action } = this.props;\r\n\r\n        return (\r\n            <div className=\"hand\">\r\n                {hand.map( (card, index) => Boolean(card) ? \r\n                    <Card card={card} key={card.guid} action={action}/> :\r\n                    <BlankCard key={index + '-blank'} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import { observable, action } from 'mobx';\r\n\r\nimport * as tiers from '../data/tiers.json';\r\nimport * as levels from '../data/levels.json';\r\nimport * as champions from '../data/champions.json';\r\nimport { Unit, ChampData, ChampCard } from './types';\r\n\r\nexport interface BoardUnit {\r\n    x: number;\r\n    y: number;\r\n    unit: Unit;\r\n};\r\n\r\nexport class DraftStore {\r\n\r\n    public static REFRESH_COST = 2;\r\n    public static BUY_XP_COST = 4;\r\n    public static BENCH_SIZE = 9;\r\n    public static XP_PER_ROUND = 2;\r\n\r\n    @observable\r\n    pool: ChampCard[];\r\n\r\n    @observable\r\n    currentHand: (ChampCard | null)[];\r\n\r\n    @observable\r\n    benchedUnits: (Unit | null)[] = [];\r\n\r\n    @observable\r\n    boardUnits: (BoardUnit | null)[] = [];\r\n\r\n    @observable\r\n    xp: number = 0;\r\n\r\n    @observable\r\n    nextLevelXp: number = 2;\r\n\r\n    @observable\r\n    level: number = 1;\r\n\r\n    @observable\r\n    gold: number = 3;\r\n\r\n    @observable\r\n    isHandLocked: boolean = false;\r\n\r\n    @observable\r\n    goldPerRound: number = 8;\r\n\r\n    constructor() {\r\n        this.pool = [];\r\n        this.currentHand = [];\r\n        this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n        this.benchedUnits = [...Array(DraftStore.BENCH_SIZE)].fill(null);\r\n        this.boardUnits = [];\r\n    }\r\n\r\n    @action\r\n    public toggleHandLock() {\r\n        this.isHandLocked = !this.isHandLocked;\r\n    }\r\n\r\n    @action\r\n    public nextRound() {\r\n        this.gold += this.goldPerRound\r\n        this.addXP(DraftStore.XP_PER_ROUND);\r\n        if(!this.isHandLocked) {\r\n            this.gold += DraftStore.REFRESH_COST;\r\n            this.refreshHand();    \r\n        }\r\n    }\r\n\r\n    @action\r\n    public refreshHand() {\r\n        if (this.gold < DraftStore.REFRESH_COST) {\r\n            console.log(\"You cannot afford to refresh\");\r\n            return;\r\n        }\r\n\r\n        //Return hand to pool\r\n        this.currentHand.forEach(card => {\r\n            if(card) {\r\n                this.pool.push(card);\r\n            }\r\n        });\r\n\r\n        this.currentHand = [];\r\n\r\n        this.drawHand();\r\n        this.gold -= DraftStore.REFRESH_COST;\r\n    }\r\n\r\n    @action\r\n    public buyXP() {\r\n        if(this.gold < DraftStore.BUY_XP_COST) {\r\n            console.log(\"You cannot afford to buy XP\");\r\n            return;\r\n        }\r\n        this.addXP(4);\r\n        this.gold -= DraftStore.BUY_XP_COST;\r\n    }\r\n\r\n    @action\r\n    public addXP(amount: number) {\r\n        this.xp += amount;\r\n        //Level Up\r\n        if(this.xp >= this.nextLevelXp) {\r\n            this.xp = this.xp - this.nextLevelXp;\r\n            this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n            this.level += 1;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public drawHand() {\r\n        while(this.currentHand.length < 5) {\r\n            this.drawCard();\r\n        }\r\n    }\r\n\r\n    @action\r\n    public drawCard() {\r\n        const key = `level${this.level}`;\r\n        \r\n        const odds = (levels.levels as any)[key].tierOdds;\r\n        const roll = Math.random();\r\n\r\n        const cost = this.getCost(roll, odds);\r\n\r\n        const cardSet = this.pool.filter(x => x.champ.cost === cost);\r\n        const index = Math.floor(Math.random() * cardSet.length);\r\n        const card = cardSet[index];\r\n\r\n        this.currentHand.push(card);\r\n        this.pool.splice(index, 1);\r\n        console.log(`Your new card: ${card.champ.name}`);\r\n    }\r\n\r\n    @action\r\n    public initializePool() {\r\n        this.pool = champions.champions.flatMap(champ => {\r\n            const poolSize = this.getInitialPoolSizeForChamp(champ.id);\r\n            return [...Array(poolSize)].map((_, index) => ({\r\n                champ,\r\n                guid: champ.id + \"_\" + index\r\n            } as ChampCard));            \r\n        });\r\n    }\r\n\r\n    @action\r\n    public buyCard(card: ChampCard) {\r\n\r\n        if(!card || !card.champ) {\r\n            return;\r\n        }\r\n\r\n        const { guid, champ } = card;\r\n        \r\n        console.log(\"DraftStore::buyCard\", champ);\r\n        let cost = champ.cost;\r\n        let removeExtra = false;\r\n\r\n        if(this.gold < champ.cost) {\r\n            console.log(`You cannot afford to buy ${champ.name} for ${champ.cost} coins`);\r\n            return;\r\n        }\r\n\r\n        /* Several cases:\r\n        1. Player has empty space for unit, all good\r\n        2. Player has no empty space, but has 2 units of the same type at tier 1 already, merge to free up space\r\n        3. Player has no empty space, but has 1 unit of the same type at tier 1,\r\n           and the hand has 2 of that same champ\r\n           3a. If they have the gold to buy 2, buy both and merge to free up space\r\n           3b. If they don't have the gold, abort\r\n        */\r\n\r\n\r\n        //Add unit to bench\r\n        const firstEmpty = this.benchedUnits.findIndex(x => x === null);\r\n        //Case 1\r\n        if(firstEmpty >= 0) {\r\n            this.benchedUnits[firstEmpty] = ({\r\n                tier: 1,\r\n                champ\r\n            });\r\n\r\n        } else {\r\n            const matchingUnits = this.benchedUnits\r\n                .filter(unit => unit !== null && unit.tier === 1 && unit.champ.id === champ.id);\r\n\r\n            const availableToBuy = this.currentHand\r\n                .filter(card => card != null && card.champ.id === champ.id) as ChampCard[];\r\n\r\n            //Case 2\r\n            if (matchingUnits.length === 2) {\r\n                this.mergeUnits(1, availableToBuy); //Upgrade\r\n            } else if (matchingUnits.length === 1 && availableToBuy.length >= 2) {\r\n                if(this.gold >= champ.cost * 2) { //3a\r\n                    cost *= 2; //Increase Cost\r\n                    this.mergeUnits(1, availableToBuy); //Upgrade\r\n                    removeExtra = true; //Flag that theres a 2nd card to remove\r\n                } else { //3b\r\n                    console.log(\"You don't space and can't afford to buy 2 of unit: \", champ.name);\r\n                    return;\r\n                }\r\n            } else {\r\n                \r\n                console.log(\"You don't space to buy this unit: \", champ.name);\r\n                return;\r\n            }\r\n        }\r\n\r\n        //Remove card\r\n        const index = this.currentHand.findIndex(c => c != null && c.guid === guid);\r\n        this.currentHand[index] = null;\r\n\r\n        //Remove 2nd card if needed\r\n        if(removeExtra) {\r\n            const index = this.currentHand.findIndex(card => card != null && card.champ.id === champ.id);\r\n            this.currentHand[index] = null;    \r\n        }\r\n\r\n        //Merge Units\r\n        this.mergeUnits(1);\r\n\r\n        //Pay money\r\n        this.gold -= cost;\r\n    }\r\n\r\n    @action\r\n    private mergeUnits(tier: number = 1, extraCards: ChampCard[] = []) {\r\n        const extraUnits: Unit[] = extraCards.map(card => ({champ: card.champ, tier: 1}));\r\n        const totalUnits: (Unit|null)[] = [...this.benchedUnits, ...extraUnits];\r\n\r\n        const onlyCurrentTier = totalUnits.filter(c => c!== null && c.tier === tier) as Unit[];\r\n        \r\n        //Remap to count champions\r\n        const champCount = onlyCurrentTier.reduce((m: object, unit: Unit) => {\r\n            const id = unit.champ.id;\r\n            const val = (m as any)[id];\r\n            if (!val) {\r\n                (m as any)[id] = 1;\r\n            } else {\r\n                (m as any)[id] = val+1;\r\n            }\r\n            return m;\r\n        }, {});\r\n\r\n        //Find champs to merge\r\n        const idsToMerge = Object.keys(champCount).filter(x => (champCount as any)[x] >= 3);\r\n\r\n        //Merge and upgrade the champs\r\n        idsToMerge.forEach(id => {\r\n            const champ = (champions.champions as ChampData[]).find(c => c.id === id);\r\n            \r\n            let index = -1;\r\n            //Remove all of that unit\r\n            while(-1 !== (index = this.benchedUnits.findIndex(unit => \r\n                unit !== null &&\r\n                unit.champ.id === id &&\r\n                unit.tier === tier\r\n            ))) {\r\n                this.benchedUnits[index] = null;\r\n            }\r\n\r\n            //Add upgraded unit\r\n            const firstEmpty = this.benchedUnits.findIndex(x => x === null);\r\n            this.benchedUnits[firstEmpty] = {\r\n                tier: tier + 1,\r\n                champ\r\n            } as Unit;\r\n        });\r\n\r\n        if (tier === 1) {\r\n            this.mergeUnits(2);\r\n        }\r\n    }\r\n\r\n    private getXpForLevelUp(currentLevel: number) {\r\n        return (levels.levels as any)[`level${currentLevel}`].xp;\r\n    }\r\n\r\n    private getInitialPoolSizeForChamp(id: string): number {\r\n        const champ = champions.champions.find(x => x.id === id);\r\n        if(champ == null) { return 0; }\r\n\r\n        switch(champ.cost) {\r\n            case 1: return tiers.unitsPerTier.tier1;\r\n            case 2: return tiers.unitsPerTier.tier2;\r\n            case 3: return tiers.unitsPerTier.tier3;\r\n            case 4: return tiers.unitsPerTier.tier4;\r\n            case 5: return tiers.unitsPerTier.tier5;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    private getCost(roll: number, odds: number[]) {\r\n        let total = 0;\r\n        let index = 0;\r\n       console.log(`You rolled: ${roll}`, odds);\r\n        while(total < roll) {\r\n            total += odds[index];\r\n            ++index;\r\n            console.log(`Total odds for cost ${index} unit: ${total}`);\r\n        }\r\n        console.log(`You're getting as ${index} cost unit`);\r\n\r\n        return index;\r\n    }\r\n\r\n    private getUnitsByCost(cost: number) {\r\n        return champions.champions.filter(champ => champ.cost === cost);\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport './draft.scss';\r\nimport { Hand } from './hand';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { inject } from 'mobx-react';\r\nimport { observer } from 'mobx-react';\r\nimport { Coin } from '../shared/coin';\r\nimport { ChampData, ChampCard } from '../../stores/types';\r\n\r\ninterface DraftProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Draft extends React.Component<DraftProps> {\r\n    public render() {\r\n        const { draft } = this.props;\r\n        const { currentHand, gold, xp, nextLevelXp, level } = draft;\r\n        const progress = xp/nextLevelXp * 100;\r\n        const progressStyle = {\r\n            transform: `translateX(${-100 + progress}%)`\r\n        }\r\n\r\n        const lockClass = draft.isHandLocked ? 'closed' : 'open';\r\n\r\n        return (\r\n            <div className=\"draft\">\r\n                <div className=\"draft-sidebar draft-area\">\r\n                    <div className=\"draft-lock above-bar\" onClick={() => draft.toggleHandLock()}>\r\n                        <div className={`lock ${lockClass}`}></div>\r\n                    </div>\r\n                    <div className=\"draft-sidebar-items\">\r\n                        <div className=\"sidebar-item refresh clickable\" onClick={() => draft.refreshHand()}>\r\n                            <div className=\"refresh-panel\">\r\n                                <div className=\"content\">\r\n                                    <div>Refresh</div>\r\n                                    <div><Coin /> {DraftStore.REFRESH_COST}</div>\r\n                                </div>\r\n                                <div className=\"icon\" style={{backgroundImage: \"url(img/refresh.png)\"}}>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"sidebar-item xp clickable\" onClick={() => draft.buyXP()}>\r\n                            <div className=\"xp-panel\">\r\n                                <div className=\"details\">\r\n                                    <div className=\"content\">\r\n                                        <div className=\"label\">Buy XP</div>\r\n                                        <div className=\"sub-label\">\r\n                                            <Coin />{DraftStore.BUY_XP_COST}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"icon\" style={{backgroundImage: \"url(img/level-up.png)\"}}></div>\r\n                                </div>\r\n                                <div className=\"xp-progress\">\r\n                                    <div className=\"xp-label\">{xp}/{nextLevelXp}</div>\r\n                                    <div className=\"xp-progress-bar\">\r\n                                        <div className=\"bar\">\r\n                                            <div className=\"fill\" style={progressStyle}></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"level\">{level}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"draft-main draft-area\">\r\n                    <div className=\"draft-gold-bar above-bar\">\r\n                        <div className=\"draft-gold\">\r\n                            <Coin/>{gold}\r\n                        </div>\r\n                    </div>\r\n                    <Hand hand={currentHand} action={x => this.buyUnit(x)} />\r\n                </div>\r\n            </div>            \r\n        );\r\n    }\r\n\r\n    private buyUnit(card: ChampCard) {\r\n        console.log(\"Attempting to buy champ\", card.champ.name);\r\n        this.props.draft.buyCard(card);\r\n    }\r\n}","import * as React from 'react';\r\n// import { Board } from './board/board';\r\nimport { Bench } from './bench/bench';\r\nimport { Draft } from './hand/draft';\r\n\r\nimport { DraftStore } from '../stores/draft-store';\r\nimport { observable } from 'mobx';\r\n\r\nimport * as ChampionsData from '../data/champions.json';\r\nimport { Provider } from 'mobx-react';\r\nexport class MainPage extends React.Component {\r\n\r\n    @observable\r\n    draftStore: DraftStore = null;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.draftStore = new DraftStore();\r\n\r\n        this.draftStore.initializePool();\r\n        this.draftStore.drawHand();\r\n        console.log(this.draftStore);\r\n\r\n        window[\"champions\"] = ChampionsData;\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <section className=\"main-page\">\r\n                <Provider draft={this.draftStore} >\r\n                    <>\r\n                        <button onClick={() => this.draftStore.nextRound()}>Next Round</button>\r\n                        {/* <Board cellData={[]}/> */}\r\n                        <Bench />\r\n                        <Draft />\r\n                    </>\r\n                </Provider>\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { MainPage } from './components/main-page';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"theory-draft app\">\r\n      <main>\r\n        <MainPage />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}