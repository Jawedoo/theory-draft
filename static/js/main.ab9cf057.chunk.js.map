{"version":3,"sources":["logo.svg","components/board/cell.tsx","components/board/board.tsx","components/champion/champion.tsx","components/bench/bench-slot.tsx","components/bench/bench.tsx","components/hand/card.tsx","components/hand/hand.tsx","components/hand/draft.tsx","stores/draft-store.ts","components/main-page.tsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Cell","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","x","y","unit","react","className","JSON","stringify","React","Board","_this","call","renderRow","bind","assertThisInitialized","fullBoard","WIDTH","HEIGHT","push","findCellData","getCoords","rows","getRow","map","i","start","end","slice","cells","row","isOdd","c","cell_Cell","assign","index","cellData","_Board$getCoords","find","datum","Math","floor","Champion","stars","getTierString","name","cost","tier","BenchSlot","Boolean","champion_Champion","Bench","units","bench_slot_BenchSlot","BENCH_SIZE","Card","Hand","hand","champ","card_Card","id","Draft","currentHand","currentGold","hand_Hand","DraftStore","_class","initializerDefineProperty","_descriptor","_descriptor2","pool","champions","flatMap","poolSize","getInitialPoolSizeForChamp","toConsumableArray","Array","fill","objectSpread","tiers","tier1","tier2","tier3","tier4","tier5","length","drawCard","odds","levels","tierOdds","roll","random","getCost","cardSet","filter","card","splice","console","log","concat","total","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","MainPage","main_page_class","main_page_descriptor","draftStore","initializePool","drawHand","board_Board","bench_Bench","draft_Draft","App","react_default","a","createElement","main_page_MainPage","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab9cf057.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from 'react';\r\n\r\ninterface CellProps {\r\n    x: number;\r\n    y: number;\r\n    unit?: any;\r\n}\r\n\r\nexport class Cell extends React.Component<CellProps> {\r\n    public render() {\r\n        const { x, y, unit } = this.props;\r\n        \r\n        return (\r\n            <div className=\"cell\">\r\n                <div className=\"contents\">\r\n                    {x}, {y}, {unit && JSON.stringify(unit, null, 2)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { CellOccupancy } from './cell-occupancy';\r\nimport { Cell } from './cell';\r\ninterface BoardProps {\r\n    cellData: CellOccupancy[];\r\n}\r\n\r\nexport class Board extends React.Component<BoardProps> {\r\n    public static WIDTH = 7;\r\n    public static HEIGHT = 3;\r\n\r\n    public constructor(props) {\r\n        super(props);\r\n        this.renderRow = this.renderRow.bind(this);\r\n    }\r\n\r\n    public render() {\r\n\r\n        let fullBoard = [];\r\n        for (let x = 0; x < Board.WIDTH * Board.HEIGHT; ++x) {\r\n            fullBoard.push(this.findCellData(x) || Board.getCoords(x));\r\n        }\r\n\r\n        let rows = [];\r\n        for (let x = 1; x <= Board.HEIGHT; ++x) {\r\n            rows.push(this.getRow(fullBoard, x));\r\n        }\r\n\r\n        return (\r\n            <div className=\"board\">\r\n                {rows.map(this.renderRow)}                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getRow(fullBoard, i) {\r\n        const start = Board.WIDTH * (i-1);\r\n        const end = Board.WIDTH * i;\r\n\r\n        return fullBoard.slice(start, end);\r\n    }\r\n\r\n\r\n    private renderRow(cells, row) {\r\n        const isOdd = row%2 === 1; \r\n        return (\r\n            <div className=\"board__row\" key={row}>\r\n                {isOdd && <div className=\"board-spacer spacer--left\"></div>}\r\n                {cells.map(c=>\r\n                    <Cell key={c.x + ',' + c.y} {...c} />\r\n                )}\r\n                {!isOdd && <div className=\"board-spacer spacer--right\"></div>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private findCellData(index) {\r\n        const { cellData } = this.props;\r\n        const {x, y} = Board.getCoords(index);\r\n\r\n        return cellData.find(datum => datum.x === x && datum.y === y) || null;\r\n    }\r\n\r\n    public static getIndex(x, y) {\r\n        return y * Board.WIDTH + x;\r\n    }\r\n\r\n    public static getCoords(index) {\r\n        return {\r\n            x: index % Board.WIDTH,\r\n            y: Math.floor(index / Board.WIDTH)\r\n        };\r\n    }\r\n}","import * as React from 'react';\r\nimport { Unit } from '../../stores/unit';\r\n\r\ninterface ChampionProps {\r\n    unit: Unit;\r\n}\r\n\r\nexport class Champion extends React.Component<ChampionProps> {\r\n\r\n    public render() {\r\n        const { unit } = this.props;\r\n\r\n        const stars = this.getTierString(unit);\r\n\r\n        return (\r\n            <div className=\"champion\">\r\n                <div className=\"champion-name\">{unit.name}</div>\r\n                <div className=\"champion-tier\">{stars}</div>\r\n                <div className=\"champion-cost\">{unit.cost}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getTierString(unit: Unit): string {\r\n        switch(unit.tier) {\r\n            case 1: return '*';\r\n            case 2: return '**';\r\n            case 3: return '***';\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { Unit } from '../../stores/unit';\r\nimport { Champion } from '../champion/champion';\r\n\r\ninterface BenchSlotProps {\r\n    unit?: Unit;\r\n}\r\n\r\nexport class BenchSlot extends React.Component<BenchSlotProps> {\r\n    public render() {\r\n        const { unit } = this.props;\r\n\r\n        return (\r\n            <div className=\"bench-slot\">\r\n                {Boolean(unit) && <Champion unit={unit} />}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Unit } from '../../stores/unit';\r\nimport { BenchSlot } from './bench-slot';\r\nimport './bench.css';\r\ninterface BenchProps {\r\n    units: Unit[];\r\n}\r\n\r\nexport class Bench extends React.Component<BenchProps> {\r\n\r\n    public static BENCH_SIZE = 9;\r\n\r\n    public render() {\r\n        const { units } = this.props;\r\n\r\n        return (\r\n            <div className=\"bench\">\r\n                {units.map((unit, index) => <BenchSlot unit={unit} key={index}/>)}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\n\r\ninterface CardProps {\r\n    id: string,\r\n    name: string,\r\n    cost: number,\r\n    classes: string[]\r\n}\r\n\r\nexport class Card extends React.Component<CardProps> {\r\n\r\n    public render() {\r\n        const { name } = this.props;\r\n\r\n        return (\r\n            <div className=\"champ-card\">\r\n                {name}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Card } from './card';\r\nimport { ChampData } from '../../stores/draft-store';\r\n\r\ninterface HandProps {\r\n    hand: ChampData[];\r\n}\r\n\r\nexport class Hand extends React.Component<HandProps> {\r\n\r\n    public render() {\r\n        const { hand } = this.props;\r\n\r\n        return (\r\n            <div className=\"hand\">\r\n                {hand.map( (champ, index) => <Card {...champ} key={index + champ.id}/>)}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { Hand } from './hand';\r\nimport './draft.css';\r\nimport { ChampData } from '../../stores/draft-store';\r\n\r\ninterface DraftProps {\r\n    currentHand: ChampData[];\r\n    currentGold: number;\r\n}\r\n\r\nexport class Draft extends React.Component<DraftProps> {\r\n    public render() {\r\n        const { currentHand, currentGold } = this.props;\r\n\r\n        return (\r\n            <div className=\"draft\">\r\n                <div className=\"draft-sidebar\">\r\n                    <div className=\"draft-lock\">\r\n                        Lock\r\n                    </div>\r\n                    <div className=\"draft-sidebar-items\">\r\n                        <div className=\"sidebar-item refresh\">\r\n                            Refresh\r\n                        </div>\r\n                        <div className=\"sidebar-item xp\">\r\n                            <div className=\"xp-panel\">\r\n                                <div className=\"label\">Buy XP</div>\r\n                                <div className=\"sub-label\">() 4</div>\r\n                                <div className=\"xp-progress\">\r\n                                    {/* TODO: XP stats */}\r\n                                    <div className=\"xp-label\">4/16</div>\r\n                                    <div className=\"xp-progress-bar\">||....</div>\r\n                                    <div className=\"level\">5</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"draft-main\">\r\n                    <div className=\"draft-gold-bar\">\r\n                        <div className=\"draft-gold\">\r\n                            {currentGold}\r\n                        </div>\r\n                    </div>\r\n                    <Hand hand={currentHand} />\r\n                </div>\r\n            </div>            \r\n        );\r\n    }\r\n}","import { observable } from 'mobx';\r\n\r\nimport * as tiers from '../data/tiers.json';\r\nimport * as levels from '../data/levels.json';\r\nimport * as champions from '../data/champions.json';\r\n\r\nexport interface ChampData {\r\n    id: string;\r\n    name: string;\r\n    cost: number;\r\n    classes: string[];\r\n}\r\n\r\nexport class DraftStore {\r\n\r\n    @observable\r\n    pool: ChampData[];\r\n\r\n    @observable\r\n    currentHand: ChampData[];\r\n\r\n    constructor() {\r\n        this.pool = [];\r\n        this.currentHand = [];\r\n    }\r\n\r\n    public initializePool() {\r\n        this.pool = champions.champions.flatMap(champ => {\r\n            const poolSize = this.getInitialPoolSizeForChamp(champ.id);\r\n            return [...Array(poolSize)].fill({\r\n                ...champ\r\n            });\r\n        });\r\n    }\r\n\r\n    private getInitialPoolSizeForChamp(id: string): number {\r\n        const champ = champions.champions.find(x => x.id === id);\r\n        if(champ == null) { return 0; }\r\n\r\n        switch(champ.cost) {\r\n            case 1: return tiers.unitsPerTier.tier1;\r\n            case 2: return tiers.unitsPerTier.tier2;\r\n            case 3: return tiers.unitsPerTier.tier3;\r\n            case 4: return tiers.unitsPerTier.tier4;\r\n            case 5: return tiers.unitsPerTier.tier5;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    public drawHand() {\r\n        while(this.currentHand.length < 5) {\r\n            this.drawCard();\r\n        }\r\n    }\r\n\r\n    public drawCard() {\r\n        //TODO: player level;\r\n        const level = 6;\r\n\r\n        const odds = levels.levels[level].tierOdds;\r\n        const roll = Math.random();\r\n\r\n        const cost = this.getCost(roll, odds);\r\n\r\n        const cardSet = this.pool.filter(x => x.cost === cost);\r\n        const index = Math.floor(Math.random() * cardSet.length);\r\n        const card = cardSet[index];\r\n\r\n        this.currentHand.push(card);\r\n        this.pool.splice(index, 1);\r\n        console.log(`Your new card: ${card.name}`);\r\n    }\r\n\r\n    private getCost(roll: number, odds: number[]) {\r\n        let total = 0;\r\n        let index = 0;\r\n       console.log(`You rolled: ${roll}`, odds);\r\n        while(total < roll) {\r\n            total += odds[index];\r\n            ++index;\r\n            console.log(`Total odds for cost ${index} unit: ${total}`);\r\n        }\r\n        console.log(`You're getting as ${index} cost unit`);\r\n\r\n        return index;\r\n    }\r\n\r\n    private getUnitsByCost(cost: number) {\r\n        return champions.champions.filter(champ => champ.cost === cost);\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport { Board } from './board/board';\r\nimport { Bench } from './bench/bench';\r\nimport { Draft } from './hand/draft';\r\n\r\nimport { DraftStore } from '../stores/draft-store';\r\nimport { observable } from 'mobx';\r\n\r\nexport class MainPage extends React.Component {\r\n\r\n    @observable\r\n    draftStore: DraftStore = null;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.draftStore = new DraftStore();\r\n\r\n        this.draftStore.initializePool();\r\n        this.draftStore.drawHand();\r\n        console.log(this.draftStore);\r\n\r\n    }\r\n\r\n    public render() {\r\n\r\n        const units = [...Array(Bench.BENCH_SIZE)].map(x => null);\r\n\r\n        return (\r\n            <section className=\"main-page\">\r\n                <Board cellData={[]}/>\r\n                <Bench units={units} />\r\n                <Draft currentHand={this.draftStore.currentHand} currentGold={23} />\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { MainPage } from './components/main-page';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <MainPage />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}