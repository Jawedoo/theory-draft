{"version":3,"sources":["components/champion/champion.tsx","components/board/cell.tsx","utils.ts","components/board/board.tsx","components/bench/bench-slot.tsx","components/bench/bench.tsx","components/shared/coin.tsx","components/hand/card.tsx","components/hand/blank-card.tsx","components/hand/hand.tsx","stores/draft-store.ts","components/hand/draft.tsx","components/main-page.tsx","App.js","serviceWorker.js","index.js"],"names":["Champion","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","unit","props","champ","stars","getTierString","style","backgroundImage","concat","id","react","className","name","tier","React","Cell","_this$props","boardUnit","onSelect","onClick","champion_Champion","BOARD_WIDTH","BOARD_HEIGHT","Board","inject","_dec","_class","observer","call","_this","draft","rows","toConsumableArray","Array","map","_","index","getRow","row","renderRow","i","start","end","boardUnits","slice","_this2","isOdd","bu","cell_Cell","getKey","x","undefined","console","log","selection","isBenched","toggleSelectedUnit","moveSelectedUnitToBoard","BenchSlot","selectedClass","isSelected","Boolean","Bench","bench_dec","bench_class","benchedUnits","selectedUnit","selectedBenchIndex","bench_slot_BenchSlot","onSelectUnit","moveSelectedUnitToBench","Coin","Card","card","action","_card$champ","cost","classes","coin_Coin","BlankCard","Hand","hand_class","hand","card_Card","guid","blank_card_BlankCard","DraftStore","_temp","_class2","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","pool","currentHand","nextLevelXp","getXpForLevelUp","level","BENCH_SIZE","fill","moveUnitToBench","moveUnitToBoard","newBoardUnit","isHandLocked","gold","goldPerRound","addXP","XP_PER_ROUND","REFRESH_COST","refreshHand","forEach","push","drawHand","BUY_XP_COST","amount","xp","length","drawCard","odds","levels","tierOdds","roll","Math","random","getCost","cardSet","filter","floor","splice","champions","flatMap","poolSize","getInitialPoolSizeForChamp","removeExtra","firstEmpty","findIndex","matchingBenchUnits","matchingBoardUnits","matchingUnits","availableToBuy","mergeUnits","c","_this3","extraUnits","champCount","reduce","m","val","keys","find","boardIndex","currentLevel","tiers","tier1","tier2","tier3","tier4","tier5","total","draft_store_class","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","getOwnPropertyDescriptor","Draft","draft_dec","draft_class","progressStyle","transform","lockClass","toggleHandLock","buyXP","hand_Hand","buyCard","MainPage","main_page_class","main_page_descriptor","assertThisInitialized","draftStore","initializePool","window","ChampionsData","mobx_react_module","nextRound","board_Board","bench_Bench","draft_Draft","App","react_default","a","createElement","main_page_MainPage","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+sIAOaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEoB,IACJC,EAAST,KAAKU,MAAdD,KACAE,EAAUF,EAAVE,MAEFC,EAAQZ,KAAKa,cAAcJ,GAE3BK,EAAQ,CACVC,gBAAe,wBAAAC,OAA0BL,EAAMM,GAAhC,UAGnB,OACIC,EAAA,qBAAKC,UAAU,WAAWL,MAAOA,GAC7BI,EAAA,qBAAKC,UAAU,iBAAiBP,GAChCM,EAAA,qBAAKC,UAAU,iBAAiBR,EAAMS,SAftD,CAAAb,IAAA,gBAAAC,MAAA,SAoB0BC,GAClB,OAAOA,EAAKY,MACR,KAAK,EAAG,MAAO,SACf,KAAK,EAAG,MAAO,eACf,KAAK,EAAG,MAAO,0BAxB3BzB,EAAA,CAA8B0B,aCEjBC,EAAb,SAAA1B,GAAA,SAAA0B,IAAA,OAAAzB,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,GAAAzB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAyB,EAAA1B,GAAAC,OAAAQ,EAAA,EAAAR,CAAAyB,EAAA,EAAAhB,IAAA,SAAAC,MAAA,WACoB,IAAAgB,EACoBxB,KAAKU,MAA7Be,EADID,EACJC,UAAWC,EADPF,EACOE,SACXjB,EAASgB,EAAThB,KAER,OACIS,EAAA,qBAAKC,UAAU,OAAOQ,QAAS,kBAAMD,EAASD,KAC1CP,EAAA,qBAAKC,UAAU,YACVV,GAAQS,EAAA,cAACU,EAAD,CAAUnB,KAAMA,UAR7Cc,EAAA,CAA0BD,oBCPbO,SAAc,GACdC,EAAe,ECWfC,EAFZC,YAAO,QAERC,CAAAC,EADCC,YACDD,EAAA,SAAArC,GAEI,SAAAkC,EAAmBrB,GAAoB,OAAAZ,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,GAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAAK,KAAApC,KAC7BU,IAHd,OAAAZ,OAAAO,EAAA,EAAAP,CAAAiC,EAAAlC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAiC,EAAA,EAAAxB,IAAA,SAAAC,MAAA,WAMoB,IAAA6B,EAAArC,KAGZ,GAFkBA,KAAKU,MAAf4B,MAER,CAEA,IAAMC,EAAOzC,OAAA0C,EAAA,EAAA1C,CAAI2C,MAAMX,IAAeY,IAAI,SAACC,EAAGC,GAAJ,OAAcP,EAAKQ,OAAOD,EAAQ,KAE5E,OACI1B,EAAA,qBAAKC,UAAU,SACVoB,EAAKG,IAAI,SAACI,EAAkBF,GAAnB,OAAqCP,EAAKU,UAAUD,EAAKF,SAfnF,CAAArC,IAAA,SAAAC,MAAA,SAoBmBwC,GAAwB,IAC3BV,EAAUtC,KAAKU,MAAf4B,MACFW,EAAQpB,GAAemB,EAAI,GAC3BE,EAAMrB,EAAcmB,EAE1B,OAAOV,EAAMa,WAAWC,MAAMH,EAAOC,KAzB7C,CAAA3C,IAAA,YAAAC,MAAA,SA6BsB2C,EAAyBL,GAAa,IAAAO,EAAArD,KAC9CsD,EAAQR,EAAI,IAAM,EACxB,OACI5B,EAAA,qBAAKC,UAAU,aAAaZ,IAAKuC,GAC5BQ,GAASpC,EAAA,qBAAKC,UAAU,8BACxBgC,EAAWT,IAAI,SAAAa,GAAE,OACdrC,EAAA,cAACsC,EAAD,CAAMjD,IAAK8C,EAAKI,OAAOF,GAAK9B,UAAW8B,EAAI7B,SAAU,SAAAgC,GAAC,OAAIL,EAAK3B,SAASgC,SAE1EJ,GAASpC,EAAA,qBAAKC,UAAU,kCArC1C,CAAAZ,IAAA,SAAAC,MAAA,SA0CmBiB,GAA8B,IACjChB,EAAgBgB,EAAhBhB,KAAMmC,EAAUnB,EAAVmB,MACd,YAAYe,IAATlD,EACC,SAAAO,OAAgB4B,GAEhB,GAAA5B,OAAUP,EAAKE,MAAMM,GAArB,KAAAD,OAA2BP,EAAKY,KAAhC,KAAAL,OAAwC4B,KA/CpD,CAAArC,IAAA,WAAAC,MAAA,SAmDqBiB,GAAsB,IAC3Ba,EAAUtC,KAAKU,MAAf4B,MAIR,GAFAsB,QAAQC,IAAI,sBAAuBpC,QAEbkC,IAAnBlC,EAAUhB,KAAb,CAKA,IAAMqD,EAAY,CACdrD,KAAMgB,EAAUhB,KAChBmC,MAAOnB,EAAUmB,MACjBmB,WAAW,GAGfzB,EAAM0B,mBAAmBF,QAVrBxB,EAAM2B,wBAAwBxC,EAAUmB,WAzDpDb,EAAA,CAA2BT,eAA3BY,MCHagC,EAAb,SAAArE,GAAA,SAAAqE,IAAA,OAAApE,OAAAC,EAAA,EAAAD,CAAAE,KAAAkE,GAAApE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoE,GAAA/D,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAoE,EAAArE,GAAAC,OAAAQ,EAAA,EAAAR,CAAAoE,EAAA,EAAA3D,IAAA,SAAAC,MAAA,WACoB,IAAAgB,EACkCxB,KAAKU,MAA3CD,EADIe,EACJf,KAAMmC,EADFpB,EACEoB,MAAOlB,EADTF,EACSE,SACfyC,EAFM3C,EACmB4C,WACI,WAAa,GAChD,OACIlD,EAAA,qBAAKC,UAAS,cAAAH,OAAgBmD,GAAiBxC,QAAS,kBAAMD,EAASjB,EAAMmC,KACxEyB,QAAQ5D,IAASS,EAAA,cAACU,EAAD,CAAUnB,KAAMA,SANlDyD,EAAA,CAA+B5C,aCClBgD,SAFZtC,YAAO,QAERuC,CAAAC,EADCrC,YACDqC,EAAA,SAAA3E,GAAA,SAAAyE,IAAA,OAAAxE,OAAAC,EAAA,EAAAD,CAAAE,KAAAsE,GAAAxE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwE,GAAAnE,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAwE,EAAAzE,GAAAC,OAAAQ,EAAA,EAAAR,CAAAwE,EAAA,EAAA/D,IAAA,SAAAC,MAAA,WACoB,IAAA6B,EAAArC,KACJsC,EAAUtC,KAAKU,MAAf4B,MACAmC,EAA+BnC,EAA/BmC,aAAcC,EAAiBpC,EAAjBoC,aAChBC,OAAuChB,IAAjBe,GAA8BA,EAAaX,UAAaW,EAAa9B,OAAS,EAE1G,OACI1B,EAAA,qBAAKC,UAAU,SACVsD,EAAa/B,IAAI,SAACjC,EAAMmC,GAAP,OAAiB1B,EAAA,cAAC0D,EAAD,CAC/BnE,KAAMA,EACNmC,MAAOA,EACPwB,WAAYO,IAAuB/B,EACnClB,SAAU,SAACjB,EAAMmC,GAAP,OAAiBP,EAAKwC,aAAapE,EAAMmC,IACnDrC,IAAG,GAAAS,OAAMP,EAAOA,EAAKE,MAAMM,GAAK,IAAMR,EAAKY,KAAO,QAA/C,KAAAL,OAA0D4B,UAbjF,CAAArC,IAAA,eAAAC,MAAA,SAmByBC,EAAYmC,GAAe,IACpCN,EAAUtC,KAAKU,MAAf4B,MACR,GAAI7B,EAAJ,CAKA,IAAMqD,EAAY,CACdrD,OACAmC,QACAmB,WAAW,GAGfzB,EAAM0B,mBAAmBF,QAVrBxB,EAAMwC,wBAAwBlC,OAtB1C0B,EAAA,CAA2BhD,eAA3BkD,OCVaO,qBAAb,SAAAlF,GAAA,SAAAkF,IAAA,OAAAjF,OAAAC,EAAA,EAAAD,CAAAE,KAAA+E,GAAAjF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiF,GAAA5E,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAiF,EAAAlF,GAAAC,OAAAQ,EAAA,EAAAR,CAAAiF,EAAA,EAAAxE,IAAA,SAAAC,MAAA,WAEQ,OACIU,EAAA,mBAAGC,UAAU,QACTD,EAAA,sBAAMC,UAAU,QAAhB,aAJhB4D,EAAA,CAA0BzD,cCSb0D,EAAb,SAAAnF,GAAA,SAAAmF,IAAA,OAAAlF,OAAAC,EAAA,EAAAD,CAAAE,KAAAgF,GAAAlF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkF,GAAA7E,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAkF,EAAAnF,GAAAC,OAAAQ,EAAA,EAAAR,CAAAkF,EAAA,EAAAzE,IAAA,SAAAC,MAAA,WAEoB,IAAAgB,EACaxB,KAAKU,MAAtBuE,EADIzD,EACJyD,KAAMC,EADF1D,EACE0D,OADFC,EAEwBF,EAAKtE,MAAjCS,EAFI+D,EAEJ/D,KAAMgE,EAFFD,EAEEC,KAAMnE,EAFRkE,EAEQlE,GAAIoE,EAFZF,EAEYE,QAElBvE,EAAQ,CACVC,gBAAe,yBAAAC,OAA2BC,EAA3B,WAGnB,OACIC,EAAA,qBAAKC,UAAS,yBAAAH,OAA2BoE,GAAQzD,QAAS,kBAAMuD,EAAOD,KACnE/D,EAAA,qBAAKC,UAAU,eACfD,EAAA,qBAAKC,UAAS,iBAAAH,OAAmBC,GAAMH,MAAOA,GACzCuE,EAAQ3C,IAAI,SAAAgB,GAAC,OAAIxC,EAAA,qBAAKC,UAAU,cAAcZ,IAAKmD,GAAIA,MAE5DxC,EAAA,qBAAKC,UAAS,sBAAAH,OAAwBoE,IAClClE,EAAA,qBAAKC,UAAU,QAAQC,GACvBF,EAAA,qBAAKC,UAAU,QACXD,EAAA,0BACIA,EAAA,cAACoE,EAAD,MACCF,UArB7BJ,EAAA,CAA0B1D,aCPbiE,EAAb,SAAA1F,GAAA,SAAA0F,IAAA,OAAAzF,OAAAC,EAAA,EAAAD,CAAAE,KAAAuF,GAAAzF,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyF,GAAApF,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAyF,EAAA1F,GAAAC,OAAAQ,EAAA,EAAAR,CAAAyF,EAAA,EAAAhF,IAAA,SAAAC,MAAA,WAGQ,OACIU,EAAA,qBAAKC,UAAU,yBAJ3BoE,EAAA,CAA+BjE,aCUjBkE,EADbrD,YACAsD,EAAA,SAAA5F,GAAA,SAAA2F,IAAA,OAAA1F,OAAAC,EAAA,EAAAD,CAAAE,KAAAwF,GAAA1F,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0F,GAAArF,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA0F,EAAA3F,GAAAC,OAAAQ,EAAA,EAAAR,CAAA0F,EAAA,EAAAjF,IAAA,SAAAC,MAAA,WAEmB,IAAAgB,EACaxB,KAAKU,MAAtBgF,EADIlE,EACJkE,KAAMR,EADF1D,EACE0D,OAEd,OACIhE,EAAA,qBAAKC,UAAU,QACVuE,EAAKhD,IAAK,SAACuC,EAAMrC,GAAP,OAAiByB,QAAQY,GAChC/D,EAAA,cAACyE,EAAD,CAAMV,KAAMA,EAAM1E,IAAK0E,EAAKW,KAAMV,OAAQA,IAC1ChE,EAAA,cAAC2E,EAAD,CAAWtF,IAAKqC,EAAQ,kBAT3C4C,EAAA,CAA0BlE,eAA1BmE,4CCLYK,GAAbC,EAAAC,EAAA,WAwCI,SAAAF,IAAehG,OAAAC,EAAA,EAAAD,CAAAE,KAAA8F,GAAAhG,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,OAAAkG,EAAAlG,MAAAF,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,cAAAmG,EAAAnG,MAAAF,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,eAAAoG,EAAApG,MAAAF,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,aAAAqG,EAAArG,MAAAF,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,KAAAsG,EAAAtG,MAAAF,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,cAAAuG,EAAAvG,MAAAF,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,QAAAwG,EAAAxG,MAAAF,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,OAAAyG,EAAAzG,MAAAF,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,eAAA0G,EAAA1G,MAAAF,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,eAAA2G,EAAA3G,MAAAF,OAAAmG,EAAA,EAAAnG,CAAAE,KAAA,eAAA4G,EAAA5G,MACXA,KAAK6G,KAAO,GACZ7G,KAAK8G,YAAc,GACnB9G,KAAK+G,YAAc/G,KAAKgH,gBAAgBhH,KAAKiH,MAAQ,GACrDjH,KAAKyE,aAAe3E,OAAA0C,EAAA,EAAA1C,CAAI2C,MAAMqD,EAAWoB,aAAaC,KAAK,MAC3DnH,KAAKmD,WAAarD,OAAA0C,EAAA,EAAA1C,CAAI2C,MAAMZ,EAAcC,IAAeY,IACrD,SAACC,EAAGC,GAAJ,MAAe,CAAEnC,UAAMkD,EAAWf,WA9C9C,OAAA9C,OAAAQ,EAAA,EAAAR,CAAAgG,EAAA,EAAAvF,IAAA,qBAAAC,MAAA,SAmD8BsD,GAEtB,QAAyBH,IAAtB3D,KAAK0E,aAGJ,OAFA1E,KAAK0E,aAAeZ,OACpBF,QAAQC,IAAI,WAAYC,EAAUrD,WAIGkD,IAAtB3D,KAAK0E,cAA8BZ,EAAUlB,QAAU5C,KAAK0E,aAAa9B,OAKxF5C,KAAK0E,kBAAef,EACpBC,QAAQC,IAAI,aAAcC,EAAUrD,KAAKE,MAAMS,QAE7CpB,KAAK0E,aAAaX,UACjB/D,KAAKoH,gBAAgBtD,EAAUrD,KAAMT,KAAK0E,aAAa9B,OAEvD5C,KAAKqH,gBAAgBvD,EAAUrD,KAAMT,KAAK0E,aAAa9B,OAGxDkB,EAAUC,UACR/D,KAAKoH,gBAAgBpH,KAAK0E,aAAajE,KAAMqD,EAAUlB,OAExD5C,KAAKqH,gBAAgBrH,KAAK0E,aAAajE,KAAMqD,EAAUlB,OAG1D5C,KAAK0E,kBAAef,KA/EhC,CAAApD,IAAA,0BAAAC,MAAA,SAoFmCoC,QACFe,IAAtB3D,KAAK0E,cAAyD,OAA3B1E,KAAK0E,aAAajE,OAErDT,KAAK0E,aAAaX,UACjB/D,KAAKyE,aAAazE,KAAK0E,aAAa9B,OAAS,KAE7C5C,KAAKmD,WAAWnD,KAAK0E,aAAa9B,OAAOnC,UAAOkD,EAGpD3D,KAAKoH,gBAAgBpH,KAAK0E,aAAajE,KAAMmC,GAG7C5C,KAAK0E,kBAAef,KAhG5B,CAAApD,IAAA,0BAAAC,MAAA,SAoGmCoC,QACFe,IAAtB3D,KAAK0E,cAAyD,OAA3B1E,KAAK0E,aAAajE,OAGrDT,KAAK0E,aAAaX,UACjB/D,KAAKyE,aAAazE,KAAK0E,aAAa9B,OAAS,KAE7C5C,KAAKmD,WAAWnD,KAAK0E,aAAa9B,OAAOnC,UAAOkD,EAIpD3D,KAAKqH,gBAAgBrH,KAAK0E,aAAajE,KAAMmC,GAG7C5C,KAAK0E,kBAAef,KAlH5B,CAAApD,IAAA,kBAAAC,MAAA,SAsH4BC,EAAYmC,GAChC5C,KAAKyE,aAAa7B,GAASnC,IAvHnC,CAAAF,IAAA,kBAAAC,MAAA,SA2H4BC,EAAYmC,GAChC,IAAM0E,EAAe,CAAE1E,QAAOnC,QAC9BT,KAAKmD,WAAWP,GAAS0E,IA7HjC,CAAA/G,IAAA,iBAAAC,MAAA,WAkIQR,KAAKuH,cAAgBvH,KAAKuH,eAlIlC,CAAAhH,IAAA,YAAAC,MAAA,WAuIQR,KAAKwH,MAAQxH,KAAKyH,aAClBzH,KAAK0H,MAAM5B,EAAW6B,cAClB3H,KAAKuH,eACLvH,KAAKwH,MAAQ1B,EAAW8B,aACxB5H,KAAK6H,iBA3IjB,CAAAtH,IAAA,cAAAC,MAAA,WAgJyB,IAAA6B,EAAArC,KACbA,KAAKwH,KAAO1B,EAAW8B,aACvBhE,QAAQC,IAAI,iCAKhB7D,KAAK8G,YAAYgB,QAAQ,SAAA7C,GAClBA,GACC5C,EAAKwE,KAAKkB,KAAK9C,KAIvBjF,KAAK8G,YAAc,GAEnB9G,KAAKgI,WACLhI,KAAKwH,MAAQ1B,EAAW8B,gBAhKhC,CAAArH,IAAA,QAAAC,MAAA,WAqKWR,KAAKwH,KAAO1B,EAAWmC,YACtBrE,QAAQC,IAAI,gCAGhB7D,KAAK0H,MAAM,GACX1H,KAAKwH,MAAQ1B,EAAWmC,eA1KhC,CAAA1H,IAAA,QAAAC,MAAA,SA8KiB0H,GACTlI,KAAKmI,IAAMD,EAERlI,KAAKmI,IAAMnI,KAAK+G,cACf/G,KAAKmI,GAAKnI,KAAKmI,GAAKnI,KAAK+G,YACzB/G,KAAK+G,YAAc/G,KAAKgH,gBAAgBhH,KAAKiH,MAAQ,GACrDjH,KAAKiH,OAAS,KApL1B,CAAA1G,IAAA,WAAAC,MAAA,WA0LQ,KAAMR,KAAK8G,YAAYsB,OAAS,GAC5BpI,KAAKqI,aA3LjB,CAAA9H,IAAA,WAAAC,MAAA,WAiMQ,IAAMD,EAAG,QAAAS,OAAWhB,KAAKiH,OAEnBqB,EAAQC,IAAsBhI,GAAKiI,SACnCC,EAAOC,KAAKC,SAEZvD,EAAOpF,KAAK4I,QAAQH,EAAMH,GAE1BO,EAAU7I,KAAK6G,KAAKiC,OAAO,SAAApF,GAAC,OAAIA,EAAE/C,MAAMyE,OAASA,IACjDxC,EAAQ8F,KAAKK,MAAML,KAAKC,SAAWE,EAAQT,QAC3CnD,EAAO4D,EAAQjG,GAErB5C,KAAK8G,YAAYiB,KAAK9C,GACtBjF,KAAK6G,KAAKmC,OAAOpG,EAAO,GACxBgB,QAAQC,IAAR,kBAAA7C,OAA8BiE,EAAKtE,MAAMS,SA9MjD,CAAAb,IAAA,iBAAAC,MAAA,WAkN4B,IAAA6C,EAAArD,KACpBA,KAAK6G,KAAOoC,YAAoBC,QAAQ,SAAAvI,GACpC,IAAMwI,EAAW9F,EAAK+F,2BAA2BzI,EAAMM,IACvD,OAAOnB,OAAA0C,EAAA,EAAA1C,CAAI2C,MAAM0G,IAAWzG,IAAI,SAACC,EAAGC,GAAJ,MAAe,CAC3CjC,QACAiF,KAAMjF,EAAMM,GAAK,IAAM2B,SAvNvC,CAAArC,IAAA,UAAAC,MAAA,SA6NmByE,GAEX,GAAIA,GAASA,EAAKtE,MAAlB,CAF4B,IAMpBiF,EAAgBX,EAAhBW,KAAMjF,EAAUsE,EAAVtE,MAEdiD,QAAQC,IAAI,sBAAuBlD,GACnC,IAAIyE,EAAOzE,EAAMyE,KACbiE,GAAc,EAElB,GAAGrJ,KAAKwH,KAAO7G,EAAMyE,KACjBxB,QAAQC,IAAR,4BAAA7C,OAAwCL,EAAMS,KAA9C,SAAAJ,OAA0DL,EAAMyE,KAAhE,eADJ,CAgBA,IAAMkE,EAAatJ,KAAKyE,aAAa8E,UAAU,SAAA7F,GAAC,OAAU,OAANA,IAEpD,GAAG4F,GAAc,EACbtJ,KAAKyE,aAAa6E,GAAe,CAC7BjI,KAAM,EACNV,aAGD,CACH,IAAM6I,EAAqBxJ,KAAKyE,aAC3BqE,OAAO,SAAArI,GAAI,OAAa,OAATA,GAA+B,IAAdA,EAAKY,MAAcZ,EAAKE,MAAMM,KAAON,EAAMM,KAC1EwI,EAAqBzJ,KAAKmD,WAC3BT,IAAI,SAAAa,GAAE,OAAIA,EAAG9C,MAAQ,OACrBqI,OAAO,SAAArI,GAAI,OAAa,OAATA,GAA+B,IAAdA,EAAKY,MAAcZ,EAAKE,MAAMM,KAAON,EAAMM,KAE1EyI,EAAa,GAAA1I,OAAAlB,OAAA0C,EAAA,EAAA1C,CAAO0J,GAAP1J,OAAA0C,EAAA,EAAA1C,CAA8B2J,IAE3CE,EAAiB3J,KAAK8G,YACvBgC,OAAO,SAAA7D,GAAI,OAAY,MAARA,GAAgBA,EAAKtE,MAAMM,KAAON,EAAMM,KAG5D,GAA6B,IAAzByI,EAActB,OACdpI,KAAK4J,WAAW,EAAGD,OAChB,MAA6B,IAAzBD,EAActB,QAAgBuB,EAAevB,QAAU,GAY9D,YADAxE,QAAQC,IAAI,0CAA2ClD,EAAMS,MAV7D,KAAGpB,KAAKwH,MAAqB,EAAb7G,EAAMyE,MAMlB,YADAxB,QAAQC,IAAI,2DAA4DlD,EAAMS,MAJ9EgE,GAAQ,EACRpF,KAAK4J,WAAW,EAAGD,GACnBN,GAAc,GAa1B,IAAMzG,EAAQ5C,KAAK8G,YAAYyC,UAAU,SAAAM,GAAC,OAAS,MAALA,GAAaA,EAAEjE,OAASA,IAItE,GAHA5F,KAAK8G,YAAYlE,GAAS,KAGvByG,EAAa,CACZ,IAAMzG,EAAQ5C,KAAK8G,YAAYyC,UAAU,SAAAtE,GAAI,OAAY,MAARA,GAAgBA,EAAKtE,MAAMM,KAAON,EAAMM,KACzFjB,KAAK8G,YAAYlE,GAAS,KAI9B5C,KAAK4J,WAAW,GAGhB5J,KAAKwH,MAAQpC,MA9SrB,CAAA7E,IAAA,aAAAC,MAAA,WAkTuE,IAAAsJ,EAAA9J,KAAhDqB,EAAgDjB,UAAAgI,OAAA,QAAAzE,IAAAvD,UAAA,GAAAA,UAAA,GAAjC,EACxB2J,GADyD3J,UAAAgI,OAAA,QAAAzE,IAAAvD,UAAA,GAAAA,UAAA,GAAJ,IACrBsC,IAAI,SAAAuC,GAAI,MAAK,CAACtE,MAAOsE,EAAKtE,MAAOU,KAAM,KACvE8B,EAA4BnD,KAAKmD,WAAWT,IAAI,SAAAa,GAAE,OAAIA,EAAG9C,MAAQ,OAMjEuJ,EALyB,GAAAhJ,OAAAlB,OAAA0C,EAAA,EAAA1C,CAAOE,KAAKyE,cAAZ3E,OAAA0C,EAAA,EAAA1C,CAA6BqD,GAA7BrD,OAAA0C,EAAA,EAAA1C,CAA4CiK,IAExCjB,OAAO,SAAAe,GAAC,OAAS,OAALA,GAAaA,EAAExI,OAASA,IAGpC4I,OAAO,SAACC,EAAWzJ,GAClD,IAAMQ,EAAKR,EAAKE,MAAMM,GAChBkJ,EAAOD,EAAUjJ,GAMvB,OAFKiJ,EAAUjJ,GAHVkJ,EAGgBA,EAAI,EAFJ,EAIdD,GACR,IAGgBpK,OAAOsK,KAAKJ,GAAYlB,OAAO,SAAApF,GAAC,OAAKsG,EAAmBtG,IAAM,IAGtEoE,QAAQ,SAAA7G,GAKf,IAJA,IAAMN,EAASsI,YAAoCoB,KAAK,SAAAR,GAAC,OAAIA,EAAE5I,KAAOA,IAElE2B,GAAS,GAEN,KAAOA,EAAQkH,EAAKrF,aAAa8E,UAAU,SAAA9I,GAAI,OACzC,OAATA,GACAA,EAAKE,MAAMM,KAAOA,GAClBR,EAAKY,OAASA,MAEdyI,EAAKrF,aAAa7B,GAAS,KAI/BA,GAAS,EAET,IADA,IAAI0H,EAAa,GACV,KAAO1H,EAAQkH,EAAK3G,WAAWoG,UAAU,SAAA9H,GAAS,YAClCkC,IAAnBlC,EAAUhB,MACVgB,EAAUhB,KAAKE,MAAMM,KAAOA,GAC5BQ,EAAUhB,KAAKY,OAASA,MAExByI,EAAK3G,WAAWP,GAAOnC,UAAOkD,EAC9B2G,EAAa1H,EAKjB,IAAmB,IAAhB0H,EACCR,EAAK3G,WAAWmH,GAAY7J,KAAO,CAC/BY,KAAMA,EAAO,EACbV,aAED,CACH,IAAM2I,EAAaQ,EAAKrF,aAAa8E,UAAU,SAAA7F,GAAC,OAAU,OAANA,IACpDoG,EAAKrF,aAAa6E,GAAc,CAC5BjI,KAAMA,EAAO,EACbV,YAKC,IAATU,GACArB,KAAK4J,WAAW,KAnX5B,CAAArJ,IAAA,kBAAAC,MAAA,SAuX4B+J,GACpB,OAAQhC,IAAD,QAAAvH,OAA+BuJ,IAAgBpC,KAxX9D,CAAA5H,IAAA,6BAAAC,MAAA,SA2XuCS,GAC/B,IAAMN,EAAQsI,YAAoBoB,KAAK,SAAA3G,GAAC,OAAIA,EAAEzC,KAAOA,IACrD,GAAY,MAATN,EAAiB,OAAO,EAE3B,OAAOA,EAAMyE,MACT,KAAK,EAAG,OAAOoF,IAAmBC,MAClC,KAAK,EAAG,OAAOD,IAAmBE,MAClC,KAAK,EAAG,OAAOF,IAAmBG,MAClC,KAAK,EAAG,OAAOH,IAAmBI,MAClC,KAAK,EAAG,OAAOJ,IAAmBK,MAClC,QAAS,OAAO,KArY5B,CAAAtK,IAAA,UAAAC,MAAA,SAyYoBiI,EAAcH,GAC1B,IAAIwC,EAAQ,EACRlI,EAAQ,EAEZ,IADDgB,QAAQC,IAAR,eAAA7C,OAA2ByH,GAAQH,GAC5BwC,EAAQrC,GACVqC,GAASxC,EAAK1F,KACZA,EACFgB,QAAQC,IAAR,uBAAA7C,OAAmC4B,EAAnC,WAAA5B,OAAkD8J,IAItD,OAFAlH,QAAQC,IAAR,qBAAA7C,OAAiC4B,EAAjC,eAEOA,IApZf,CAAArC,IAAA,iBAAAC,MAAA,SAuZ2B4E,GACnB,OAAO6D,YAAoBH,OAAO,SAAAnI,GAAK,OAAIA,EAAMyE,OAASA,QAxZlEU,EAAA,GAAAE,EAEkB4B,aAAe,EAFjC5B,EAGkBiC,YAAc,EAHhCjC,EAIkBkB,WAAa,EAJ/BlB,EAKkB2B,aAAe,EALjCoD,EAAAhF,EAAAG,EAAApG,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,QAOKC,KAPL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,OAAAnF,EAAArG,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,eAUKC,KAVL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,OAAAlF,EAAAtG,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,gBAaKC,KAbL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBAcoC,MAdpCjF,EAAAvG,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,cAgBKC,KAhBL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBAiB8B,MAjB9BhF,EAAAxG,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,MAmBKC,KAnBL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAoBiB,KApBjB/E,EAAAzG,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,eAsBKC,KAtBL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAuB0B,KAvB1B9E,EAAA1G,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,SAyBKC,KAzBL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBA0BoB,KA1BpB7E,EAAA3G,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,QA4BKC,KA5BL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBA6BmB,KA7BnB5E,EAAA5G,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,gBA+BKC,KA/BL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAgC4B,KAhC5B3E,EAAA7G,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,gBAkCKC,KAlCL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAmC2B,KAnC3B1E,EAAA9G,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,gBAqCKC,KArCL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAxL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,sBAkDK/F,KAlDLpF,OAAAyL,yBAAAR,EAAAE,UAAA,sBAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,2BAmFK/F,KAnFLpF,OAAAyL,yBAAAR,EAAAE,UAAA,2BAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,2BAmGK/F,KAnGLpF,OAAAyL,yBAAAR,EAAAE,UAAA,2BAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,mBAqHK/F,KArHLpF,OAAAyL,yBAAAR,EAAAE,UAAA,mBAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,mBA0HK/F,KA1HLpF,OAAAyL,yBAAAR,EAAAE,UAAA,mBAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,kBAgIK/F,KAhILpF,OAAAyL,yBAAAR,EAAAE,UAAA,kBAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,aAqIK/F,KArILpF,OAAAyL,yBAAAR,EAAAE,UAAA,aAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,eA+IK/F,KA/ILpF,OAAAyL,yBAAAR,EAAAE,UAAA,eAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,SAmKK/F,KAnKLpF,OAAAyL,yBAAAR,EAAAE,UAAA,SAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,SA6KK/F,KA7KLpF,OAAAyL,yBAAAR,EAAAE,UAAA,SAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,YAwLK/F,KAxLLpF,OAAAyL,yBAAAR,EAAAE,UAAA,YAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,YA+LK/F,KA/LLpF,OAAAyL,yBAAAR,EAAAE,UAAA,YAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,kBAiNK/F,KAjNLpF,OAAAyL,yBAAAR,EAAAE,UAAA,kBAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,WA4NK/F,KA5NLpF,OAAAyL,yBAAAR,EAAAE,UAAA,WAAAF,EAAAE,WAAAnL,OAAAkL,EAAA,EAAAlL,CAAAiL,EAAAE,UAAA,cAiTK/F,KAjTLpF,OAAAyL,yBAAAR,EAAAE,UAAA,cAAAF,EAAAE,WAAAF,GCMaS,GAFZxJ,YAAO,QAERyJ,CAAAC,EADCvJ,YACDuJ,EAAA,SAAA7L,GAAA,SAAA2L,IAAA,OAAA1L,OAAAC,EAAA,EAAAD,CAAAE,KAAAwL,GAAA1L,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0L,GAAArL,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA0L,EAAA3L,GAAAC,OAAAQ,EAAA,EAAAR,CAAA0L,EAAA,EAAAjL,IAAA,SAAAC,MAAA,WACoB,IAAA6B,EAAArC,KACJsC,EAAUtC,KAAKU,MAAf4B,MACAwE,EAA8CxE,EAA9CwE,YAAaU,EAAiClF,EAAjCkF,KAAMW,EAA2B7F,EAA3B6F,GAAIpB,EAAuBzE,EAAvByE,YAAaE,EAAU3E,EAAV2E,MAEtC0E,EAAgB,CAClBC,UAAS,cAAA5K,QAAiB,IAFbmH,EAAGpB,EAAc,IAErB,OAGP8E,EAAYvJ,EAAMiF,aAAe,SAAW,OAElD,OACIrG,EAAA,qBAAKC,UAAU,SACXD,EAAA,qBAAKC,UAAU,4BACXD,EAAA,qBAAKC,UAAU,uBAAuBQ,QAAS,kBAAMW,EAAMwJ,mBACvD5K,EAAA,qBAAKC,UAAS,QAAAH,OAAU6K,MAE5B3K,EAAA,qBAAKC,UAAU,uBACXD,EAAA,qBAAKC,UAAU,iCAAiCQ,QAAS,kBAAMW,EAAMuF,gBACjE3G,EAAA,qBAAKC,UAAU,iBACXD,EAAA,qBAAKC,UAAU,WACXD,EAAA,oCACAA,EAAA,yBAAKA,EAAA,cAACoE,EAAD,MAAL,IAAeQ,EAAW8B,eAE9B1G,EAAA,qBAAKC,UAAU,OAAOL,MAAO,CAACC,gBAAiB,4BAIvDG,EAAA,qBAAKC,UAAU,4BAA4BQ,QAAS,kBAAMW,EAAMyJ,UAC5D7K,EAAA,qBAAKC,UAAU,YACXD,EAAA,qBAAKC,UAAU,WACXD,EAAA,qBAAKC,UAAU,WACXD,EAAA,qBAAKC,UAAU,SAAf,UACAD,EAAA,qBAAKC,UAAU,aACXD,EAAA,cAACoE,EAAD,MAASQ,EAAWmC,cAG5B/G,EAAA,qBAAKC,UAAU,OAAOL,MAAO,CAACC,gBAAiB,4BAEnDG,EAAA,qBAAKC,UAAU,eACXD,EAAA,qBAAKC,UAAU,YAAYgH,EAA3B,IAAgCpB,GAChC7F,EAAA,qBAAKC,UAAU,mBACXD,EAAA,qBAAKC,UAAU,OACXD,EAAA,qBAAKC,UAAU,OAAOL,MAAO6K,OAIzCzK,EAAA,qBAAKC,UAAU,SAAS8F,OAKxC/F,EAAA,qBAAKC,UAAU,yBACXD,EAAA,qBAAKC,UAAU,4BACXD,EAAA,qBAAKC,UAAU,cACXD,EAAA,cAACoE,EAAD,MAAQkC,IAGhBtG,EAAA,cAAC8K,EAAD,CAAMtG,KAAMoB,EAAa5B,OAAQ,SAAAxB,GAAC,OAAIrB,EAAK4J,QAAQvI,UA1DvE,CAAAnD,IAAA,UAAAC,MAAA,SAgEoByE,GACZrB,QAAQC,IAAI,0BAA2BoB,EAAKtE,MAAMS,MAClDpB,KAAKU,MAAM4B,MAAM2J,QAAQhH,OAlEjCuG,EAAA,CAA2BlK,eAA3BoK,MCLaQ,IAAbC,EAAA,SAAAtM,GAKI,SAAAqM,EAAYxL,GAAO,IAAA2B,EAAA,OAAAvC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkM,GACf7J,EAAAvC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoM,GAAA9J,KAAApC,KAAMU,IADSZ,OAAAmG,EAAA,EAAAnG,CAAAuC,EAAA,aAAA+J,EAAAtM,OAAAuM,EAAA,EAAAvM,CAAAuC,IAEfA,EAAKiK,WAAa,IAAIxG,EAEtBzD,EAAKiK,WAAWC,iBAChBlK,EAAKiK,WAAWtE,WAChBpE,QAAQC,IAAIxB,EAAKiK,YAEjBE,OAAM,UAAgBC,EARPpK,EALvB,OAAAvC,OAAAO,EAAA,EAAAP,CAAAoM,EAAArM,GAAAC,OAAAQ,EAAA,EAAAR,CAAAoM,EAAA,EAAA3L,IAAA,SAAAC,MAAA,WAiBoB,IAAA6C,EAAArD,KACZ,OACIkB,EAAA,yBAASC,UAAU,aACfD,EAAA,cAACwL,EAAA,EAAD,CAAUpK,MAAOtC,KAAKsM,YAClBpL,EAAA,cAAAA,EAAA,cACIA,EAAA,wBAAQS,QAAS,kBAAM0B,EAAKiJ,WAAWK,cAAvC,cACAzL,EAAA,cAAC0L,EAAD,MACA1L,EAAA,cAAC2L,EAAD,MACA3L,EAAA,cAAC4L,GAAD,aAzBxBZ,EAAA,CAA8B5K,aAA9B8K,EAAAtM,OAAAkL,EAAA,EAAAlL,CAAAqM,EAAAlB,UAAA,cAEKC,KAFL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAG6B,QAH7Ba,GCIeY,OAVf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAK/L,UAAU,oBACb6L,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACC,GAAD,SCIY9I,QACW,cAA7BmI,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOR,EAAAC,EAAAC,cAACO,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b5d05011.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Unit } from '../../stores/types';\r\n\r\ninterface ChampionProps {\r\n    unit: Unit;\r\n}\r\n\r\nexport class Champion extends React.Component<ChampionProps> {\r\n\r\n    public render() {\r\n        const { unit } = this.props;\r\n        const { champ } = unit;\r\n\r\n        const stars = this.getTierString(unit);\r\n\r\n        const style = {\r\n            backgroundImage: `url(img/champ-square/${champ.id}.png)`\r\n        };\r\n\r\n        return (\r\n            <div className=\"champion\" style={style}>\r\n                <div className=\"champion-tier\">{stars}</div>\r\n                <div className=\"champion-name\">{champ.name}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getTierString(unit: Unit): string {\r\n        switch(unit.tier) {\r\n            case 1: return '★';\r\n            case 2: return '★★';\r\n            case 3: return '★★★';\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { BoardUnit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\n\r\ninterface CellProps {\r\n    boardUnit: BoardUnit;\r\n    onSelect: (bu: BoardUnit) => void;\r\n}\r\n\r\nexport class Cell extends React.Component<CellProps> {\r\n    public render() {\r\n        const { boardUnit, onSelect } = this.props;\r\n        const { unit } = boardUnit;\r\n        \r\n        return (\r\n            <div className=\"cell\" onClick={() => onSelect(boardUnit)}>\r\n                <div className=\"contents\">\r\n                    {unit && <Champion unit={unit} /> }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import { Coords } from './stores/types';\r\n\r\nexport const BOARD_WIDTH = 7;\r\nexport const BOARD_HEIGHT = 3;\r\n\r\nexport const getIndexForCoords = (x: number, y: number): number => {\r\n    return y * BOARD_WIDTH + x;\r\n}\r\n\r\nexport const getCoordsForIndex = (index: number): Coords => {\r\n    return {\r\n        x: index % BOARD_WIDTH,\r\n        y: Math.floor(index / BOARD_WIDTH)\r\n    };\r\n}","import * as React from 'react';\r\nimport { Cell } from './cell';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport \"./board.scss\";\r\nimport { BOARD_HEIGHT, BOARD_WIDTH } from '../../utils';\r\nimport { BoardUnit, UnitSelection } from '../../stores/types';\r\n\r\ninterface BoardProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Board extends React.Component<BoardProps> {\r\n\r\n    public constructor(props: BoardProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const { draft } = this.props;\r\n\r\n        if(!draft) { return; }\r\n\r\n        const rows = [...Array(BOARD_HEIGHT)].map((_, index) => this.getRow(index + 1));\r\n\r\n        return (\r\n            <div className=\"board\">\r\n                {rows.map((row: BoardUnit[], index: number) => this.renderRow(row, index))}                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getRow(i: number): BoardUnit[] {\r\n        const { draft } = this.props;\r\n        const start = BOARD_WIDTH * (i - 1);\r\n        const end = BOARD_WIDTH * i;\r\n\r\n        return draft.boardUnits.slice(start, end);\r\n    }\r\n\r\n\r\n    private renderRow(boardUnits: BoardUnit[], row: number) {\r\n        const isOdd = row%2 === 1; \r\n        return (\r\n            <div className=\"board__row\" key={row}>\r\n                {isOdd && <div className=\"board-spacer spacer--left\"></div>}\r\n                {boardUnits.map(bu=>\r\n                    <Cell key={this.getKey(bu)} boardUnit={bu} onSelect={x => this.onSelect(x)} />\r\n                )}\r\n                {!isOdd && <div className=\"board-spacer spacer--right\"></div>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getKey(boardUnit: BoardUnit): string {\r\n        const { unit, index } = boardUnit;\r\n        if(unit === undefined) {\r\n            return `blank_${index}`;\r\n        } else {\r\n            return `${unit.champ.id}_${unit.tier}_${index}`;\r\n        }\r\n    }\r\n\r\n    private onSelect(boardUnit: BoardUnit) {\r\n        const { draft } = this.props;\r\n\r\n        console.log(\"Selected Board Unit\", boardUnit);\r\n        //If empty space\r\n        if(boardUnit.unit === undefined) {\r\n            draft.moveSelectedUnitToBoard(boardUnit.index);\r\n            return;\r\n        }\r\n\r\n        const selection = {\r\n            unit: boardUnit.unit,\r\n            index: boardUnit.index,\r\n            isBenched: false\r\n        } as UnitSelection;\r\n\r\n        draft.toggleSelectedUnit(selection);\r\n    }\r\n}","import * as React from 'react';\r\nimport { Unit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\n\r\ninterface BenchSlotProps {\r\n    unit?: Unit;\r\n    index: number;\r\n    isSelected: boolean;\r\n    onSelect: (unit: Unit, index: number) => void\r\n}\r\n\r\nexport class BenchSlot extends React.Component<BenchSlotProps> {\r\n    public render() {\r\n        const { unit, index, onSelect, isSelected } = this.props;\r\n        const selectedClass = isSelected ? 'selected' : '';\r\n        return (\r\n            <div className={`bench-slot ${selectedClass}`} onClick={() => onSelect(unit, index)}>\r\n                {Boolean(unit) && <Champion unit={unit} />}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { BenchSlot } from './bench-slot';\r\nimport './bench.scss';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { UnitSelection, Unit } from '../../stores/types';\r\ninterface BenchProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Bench extends React.Component<BenchProps> {\r\n    public render() {\r\n        const { draft } = this.props;\r\n        const { benchedUnits, selectedUnit } = draft;\r\n        const selectedBenchIndex = (selectedUnit !== undefined && selectedUnit.isBenched) ? selectedUnit.index : -1;\r\n\r\n        return (\r\n            <div className=\"bench\">\r\n                {benchedUnits.map((unit, index) => <BenchSlot\r\n                    unit={unit}\r\n                    index={index}\r\n                    isSelected={selectedBenchIndex === index}\r\n                    onSelect={(unit, index) => this.onSelectUnit(unit, index)}\r\n                    key={ `${unit ? unit.champ.id + '_' + unit.tier : 'blank'}_${index}`}\r\n                />)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onSelectUnit(unit: Unit, index: number) {\r\n        const { draft } = this.props;\r\n        if(!unit) {\r\n            draft.moveSelectedUnitToBench(index);\r\n            return;\r\n        }\r\n        \r\n        const selection = {\r\n            unit,\r\n            index,\r\n            isBenched: true\r\n        } as UnitSelection;\r\n\r\n        draft.toggleSelectedUnit(selection);\r\n    }\r\n}","import * as React from 'react';\r\nimport './coin.scss'\r\nexport class Coin extends React.Component{\r\n    public render() {\r\n        return (\r\n            <i className=\"coin\">\r\n                <span className=\"a11y\">Coin</span>\r\n            </i>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\nimport { ChampCard } from '../../stores/types';\r\nimport { Coin } from '../shared/coin';\r\n\r\ninterface CardProps {\r\n    card: ChampCard;\r\n    action: (card: ChampCard) => void;\r\n}\r\n\r\nexport class Card extends React.Component<CardProps> {\r\n\r\n    public render() {\r\n        const { card, action } = this.props;\r\n        const { name, cost, id, classes } = card.champ;\r\n\r\n        const style = {\r\n            backgroundImage: `url('img/champ-square/${id}.png')`\r\n        };\r\n\r\n        return (\r\n            <div className={`champ-card champ-cost-${cost}`} onClick={() => action(card)}>\r\n                <div className=\"decoration\"></div>\r\n                <div className={`hero champ-bg-${id}`} style={style}>\r\n                    {classes.map(x => <div className=\"champ-class\" key={x}>{x}</div>)}\r\n                </div>\r\n                <div className={`banner banner-cost-${cost}`}>\r\n                    <div className=\"name\">{name}</div>\r\n                    <div className=\"cost\">\r\n                        <span>\r\n                            <Coin />\r\n                            {cost}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\n\r\nexport class BlankCard extends React.Component {\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"champ-card blank\">\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Card } from './card';\r\nimport { BlankCard } from './blank-card';\r\nimport { observer } from 'mobx-react';\r\nimport { ChampCard } from '../../stores/types';\r\n\r\n\r\ninterface HandProps {\r\n    hand: ChampCard[];\r\n    action: (card: ChampCard) => void;\r\n}\r\n\r\n\r\n@observer\r\n export class Hand extends React.Component<HandProps> {\r\n\r\n    public render() {\r\n        const { hand, action } = this.props;\r\n\r\n        return (\r\n            <div className=\"hand\">\r\n                {hand.map( (card, index) => Boolean(card) ? \r\n                    <Card card={card} key={card.guid} action={action}/> :\r\n                    <BlankCard key={index + '-blank'} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import { observable, action } from 'mobx';\r\n\r\nimport * as tiers from '../data/tiers.json';\r\nimport * as levels from '../data/levels.json';\r\nimport * as champions from '../data/champions.json';\r\nimport { Unit, ChampData, ChampCard, UnitSelection, BoardUnit } from './types';\r\nimport { BOARD_WIDTH, BOARD_HEIGHT } from '../utils';\r\n\r\n\r\nexport class DraftStore {\r\n\r\n    public static REFRESH_COST = 2;\r\n    public static BUY_XP_COST = 4;\r\n    public static BENCH_SIZE = 9;\r\n    public static XP_PER_ROUND = 2;\r\n\r\n    @observable\r\n    pool: ChampCard[];\r\n\r\n    @observable\r\n    currentHand: (ChampCard | null)[];\r\n\r\n    @observable\r\n    benchedUnits: (Unit | null)[] = [];\r\n\r\n    @observable\r\n    boardUnits: BoardUnit[] = [];\r\n\r\n    @observable\r\n    xp: number = 0;\r\n\r\n    @observable\r\n    nextLevelXp: number = 2;\r\n\r\n    @observable\r\n    level: number = 1;\r\n\r\n    @observable\r\n    gold: number = 3;\r\n\r\n    @observable\r\n    isHandLocked: boolean = false;\r\n\r\n    @observable\r\n    goldPerRound: number = 8;\r\n\r\n    @observable\r\n    selectedUnit?: UnitSelection = undefined;\r\n\r\n    constructor() {\r\n        this.pool = [];\r\n        this.currentHand = [];\r\n        this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n        this.benchedUnits = [...Array(DraftStore.BENCH_SIZE)].fill(null);\r\n        this.boardUnits = [...Array(BOARD_WIDTH * BOARD_HEIGHT)].map(\r\n            (_, index) => ({ unit: undefined, index } as BoardUnit)\r\n        );\r\n    }\r\n\r\n    @action\r\n    public toggleSelectedUnit(selection: UnitSelection) {\r\n\r\n        if(this.selectedUnit === undefined) {\r\n            this.selectedUnit = selection;\r\n            console.log(\"Selected\", selection.unit);\r\n            return;\r\n        }\r\n        \r\n        const isSameUnit = this.selectedUnit !== undefined && selection.index === this.selectedUnit.index;\r\n\r\n        //Click the same unit twice to Deselect it.\r\n        //Click 2 different units to swap their positions\r\n        if(isSameUnit) { \r\n            this.selectedUnit = undefined;\r\n            console.log(\"Deselected\", selection.unit.champ.name);\r\n        } else {\r\n           if(this.selectedUnit.isBenched) {\r\n               this.moveUnitToBench(selection.unit, this.selectedUnit.index);\r\n           } else {\r\n               this.moveUnitToBoard(selection.unit, this.selectedUnit.index);\r\n           }\r\n\r\n           if(selection.isBenched) {\r\n                this.moveUnitToBench(this.selectedUnit.unit, selection.index);\r\n            } else {\r\n               this.moveUnitToBoard(this.selectedUnit.unit, selection.index);\r\n            }\r\n\r\n            this.selectedUnit = undefined;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public moveSelectedUnitToBench(index: number) {\r\n        if(this.selectedUnit === undefined || this.selectedUnit.unit === null) { return; }\r\n        //Remove selected unit from current space;\r\n        if(this.selectedUnit.isBenched) {\r\n            this.benchedUnits[this.selectedUnit.index] = null;\r\n        } else {\r\n            this.boardUnits[this.selectedUnit.index].unit = undefined;\r\n        }\r\n        //Move into new space\r\n        this.moveUnitToBench(this.selectedUnit.unit, index);\r\n\r\n        //Remove selection\r\n        this.selectedUnit = undefined;\r\n    }\r\n\r\n    @action\r\n    public moveSelectedUnitToBoard(index: number) {\r\n        if(this.selectedUnit === undefined || this.selectedUnit.unit === null) { return; }\r\n\r\n        //Remove the selected unit from current space\r\n        if(this.selectedUnit.isBenched) {\r\n            this.benchedUnits[this.selectedUnit.index] = null;\r\n        } else {\r\n            this.boardUnits[this.selectedUnit.index].unit = undefined;\r\n        }\r\n\r\n        //Move into new space\r\n        this.moveUnitToBoard(this.selectedUnit.unit, index);\r\n\r\n        //Remove selection\r\n        this.selectedUnit = undefined;\r\n    }\r\n\r\n    @action\r\n    private moveUnitToBench(unit: Unit, index: number) {\r\n        this.benchedUnits[index] = unit;\r\n    }\r\n\r\n    @action\r\n    private moveUnitToBoard(unit: Unit, index: number) {\r\n        const newBoardUnit = { index, unit } as BoardUnit;\r\n        this.boardUnits[index] = newBoardUnit;\r\n    }\r\n\r\n    @action\r\n    public toggleHandLock() {\r\n        this.isHandLocked = !this.isHandLocked;\r\n    }\r\n\r\n    @action\r\n    public nextRound() {\r\n        this.gold += this.goldPerRound\r\n        this.addXP(DraftStore.XP_PER_ROUND);\r\n        if(!this.isHandLocked) {\r\n            this.gold += DraftStore.REFRESH_COST;\r\n            this.refreshHand();    \r\n        }\r\n    }\r\n\r\n    @action\r\n    public refreshHand() {\r\n        if (this.gold < DraftStore.REFRESH_COST) {\r\n            console.log(\"You cannot afford to refresh\");\r\n            return;\r\n        }\r\n\r\n        //Return hand to pool\r\n        this.currentHand.forEach(card => {\r\n            if(card) {\r\n                this.pool.push(card);\r\n            }\r\n        });\r\n\r\n        this.currentHand = [];\r\n\r\n        this.drawHand();\r\n        this.gold -= DraftStore.REFRESH_COST;\r\n    }\r\n\r\n    @action\r\n    public buyXP() {\r\n        if(this.gold < DraftStore.BUY_XP_COST) {\r\n            console.log(\"You cannot afford to buy XP\");\r\n            return;\r\n        }\r\n        this.addXP(4);\r\n        this.gold -= DraftStore.BUY_XP_COST;\r\n    }\r\n\r\n    @action\r\n    public addXP(amount: number) {\r\n        this.xp += amount;\r\n        //Level Up\r\n        if(this.xp >= this.nextLevelXp) {\r\n            this.xp = this.xp - this.nextLevelXp;\r\n            this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n            this.level += 1;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public drawHand() {\r\n        while(this.currentHand.length < 5) {\r\n            this.drawCard();\r\n        }\r\n    }\r\n\r\n    @action\r\n    public drawCard() {\r\n        const key = `level${this.level}`;\r\n        \r\n        const odds = (levels.levels as any)[key].tierOdds;\r\n        const roll = Math.random();\r\n\r\n        const cost = this.getCost(roll, odds);\r\n\r\n        const cardSet = this.pool.filter(x => x.champ.cost === cost);\r\n        const index = Math.floor(Math.random() * cardSet.length);\r\n        const card = cardSet[index];\r\n\r\n        this.currentHand.push(card);\r\n        this.pool.splice(index, 1);\r\n        console.log(`Your new card: ${card.champ.name}`);\r\n    }\r\n\r\n    @action\r\n    public initializePool() {\r\n        this.pool = champions.champions.flatMap(champ => {\r\n            const poolSize = this.getInitialPoolSizeForChamp(champ.id);\r\n            return [...Array(poolSize)].map((_, index) => ({\r\n                champ,\r\n                guid: champ.id + \"_\" + index\r\n            } as ChampCard));            \r\n        });\r\n    }\r\n\r\n    @action\r\n    public buyCard(card: ChampCard) {\r\n\r\n        if(!card || !card.champ) {\r\n            return;\r\n        }\r\n\r\n        const { guid, champ } = card;\r\n        \r\n        console.log(\"DraftStore::buyCard\", champ);\r\n        let cost = champ.cost;\r\n        let removeExtra = false;\r\n\r\n        if(this.gold < champ.cost) {\r\n            console.log(`You cannot afford to buy ${champ.name} for ${champ.cost} coins`);\r\n            return;\r\n        }\r\n\r\n        /* Several cases:\r\n        1. Player has empty space for unit, all good\r\n        2. Player has no empty space, but has 2 units of the same type at tier 1 already, merge to free up space\r\n        3. Player has no empty space, but has 1 unit of the same type at tier 1,\r\n           and the hand has 2 of that same champ\r\n           3a. If they have the gold to buy 2, buy both and merge to free up space\r\n           3b. If they don't have the gold, abort\r\n        */\r\n\r\n\r\n        //Add unit to bench\r\n        const firstEmpty = this.benchedUnits.findIndex(x => x === null);\r\n        //Case 1\r\n        if(firstEmpty >= 0) {\r\n            this.benchedUnits[firstEmpty] = ({\r\n                tier: 1,\r\n                champ\r\n            });\r\n\r\n        } else {\r\n            const matchingBenchUnits = this.benchedUnits\r\n                .filter(unit => unit !== null && unit.tier === 1 && unit.champ.id === champ.id);\r\n            const matchingBoardUnits = this.boardUnits\r\n                .map(bu => bu.unit || null)\r\n                .filter(unit => unit !== null && unit.tier === 1 && unit.champ.id === champ.id);\r\n\r\n            const matchingUnits = [...matchingBenchUnits, ...matchingBoardUnits];\r\n\r\n            const availableToBuy = this.currentHand\r\n                .filter(card => card != null && card.champ.id === champ.id) as ChampCard[];\r\n\r\n            //Case 2\r\n            if (matchingUnits.length === 2) {\r\n                this.mergeUnits(1, availableToBuy); //Upgrade\r\n            } else if (matchingUnits.length === 1 && availableToBuy.length >= 2) {\r\n                if(this.gold >= champ.cost * 2) { //3a\r\n                    cost *= 2; //Increase Cost\r\n                    this.mergeUnits(1, availableToBuy); //Upgrade\r\n                    removeExtra = true; //Flag that theres a 2nd card to remove\r\n                } else { //3b\r\n                    console.log(\"You don't have space and can't afford to buy 2 of unit: \", champ.name);\r\n                    return;\r\n                }\r\n            } else {\r\n                \r\n                console.log(\"You don't have space to buy this unit: \", champ.name);\r\n                return;\r\n            }\r\n        }\r\n\r\n        //Remove card\r\n        const index = this.currentHand.findIndex(c => c != null && c.guid === guid);\r\n        this.currentHand[index] = null;\r\n\r\n        //Remove 2nd card if needed\r\n        if(removeExtra) {\r\n            const index = this.currentHand.findIndex(card => card != null && card.champ.id === champ.id);\r\n            this.currentHand[index] = null;    \r\n        }\r\n\r\n        //Merge Units\r\n        this.mergeUnits(1);\r\n\r\n        //Pay money\r\n        this.gold -= cost;\r\n    }\r\n\r\n    @action\r\n    private mergeUnits(tier: number = 1, extraCards: ChampCard[] = []) {\r\n        const extraUnits: Unit[] = extraCards.map(card => ({champ: card.champ, tier: 1}));\r\n        const boardUnits: (Unit|null)[] = this.boardUnits.map(bu => bu.unit || null);\r\n        const totalUnits: (Unit|null)[] = [...this.benchedUnits, ...boardUnits, ...extraUnits];\r\n\r\n        const onlyCurrentTier = totalUnits.filter(c => c!== null && c.tier === tier) as Unit[];\r\n        \r\n        //Remap to count champions\r\n        const champCount = onlyCurrentTier.reduce((m: object, unit: Unit) => {\r\n            const id = unit.champ.id;\r\n            const val = (m as any)[id];\r\n            if (!val) {\r\n                (m as any)[id] = 1;\r\n            } else {\r\n                (m as any)[id] = val+1;\r\n            }\r\n            return m;\r\n        }, {});\r\n\r\n        //Find champs to merge\r\n        const idsToMerge = Object.keys(champCount).filter(x => (champCount as any)[x] >= 3);\r\n\r\n        //Merge and upgrade the champs\r\n        idsToMerge.forEach(id => {\r\n            const champ = (champions.champions as ChampData[]).find(c => c.id === id);\r\n            \r\n            let index = -1;\r\n            //Remove all of that unit from bench\r\n            while(-1 !== (index = this.benchedUnits.findIndex(unit => \r\n                unit !== null &&\r\n                unit.champ.id === id &&\r\n                unit.tier === tier\r\n            ))) {\r\n                this.benchedUnits[index] = null;\r\n            }\r\n\r\n            //Remove all of that unit from the board\r\n            index = -1;\r\n            let boardIndex = 1;\r\n            while(-1 !== (index = this.boardUnits.findIndex(boardUnit => \r\n                boardUnit.unit !== undefined &&\r\n                boardUnit.unit.champ.id === id &&\r\n                boardUnit.unit.tier === tier\r\n            ))) {\r\n                this.boardUnits[index].unit = undefined;\r\n                boardIndex = index;\r\n            }\r\n\r\n            //Add upgraded unit\r\n            //Priorise returning to board\r\n            if(boardIndex !== -1) {\r\n                this.boardUnits[boardIndex].unit = {\r\n                    tier: tier + 1,\r\n                    champ\r\n                } as Unit;\r\n            } else {\r\n                const firstEmpty = this.benchedUnits.findIndex(x => x === null);\r\n                this.benchedUnits[firstEmpty] = {\r\n                    tier: tier + 1,\r\n                    champ\r\n                } as Unit;    \r\n            }\r\n        });\r\n\r\n        if (tier === 1) {\r\n            this.mergeUnits(2);\r\n        }\r\n    }\r\n\r\n    private getXpForLevelUp(currentLevel: number) {\r\n        return (levels.levels as any)[`level${currentLevel}`].xp;\r\n    }\r\n\r\n    private getInitialPoolSizeForChamp(id: string): number {\r\n        const champ = champions.champions.find(x => x.id === id);\r\n        if(champ == null) { return 0; }\r\n\r\n        switch(champ.cost) {\r\n            case 1: return tiers.unitsPerTier.tier1;\r\n            case 2: return tiers.unitsPerTier.tier2;\r\n            case 3: return tiers.unitsPerTier.tier3;\r\n            case 4: return tiers.unitsPerTier.tier4;\r\n            case 5: return tiers.unitsPerTier.tier5;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    private getCost(roll: number, odds: number[]) {\r\n        let total = 0;\r\n        let index = 0;\r\n       console.log(`You rolled: ${roll}`, odds);\r\n        while(total < roll) {\r\n            total += odds[index];\r\n            ++index;\r\n            console.log(`Total odds for cost ${index} unit: ${total}`);\r\n        }\r\n        console.log(`You're getting as ${index} cost unit`);\r\n\r\n        return index;\r\n    }\r\n\r\n    private getUnitsByCost(cost: number) {\r\n        return champions.champions.filter(champ => champ.cost === cost);\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport './draft.scss';\r\nimport { Hand } from './hand';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { inject } from 'mobx-react';\r\nimport { observer } from 'mobx-react';\r\nimport { Coin } from '../shared/coin';\r\nimport { ChampCard } from '../../stores/types';\r\n\r\ninterface DraftProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Draft extends React.Component<DraftProps> {\r\n    public render() {\r\n        const { draft } = this.props;\r\n        const { currentHand, gold, xp, nextLevelXp, level } = draft;\r\n        const progress = xp/nextLevelXp * 100;\r\n        const progressStyle = {\r\n            transform: `translateX(${-100 + progress}%)`\r\n        }\r\n\r\n        const lockClass = draft.isHandLocked ? 'closed' : 'open';\r\n\r\n        return (\r\n            <div className=\"draft\">\r\n                <div className=\"draft-sidebar draft-area\">\r\n                    <div className=\"draft-lock above-bar\" onClick={() => draft.toggleHandLock()}>\r\n                        <div className={`lock ${lockClass}`}></div>\r\n                    </div>\r\n                    <div className=\"draft-sidebar-items\">\r\n                        <div className=\"sidebar-item refresh clickable\" onClick={() => draft.refreshHand()}>\r\n                            <div className=\"refresh-panel\">\r\n                                <div className=\"content\">\r\n                                    <div>Refresh</div>\r\n                                    <div><Coin /> {DraftStore.REFRESH_COST}</div>\r\n                                </div>\r\n                                <div className=\"icon\" style={{backgroundImage: \"url(img/refresh.png)\"}}>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"sidebar-item xp clickable\" onClick={() => draft.buyXP()}>\r\n                            <div className=\"xp-panel\">\r\n                                <div className=\"details\">\r\n                                    <div className=\"content\">\r\n                                        <div className=\"label\">Buy XP</div>\r\n                                        <div className=\"sub-label\">\r\n                                            <Coin />{DraftStore.BUY_XP_COST}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"icon\" style={{backgroundImage: \"url(img/level-up.png)\"}}></div>\r\n                                </div>\r\n                                <div className=\"xp-progress\">\r\n                                    <div className=\"xp-label\">{xp}/{nextLevelXp}</div>\r\n                                    <div className=\"xp-progress-bar\">\r\n                                        <div className=\"bar\">\r\n                                            <div className=\"fill\" style={progressStyle}></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"level\">{level}</div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"draft-main draft-area\">\r\n                    <div className=\"draft-gold-bar above-bar\">\r\n                        <div className=\"draft-gold\">\r\n                            <Coin/>{gold}\r\n                        </div>\r\n                    </div>\r\n                    <Hand hand={currentHand} action={x => this.buyCard(x)} />\r\n                </div>\r\n            </div>            \r\n        );\r\n    }\r\n\r\n    private buyCard(card: ChampCard) {\r\n        console.log(\"Attempting to buy champ\", card.champ.name);\r\n        this.props.draft.buyCard(card);\r\n    }\r\n}","import * as React from 'react';\r\nimport { Board } from './board/board';\r\nimport { Bench } from './bench/bench';\r\nimport { Draft } from './hand/draft';\r\n\r\nimport { DraftStore } from '../stores/draft-store';\r\nimport { observable } from 'mobx';\r\n\r\nimport * as ChampionsData from '../data/champions.json';\r\nimport { Provider } from 'mobx-react';\r\nexport class MainPage extends React.Component {\r\n\r\n    @observable\r\n    draftStore: DraftStore = null;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.draftStore = new DraftStore();\r\n\r\n        this.draftStore.initializePool();\r\n        this.draftStore.drawHand();\r\n        console.log(this.draftStore);\r\n\r\n        window[\"champions\"] = ChampionsData;\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <section className=\"main-page\">\r\n                <Provider draft={this.draftStore} >\r\n                    <>\r\n                        <button onClick={() => this.draftStore.nextRound()}>Next Round</button>\r\n                        <Board />\r\n                        <Bench />\r\n                        <Draft />\r\n                    </>\r\n                </Provider>\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { MainPage } from './components/main-page';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"theory-draft app\">\r\n      <main>\r\n        <MainPage />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}