{"version":3,"sources":["components/champion/champion.tsx","components/board/cell.tsx","utils.ts","components/board/board.tsx","components/bench/bench-slot.tsx","components/bench/bench.tsx","stores/draft-store.ts","components/shared/coin.tsx","components/draft/sidebar/draft-sidebar.tsx","components/draft/card.tsx","components/draft/blank-card.tsx","components/draft/hand.tsx","components/draft/draft-main.tsx","components/draft/draft-sell.tsx","components/draft/draft.tsx","components/synergies/synergy-item.tsx","components/synergies/synergy-tier.tsx","components/synergies/synergies-bar.tsx","components/simulation/simulation.tsx","components/main-page.tsx","App.js","serviceWorker.js","index.js"],"names":["Champion","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","unit","props","champ","stars","getTierString","style","backgroundImage","concat","process","id","react","className","name","tier","React","Cell","_this$props","boardUnit","onSelect","onClick","champion_Champion","BOARD_WIDTH","BOARD_HEIGHT","Board","inject","_dec","_class","observer","call","_this","draft","rows","toConsumableArray","Array","map","_","index","getRow","row","renderRow","i","start","end","boardUnits","slice","_this2","isOdd","bu","cell_Cell","getKey","x","undefined","console","log","selection","isBenched","toggleSelectedUnit","moveSelectedUnitToBoard","BenchSlot","selectedClass","isSelected","Boolean","Bench","bench_dec","bench_class","benchedUnits","selectedUnit","selectedBenchIndex","bench_slot_BenchSlot","onSelectUnit","moveSelectedUnitToBench","DraftStore","_temp","_class2","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","pool","currentHand","nextLevelXp","getXpForLevelUp","level","BENCH_SIZE","fill","moveUnitToBench","moveUnitToBoard","placedUnitCount","newBoardUnit","isHandLocked","roundCount","gold","calculateIncome","addXP","XP_PER_ROUND","REFRESH_COST","refreshHand","calculatePassiveIncome","calculateInterest","Math","min","floor","MAXIMIM_INTEREST","forEach","card","push","drawHand","BUY_XP_COST","amount","xp","getUnitSalePrice","tierBonus","cost","length","drawCard","odds","levels","tierOdds","roll","random","getCost","cardSet","filter","splice","champions","flatMap","poolSize","getInitialPoolSizeForChamp","guid","removeExtra","firstEmpty","findIndex","matchingBenchUnits","matchingBoardUnits","matchingUnits","availableToBuy","mergeUnits","c","_this3","extraUnits","champCount","reduce","m","val","keys","find","boardIndex","currentLevel","tiers","tier1","tier2","tier3","tier4","tier5","total","get","champIds","classCounts","Set","classes","sort","obj","_this4","unitSynergies","synergyData","synergies","count","medalIndex","stages","exact","active","objectSpread","draft_store_class","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","computed","Coin","DraftSidebar","draft_sidebar_class","hideAboveBar","progressStyle","transform","lockClass","toggleHandLock","coin_Coin","buyXP","Card","_card$champ","BlankCard","Hand","hand_class","hand","card_Card","blank_card_BlankCard","DraftMain","draft_main_class","hand_Hand","buyCard","DraftSell","draft_sell_class","sellSelectedUnit","Draft","draft_dec","draft_class","showSell","draft_sidebar_DraftSidebar","draft_main_DraftMain","draft_sell_DraftSell","SynergyItem","synergy_item_class","synergy","currentBonusIndex","nextBonus","alt","src","SynergyTier","synergy_tier_class","s","synergy_item_SynergyItem","SynergiesBar","synergies_bar_class","getSynergiesOfTier","synergy_tier_SynergyTier","unitSynergiesWithTiers","Simulation","simulation_dec","simulation_class","synergies_bar_SynergiesBar","nextRound","MainPage","main_page_class","main_page_descriptor","assertThisInitialized","draftStore","initializePool","window","ChampionsData","mobx_react_module","simulation_Simulation","board_Board","bench_Bench","draft_Draft","App","react_default","a","createElement","main_page_MainPage","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s2KAOaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEoB,IACJC,EAAST,KAAKU,MAAdD,KACAE,EAAUF,EAAVE,MAEFC,EAAQZ,KAAKa,cAAcJ,GAE3BK,EAAQ,CACVC,gBAAe,OAAAC,OAASC,gBAAT,sBAAAD,OAAoDL,EAAMO,GAA1D,UAGnB,OACIC,EAAA,qBAAKC,UAAU,WAAWN,MAAOA,GAC7BK,EAAA,qBAAKC,UAAU,iBAAiBR,GAChCO,EAAA,qBAAKC,UAAU,iBAAiBT,EAAMU,SAftD,CAAAd,IAAA,gBAAAC,MAAA,SAoB0BC,GAClB,OAAOA,EAAKa,MACR,KAAK,EAAG,MAAO,SACf,KAAK,EAAG,MAAO,eACf,KAAK,EAAG,MAAO,0BAxB3B1B,EAAA,CAA8B2B,aCEjBC,EAAb,SAAA3B,GAAA,SAAA2B,IAAA,OAAA1B,OAAAC,EAAA,EAAAD,CAAAE,KAAAwB,GAAA1B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0B,GAAArB,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA0B,EAAA3B,GAAAC,OAAAQ,EAAA,EAAAR,CAAA0B,EAAA,EAAAjB,IAAA,SAAAC,MAAA,WACoB,IAAAiB,EACoBzB,KAAKU,MAA7BgB,EADID,EACJC,UAAWC,EADPF,EACOE,SACXlB,EAASiB,EAATjB,KAER,OACIU,EAAA,qBAAKC,UAAU,OAAOQ,QAAS,kBAAMD,EAASD,KAC1CP,EAAA,qBAAKC,UAAU,YACVX,GAAQU,EAAA,cAACU,EAAD,CAAUpB,KAAMA,UAR7Ce,EAAA,CAA0BD,oBCPbO,SAAc,GACdC,EAAe,ECWfC,EAFZC,YAAO,QAERC,CAAAC,EADCC,YACDD,EAAA,SAAAtC,GAEI,SAAAmC,EAAmBtB,GAAoB,OAAAZ,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,GAAAlC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAAK,KAAArC,KAC7BU,IAHd,OAAAZ,OAAAO,EAAA,EAAAP,CAAAkC,EAAAnC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAkC,EAAA,EAAAzB,IAAA,SAAAC,MAAA,WAMoB,IAAA8B,EAAAtC,KAGZ,GAFkBA,KAAKU,MAAf6B,MAER,CAEA,IAAMC,EAAO1C,OAAA2C,EAAA,EAAA3C,CAAI4C,MAAMX,IAAeY,IAAI,SAACC,EAAGC,GAAJ,OAAcP,EAAKQ,OAAOD,EAAQ,KAE5E,OACI1B,EAAA,qBAAKC,UAAU,SACVoB,EAAKG,IAAI,SAACI,EAAkBF,GAAnB,OAAqCP,EAAKU,UAAUD,EAAKF,SAfnF,CAAAtC,IAAA,SAAAC,MAAA,SAoBmByC,GAAwB,IAC3BV,EAAUvC,KAAKU,MAAf6B,MACFW,EAAQpB,GAAemB,EAAI,GAC3BE,EAAMrB,EAAcmB,EAE1B,OAAOV,EAAMa,WAAWC,MAAMH,EAAOC,KAzB7C,CAAA5C,IAAA,YAAAC,MAAA,SA6BsB4C,EAAyBL,GAAa,IAAAO,EAAAtD,KAC9CuD,EAAQR,EAAI,IAAM,EACxB,OACI5B,EAAA,qBAAKC,UAAU,aAAab,IAAKwC,GAC5BQ,GAASpC,EAAA,qBAAKC,UAAU,8BACxBgC,EAAWT,IAAI,SAAAa,GAAE,OACdrC,EAAA,cAACsC,EAAD,CAAMlD,IAAK+C,EAAKI,OAAOF,GAAK9B,UAAW8B,EAAI7B,SAAU,SAAAgC,GAAC,OAAIL,EAAK3B,SAASgC,SAE1EJ,GAASpC,EAAA,qBAAKC,UAAU,kCArC1C,CAAAb,IAAA,SAAAC,MAAA,SA0CmBkB,GAA8B,IACjCjB,EAAgBiB,EAAhBjB,KAAMoC,EAAUnB,EAAVmB,MACd,YAAYe,IAATnD,EACC,SAAAO,OAAgB6B,GAEhB,GAAA7B,OAAUP,EAAKE,MAAMO,GAArB,KAAAF,OAA2BP,EAAKa,KAAhC,KAAAN,OAAwC6B,KA/CpD,CAAAtC,IAAA,WAAAC,MAAA,SAmDqBkB,GAAsB,IAC3Ba,EAAUvC,KAAKU,MAAf6B,MAIR,GAFAsB,QAAQC,IAAI,sBAAuBpC,QAEbkC,IAAnBlC,EAAUjB,KAAb,CAKA,IAAMsD,EAAY,CACdtD,KAAMiB,EAAUjB,KAChBoC,MAAOnB,EAAUmB,MACjBmB,WAAW,GAGfzB,EAAM0B,mBAAmBF,QAVrBxB,EAAM2B,wBAAwBxC,EAAUmB,WAzDpDb,EAAA,CAA2BT,eAA3BY,MCHagC,EAAb,SAAAtE,GAAA,SAAAsE,IAAA,OAAArE,OAAAC,EAAA,EAAAD,CAAAE,KAAAmE,GAAArE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqE,GAAAhE,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAqE,EAAAtE,GAAAC,OAAAQ,EAAA,EAAAR,CAAAqE,EAAA,EAAA5D,IAAA,SAAAC,MAAA,WACoB,IAAAiB,EACkCzB,KAAKU,MAA3CD,EADIgB,EACJhB,KAAMoC,EADFpB,EACEoB,MAAOlB,EADTF,EACSE,SACfyC,EAFM3C,EACmB4C,WACI,WAAa,GAChD,OACIlD,EAAA,qBAAKC,UAAS,cAAAJ,OAAgBoD,GAAiBxC,QAAS,kBAAMD,EAASlB,EAAMoC,KACxEyB,QAAQ7D,IAASU,EAAA,cAACU,EAAD,CAAUpB,KAAMA,SANlD0D,EAAA,CAA+B5C,aCClBgD,SAFZtC,YAAO,QAERuC,CAAAC,EADCrC,YACDqC,EAAA,SAAA5E,GAAA,SAAA0E,IAAA,OAAAzE,OAAAC,EAAA,EAAAD,CAAAE,KAAAuE,GAAAzE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyE,GAAApE,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAyE,EAAA1E,GAAAC,OAAAQ,EAAA,EAAAR,CAAAyE,EAAA,EAAAhE,IAAA,SAAAC,MAAA,WACoB,IAAA8B,EAAAtC,KACJuC,EAAUvC,KAAKU,MAAf6B,MACAmC,EAA+BnC,EAA/BmC,aAAcC,EAAiBpC,EAAjBoC,aAChBC,OAAuChB,IAAjBe,GAA8BA,EAAaX,UAAaW,EAAa9B,OAAS,EAE1G,OACI1B,EAAA,qBAAKC,UAAU,SACVsD,EAAa/B,IAAI,SAAClC,EAAMoC,GAAP,OAAiB1B,EAAA,cAAC0D,EAAD,CAC/BpE,KAAMA,EACNoC,MAAOA,EACPwB,WAAYO,IAAuB/B,EACnClB,SAAU,SAAClB,EAAMoC,GAAP,OAAiBP,EAAKwC,aAAarE,EAAMoC,IACnDtC,IAAG,GAAAS,OAAMP,EAAOA,EAAKE,MAAMO,GAAK,IAAMT,EAAKa,KAAO,QAA/C,KAAAN,OAA0D6B,UAbjF,CAAAtC,IAAA,eAAAC,MAAA,SAmByBC,EAAYoC,GAAe,IACpCN,EAAUvC,KAAKU,MAAf6B,MACR,GAAI9B,EAAJ,CAKA,IAAMsD,EAAY,CACdtD,OACAoC,QACAmB,WAAW,GAGfzB,EAAM0B,mBAAmBF,QAVrBxB,EAAMwC,wBAAwBlC,OAtB1C0B,EAAA,CAA2BhD,eAA3BkD,8ECFaO,IAAbC,EAAAC,EAAA,WAyCI,SAAAF,IAAelF,OAAAC,EAAA,EAAAD,CAAAE,KAAAgF,GAAAlF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,OAAAoF,EAAApF,MAAAF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,cAAAqF,EAAArF,MAAAF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,eAAAsF,EAAAtF,MAAAF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,aAAAuF,EAAAvF,MAAAF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,KAAAwF,EAAAxF,MAAAF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,cAAAyF,EAAAzF,MAAAF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,QAAA0F,EAAA1F,MAAAF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,OAAA2F,EAAA3F,MAAAF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,eAAA4F,EAAA5F,MAAAF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,eAAA6F,EAAA7F,MAAAF,OAAAqF,EAAA,EAAArF,CAAAE,KAAA,aAAA8F,EAAA9F,MACXA,KAAK+F,KAAO,GACZ/F,KAAKgG,YAAc,GACnBhG,KAAKiG,YAAcjG,KAAKkG,gBAAgBlG,KAAKmG,MAAQ,GACrDnG,KAAK0E,aAAe5E,OAAA2C,EAAA,EAAA3C,CAAI4C,MAAMsC,EAAWoB,aAAaC,KAAK,MAC3DrG,KAAKoD,WAAatD,OAAA2C,EAAA,EAAA3C,CAAI4C,MAAMZ,EAAcC,IAAeY,IACrD,SAACC,EAAGC,GAAJ,MAAe,CAAEpC,UAAMmD,EAAWf,WA/C9C,OAAA/C,OAAAQ,EAAA,EAAAR,CAAAkF,EAAA,EAAAzE,IAAA,qBAAAC,MAAA,SAoD8BuD,GAEtB,QAAyBH,IAAtB5D,KAAK2E,aAGJ,OAFA3E,KAAK2E,aAAeZ,OACpBF,QAAQC,IAAI,WAAYC,EAAUtD,WAIGmD,IAAtB5D,KAAK2E,cAA8BZ,EAAUlB,QAAU7C,KAAK2E,aAAa9B,OAKxF7C,KAAK2E,kBAAef,EACpBC,QAAQC,IAAI,aAAcC,EAAUtD,KAAKE,MAAMU,QAE7CrB,KAAK2E,aAAaX,UACjBhE,KAAKsG,gBAAgBvC,EAAUtD,KAAMT,KAAK2E,aAAa9B,OAEvD7C,KAAKuG,gBAAgBxC,EAAUtD,KAAMT,KAAK2E,aAAa9B,OAGxDkB,EAAUC,UACRhE,KAAKsG,gBAAgBtG,KAAK2E,aAAalE,KAAMsD,EAAUlB,OAExD7C,KAAKuG,gBAAgBvG,KAAK2E,aAAalE,KAAMsD,EAAUlB,OAG1D7C,KAAK2E,kBAAef,KAhFhC,CAAArD,IAAA,0BAAAC,MAAA,SAkImCqC,QACFe,IAAtB5D,KAAK2E,cAAyD,OAA3B3E,KAAK2E,aAAalE,OAErDT,KAAK2E,aAAaX,UACjBhE,KAAK0E,aAAa1E,KAAK2E,aAAa9B,OAAS,KAE7C7C,KAAKoD,WAAWpD,KAAK2E,aAAa9B,OAAOpC,UAAOmD,EAGpD5D,KAAKsG,gBAAgBtG,KAAK2E,aAAalE,KAAMoC,GAG7C7C,KAAK2E,kBAAef,KA9I5B,CAAArD,IAAA,0BAAAC,MAAA,SAkJmCqC,QACFe,IAAtB5D,KAAK2E,cAAyD,OAA3B3E,KAAK2E,aAAalE,OAErDT,KAAKwG,iBAAmBxG,KAAKmG,MAC5BtC,QAAQC,IAAI,mEAKb9D,KAAK2E,aAAaX,UACjBhE,KAAK0E,aAAa1E,KAAK2E,aAAa9B,OAAS,KAE7C7C,KAAKoD,WAAWpD,KAAK2E,aAAa9B,OAAOpC,UAAOmD,EAIpD5D,KAAKuG,gBAAgBvG,KAAK2E,aAAalE,KAAMoC,GAG7C7C,KAAK2E,kBAAef,MArK5B,CAAArD,IAAA,kBAAAC,MAAA,SAyK4BC,EAAYoC,GAChC7C,KAAK0E,aAAa7B,GAASpC,IA1KnC,CAAAF,IAAA,kBAAAC,MAAA,SA8K4BC,EAAYoC,GAChC,IAAM4D,EAAe,CAAE5D,QAAOpC,QAC9BT,KAAKoD,WAAWP,GAAS4D,IAhLjC,CAAAlG,IAAA,iBAAAC,MAAA,WAqLQR,KAAK0G,cAAgB1G,KAAK0G,eArLlC,CAAAnG,IAAA,YAAAC,MAAA,WA0LQR,KAAK2G,YAAc,EACnB3G,KAAK4G,MAAQ5G,KAAK6G,kBAClB7G,KAAK8G,MAAM9B,EAAW+B,cAClB/G,KAAK0G,eACL1G,KAAK4G,MAAQ5B,EAAWgC,aACxBhH,KAAKiH,iBA/LjB,CAAA1G,IAAA,kBAAAC,MAAA,WAwMQ,OAHgBR,KAAKkH,yBACHlH,KAAKmH,oBACR,IAvMvB,CAAA5G,IAAA,oBAAAC,MAAA,WA4MQ,OAAO4G,KAAKC,IAAID,KAAKE,MAAMtH,KAAK4G,KAAO,IAAK5B,EAAWuC,oBA5M/D,CAAAhH,IAAA,yBAAAC,MAAA,WAgNQ,OAAGR,KAAK2G,WAAa,EACV,EACA3G,KAAK2G,WAAa,EAClB,EAEA,IArNnB,CAAApG,IAAA,cAAAC,MAAA,WA0NyB,IAAA8B,EAAAtC,KACbA,KAAK4G,KAAO5B,EAAWgC,aACvBnD,QAAQC,IAAI,iCAKhB9D,KAAKgG,YAAYwB,QAAQ,SAAAC,GAClBA,GACCnF,EAAKyD,KAAK2B,KAAKD,KAIvBzH,KAAKgG,YAAc,GAEnBhG,KAAK2H,WACL3H,KAAK4G,MAAQ5B,EAAWgC,gBA1OhC,CAAAzG,IAAA,QAAAC,MAAA,WA+OWR,KAAK4G,KAAO5B,EAAW4C,YACtB/D,QAAQC,IAAI,gCAGhB9D,KAAK8G,MAAM,GACX9G,KAAK4G,MAAQ5B,EAAW4C,eApPhC,CAAArH,IAAA,QAAAC,MAAA,SAwPiBqH,GACT7H,KAAK8H,IAAMD,EAER7H,KAAK8H,IAAM9H,KAAKiG,cACfjG,KAAK8H,GAAK9H,KAAK8H,GAAK9H,KAAKiG,YACzBjG,KAAKiG,YAAcjG,KAAKkG,gBAAgBlG,KAAKmG,MAAQ,GACrDnG,KAAKmG,OAAS,KA9P1B,CAAA5F,IAAA,mBAAAC,MAAA,gBAoQiCoD,IAAtB5D,KAAK2E,eAGR3E,KAAK4G,MAAQ5G,KAAK+H,iBAAiB/H,KAAK2E,aAAalE,MAGlDT,KAAK2E,aAAaX,UACjBhE,KAAK0E,aAAa1E,KAAK2E,aAAa9B,OAAS,KAE7C7C,KAAKoD,WAAWpD,KAAK2E,aAAa9B,OAAOpC,UAAOmD,EAGpD5D,KAAK2E,kBAAef,KAhR5B,CAAArD,IAAA,mBAAAC,MAAA,SAmR4BC,GACpB,IAAIuH,EAAY,EAChB,OAAQvH,EAAKa,MACT,KAAK,EACD0G,EAAY,EACZ,MAEJ,KAAK,EACDA,EAAY,EAKpB,OAAOvH,EAAKE,MAAMsH,KAAOD,IAhSjC,CAAAzH,IAAA,WAAAC,MAAA,WAqSQ,KAAMR,KAAKgG,YAAYkC,OAAS,GAC5BlI,KAAKmI,aAtSjB,CAAA5H,IAAA,WAAAC,MAAA,WA4SQ,IAAMD,EAAG,QAAAS,OAAWhB,KAAKmG,OAEnBiC,EAAQC,KAAsB9H,GAAK+H,SACnCC,EAAOnB,KAAKoB,SAEZP,EAAOjI,KAAKyI,QAAQF,EAAMH,GAE1BM,EAAU1I,KAAK+F,KAAK4C,OAAO,SAAAhF,GAAC,OAAIA,EAAEhD,MAAMsH,OAASA,IACjDpF,EAAQuE,KAAKE,MAAMF,KAAKoB,SAAWE,EAAQR,QAC3CT,EAAOiB,EAAQ7F,GAErB7C,KAAKgG,YAAY0B,KAAKD,GACtBzH,KAAK+F,KAAK6C,OAAO/F,EAAO,GACxBgB,QAAQC,IAAR,kBAAA9C,OAA8ByG,EAAK9G,MAAMU,SAzTjD,CAAAd,IAAA,iBAAAC,MAAA,WA6T4B,IAAA8C,EAAAtD,KACpBA,KAAK+F,KAAO8C,aAAoBC,QAAQ,SAAAnI,GACpC,IAAMoI,EAAWzF,EAAK0F,2BAA2BrI,EAAMO,IACvD,OAAOpB,OAAA2C,EAAA,EAAA3C,CAAI4C,MAAMqG,IAAWpG,IAAI,SAACC,EAAGC,GAAJ,MAAe,CAC3ClC,QACAsI,KAAMtI,EAAMO,GAAK,IAAM2B,SAlUvC,CAAAtC,IAAA,UAAAC,MAAA,SAwUmBiH,GAEX,GAAIA,GAASA,EAAK9G,MAAlB,CAF4B,IAMpBsI,EAAgBxB,EAAhBwB,KAAMtI,EAAU8G,EAAV9G,MAEdkD,QAAQC,IAAI,sBAAuBnD,GACnC,IAAIsH,EAAOtH,EAAMsH,KACbiB,GAAc,EAElB,GAAGlJ,KAAK4G,KAAOjG,EAAMsH,KACjBpE,QAAQC,IAAR,4BAAA9C,OAAwCL,EAAMU,KAA9C,SAAAL,OAA0DL,EAAMsH,KAAhE,eADJ,CAgBA,IAAMkB,EAAanJ,KAAK0E,aAAa0E,UAAU,SAAAzF,GAAC,OAAU,OAANA,IAEpD,GAAGwF,GAAc,EACbnJ,KAAK0E,aAAayE,GAAe,CAC7B7H,KAAM,EACNX,aAGD,CACH,IAAM0I,EAAqBrJ,KAAK0E,aAC3BiE,OAAO,SAAAlI,GAAI,OAAa,OAATA,GAA+B,IAAdA,EAAKa,MAAcb,EAAKE,MAAMO,KAAOP,EAAMO,KAC1EoI,EAAqBtJ,KAAKoD,WAC3BT,IAAI,SAAAa,GAAE,OAAIA,EAAG/C,MAAQ,OACrBkI,OAAO,SAAAlI,GAAI,OAAa,OAATA,GAA+B,IAAdA,EAAKa,MAAcb,EAAKE,MAAMO,KAAOP,EAAMO,KAE1EqI,EAAa,GAAAvI,OAAAlB,OAAA2C,EAAA,EAAA3C,CAAOuJ,GAAPvJ,OAAA2C,EAAA,EAAA3C,CAA8BwJ,IAE3CE,EAAiBxJ,KAAKgG,YACvB2C,OAAO,SAAAlB,GAAI,OAAY,MAARA,GAAgBA,EAAK9G,MAAMO,KAAOP,EAAMO,KAG5D,GAA6B,IAAzBqI,EAAcrB,OACdlI,KAAKyJ,WAAW,EAAGD,OAChB,MAA6B,IAAzBD,EAAcrB,QAAgBsB,EAAetB,QAAU,GAY9D,YADArE,QAAQC,IAAI,0CAA2CnD,EAAMU,MAV7D,KAAGrB,KAAK4G,MAAqB,EAAbjG,EAAMsH,MAMlB,YADApE,QAAQC,IAAI,2DAA4DnD,EAAMU,MAJ9E4G,GAAQ,EACRjI,KAAKyJ,WAAW,EAAGD,GACnBN,GAAc,GAa1B,IAAMrG,EAAQ7C,KAAKgG,YAAYoD,UAAU,SAAAM,GAAC,OAAS,MAALA,GAAaA,EAAET,OAASA,IAItE,GAHAjJ,KAAKgG,YAAYnD,GAAS,KAGvBqG,EAAa,CACZ,IAAMrG,EAAQ7C,KAAKgG,YAAYoD,UAAU,SAAA3B,GAAI,OAAY,MAARA,GAAgBA,EAAK9G,MAAMO,KAAOP,EAAMO,KACzFlB,KAAKgG,YAAYnD,GAAS,KAI9B7C,KAAKyJ,WAAW,GAEhB5F,QAAQC,IAAI,QAASmE,EAAMjI,KAAK4G,MAEhC5G,KAAK4G,MAAQqB,MA1ZrB,CAAA1H,IAAA,aAAAC,MAAA,WA8ZuE,IAAAmJ,EAAA3J,KAAhDsB,EAAgDlB,UAAA8H,OAAA,QAAAtE,IAAAxD,UAAA,GAAAA,UAAA,GAAjC,EACxBwJ,GADyDxJ,UAAA8H,OAAA,QAAAtE,IAAAxD,UAAA,GAAAA,UAAA,GAAJ,IACrBuC,IAAI,SAAA8E,GAAI,MAAK,CAAC9G,MAAO8G,EAAK9G,MAAOW,KAAM,KACvE8B,EAA4BpD,KAAKoD,WAAWT,IAAI,SAAAa,GAAE,OAAIA,EAAG/C,MAAQ,OAMjEoJ,EALyB,GAAA7I,OAAAlB,OAAA2C,EAAA,EAAA3C,CAAOE,KAAK0E,cAAZ5E,OAAA2C,EAAA,EAAA3C,CAA6BsD,GAA7BtD,OAAA2C,EAAA,EAAA3C,CAA4C8J,IAExCjB,OAAO,SAAAe,GAAC,OAAS,OAALA,GAAaA,EAAEpI,OAASA,IAGpCwI,OAAO,SAACC,EAAWtJ,GAClD,IAAMS,EAAKT,EAAKE,MAAMO,GAChB8I,EAAOD,EAAU7I,GAMvB,OAFK6I,EAAU7I,GAHV8I,EAGgBA,EAAI,EAFJ,EAIdD,GACR,IAGgBjK,OAAOmK,KAAKJ,GAAYlB,OAAO,SAAAhF,GAAC,OAAKkG,EAAmBlG,IAAM,IAGtE6D,QAAQ,SAAAtG,GAKf,IAJA,IAAMP,EAASkI,aAAoCqB,KAAK,SAAAR,GAAC,OAAIA,EAAExI,KAAOA,IAElE2B,GAAS,GAEN,KAAOA,EAAQ8G,EAAKjF,aAAa0E,UAAU,SAAA3I,GAAI,OACzC,OAATA,GACAA,EAAKE,MAAMO,KAAOA,GAClBT,EAAKa,OAASA,MAEdqI,EAAKjF,aAAa7B,GAAS,KAI/BA,GAAS,EAET,IADA,IAAIsH,GAAc,GACX,KAAOtH,EAAQ8G,EAAKvG,WAAWgG,UAAU,SAAA1H,GAAS,YAClCkC,IAAnBlC,EAAUjB,MACViB,EAAUjB,KAAKE,MAAMO,KAAOA,GAC5BQ,EAAUjB,KAAKa,OAASA,MAExBqI,EAAKvG,WAAWP,GAAOpC,UAAOmD,EAC9BuG,EAAatH,EAKjB,IAAmB,IAAhBsH,EACCR,EAAKvG,WAAW+G,GAAY1J,KAAO,CAC/Ba,KAAMA,EAAO,EACbX,aAED,CACH,IAAMwI,EAAaQ,EAAKjF,aAAa0E,UAAU,SAAAzF,GAAC,OAAU,OAANA,IACpDgG,EAAKjF,aAAayE,GAAc,CAC5B7H,KAAMA,EAAO,EACbX,YAKC,IAATW,GACAtB,KAAKyJ,WAAW,KA/d5B,CAAAlJ,IAAA,kBAAAC,MAAA,SAme4B4J,GACpB,OAAQ/B,KAAD,QAAArH,OAA+BoJ,IAAgBtC,KApe9D,CAAAvH,IAAA,6BAAAC,MAAA,SAueuCU,GAC/B,IAAMP,EAAQkI,aAAoBqB,KAAK,SAAAvG,GAAC,OAAIA,EAAEzC,KAAOA,IACrD,GAAY,MAATP,EAAiB,OAAO,EAE3B,OAAOA,EAAMsH,MACT,KAAK,EAAG,OAAOoC,IAAmBC,MAClC,KAAK,EAAG,OAAOD,IAAmBE,MAClC,KAAK,EAAG,OAAOF,IAAmBG,MAClC,KAAK,EAAG,OAAOH,IAAmBI,MAClC,KAAK,EAAG,OAAOJ,IAAmBK,MAClC,QAAS,OAAO,KAjf5B,CAAAnK,IAAA,UAAAC,MAAA,SAqfoB+H,EAAcH,GAC1B,IAAIuC,EAAQ,EACR9H,EAAQ,EAEZ,IADDgB,QAAQC,IAAR,eAAA9C,OAA2BuH,GAAQH,GAC5BuC,EAAQpC,GACVoC,GAASvC,EAAKvF,KACZA,EACFgB,QAAQC,IAAR,uBAAA9C,OAAmC6B,EAAnC,WAAA7B,OAAkD2J,IAItD,OAFA9G,QAAQC,IAAR,qBAAA9C,OAAiC6B,EAAjC,eAEOA,IAhgBf,CAAAtC,IAAA,iBAAAC,MAAA,SAmgB2ByH,GACnB,OAAOY,aAAoBF,OAAO,SAAAhI,GAAK,OAAIA,EAAMsH,OAASA,MApgBlE,CAAA1H,IAAA,kBAAAqK,IAAA,WAuFQ,OAAO5K,KAAKoD,WAAWuF,OAAO,SAAAnF,GAAE,OAAIA,EAAG/C,OAAMyH,SAvFrD,CAAA3H,IAAA,gBAAAqK,IAAA,WA4FQ,IACMC,EADsB7K,KAAKoD,WAAWT,IAAI,SAAAgB,GAAC,OAAIA,EAAElD,OAAMkC,IAAI,SAAAlC,GAAI,OAAIA,EAAOA,EAAKE,MAAQ,OAAMgI,OAAO,SAAAhI,GAAK,OAAc,OAAVA,IACjFgC,IAAI,SAAAhC,GAAK,OAAIA,EAAMO,KAI/C4J,EAHwBhL,OAAA2C,EAAA,EAAA3C,CAAO,IAAIiL,IAAIF,IAEClI,IAAI,SAAAzB,GAAE,OAAI2H,aAAoBqB,KAAK,SAAAvJ,GAAK,OAAIA,EAAMO,KAAOA,MAAK4H,QAAQ,SAAAnI,GAAK,YAAciD,IAAVjD,EAAsB,GAAKA,EAAMqK,UAASC,OAC9HnB,OAAO,SAACoB,EAAKhK,GAElD,OADAgK,EAAIhK,IAAOgK,EAAIhK,IAAO,GAAK,EACpBgK,GACR,IAGH,OADArH,QAAQC,IAAI,eAAgBgH,GACrBA,IAvGf,CAAAvK,IAAA,yBAAAqK,IAAA,WA2GmD,IAAAO,EAAAnL,KAG3C,OAFsBF,OAAOmK,KAAKjK,KAAKoL,eAElBzI,IAAK,SAAApC,GACtB,IAAM8K,EAAeC,KAAkB/K,GACjCgL,EAASJ,EAAKC,cAAsB7K,GACpCiL,EAAaH,EAAYI,OAAOrC,UAAU,SAAAzF,GAAC,OAAK0H,EAAYK,MAAQ/H,IAAM4H,EAAQ5H,GAAK4H,IAGvFjK,GAAuB,IAAhBkK,EAAoB,EAAIH,EAAYI,OAAOvD,OAASsD,EAC3DG,EAASrK,EAAO,EAEtB,OAAOxB,OAAA8L,EAAA,EAAA9L,CAAA,GACAuL,EADP,CAEInK,GAAIX,EACJe,OACAqK,SACAJ,gBA5HhBvG,EAAA,GAAAE,EAEkB8B,aAAe,EAFjC9B,EAGkB0C,YAAc,EAHhC1C,EAIkBkB,WAAa,EAJ/BlB,EAKkB6B,aAAe,EALjC7B,EAMkBqC,iBAAmB,EANrCsE,EAAA5G,EAAAG,EAAAtF,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,QAQKC,KARL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,OAAA/G,EAAAvF,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,eAWKC,KAXL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,OAAA9G,EAAAxF,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,gBAcKC,KAdL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBAeoC,MAfpC7G,EAAAzF,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,cAiBKC,KAjBL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBAkB8B,MAlB9B5G,EAAA1F,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,MAoBKC,KApBL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAqBiB,KArBjB3G,EAAA3F,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,eAuBKC,KAvBL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAwB0B,KAxB1B1G,EAAA5F,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,SA0BKC,KA1BL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBA2BoB,KA3BpBzG,EAAA7F,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,QA6BKC,KA7BL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBA8BmB,KA9BnBxG,EAAA9F,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,gBAgCKC,KAhCL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAiC4B,KAjC5BvG,EAAA/F,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,gBAmCKC,KAnCL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAtG,EAAAhG,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,cAsCKC,KAtCL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAuCyB,KAvCzBtM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,sBAmDKM,KAnDLvM,OAAAwM,yBAAAT,EAAAE,UAAA,sBAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,mBAqFKQ,KArFLzM,OAAAwM,yBAAAT,EAAAE,UAAA,mBAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,iBA0FKQ,KA1FLzM,OAAAwM,yBAAAT,EAAAE,UAAA,iBAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,0BA0GKQ,KA1GLzM,OAAAwM,yBAAAT,EAAAE,UAAA,0BAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,2BAiIKM,KAjILvM,OAAAwM,yBAAAT,EAAAE,UAAA,2BAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,2BAiJKM,KAjJLvM,OAAAwM,yBAAAT,EAAAE,UAAA,2BAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,mBAwKKM,KAxKLvM,OAAAwM,yBAAAT,EAAAE,UAAA,mBAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,mBA6KKM,KA7KLvM,OAAAwM,yBAAAT,EAAAE,UAAA,mBAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,kBAmLKM,KAnLLvM,OAAAwM,yBAAAT,EAAAE,UAAA,kBAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,aAwLKM,KAxLLvM,OAAAwM,yBAAAT,EAAAE,UAAA,aAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,eAyNKM,KAzNLvM,OAAAwM,yBAAAT,EAAAE,UAAA,eAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,SA6OKM,KA7OLvM,OAAAwM,yBAAAT,EAAAE,UAAA,SAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,SAuPKM,KAvPLvM,OAAAwM,yBAAAT,EAAAE,UAAA,SAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,oBAkQKM,KAlQLvM,OAAAwM,yBAAAT,EAAAE,UAAA,oBAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,YAmSKM,KAnSLvM,OAAAwM,yBAAAT,EAAAE,UAAA,YAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,YA0SKM,KA1SLvM,OAAAwM,yBAAAT,EAAAE,UAAA,YAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,kBA4TKM,KA5TLvM,OAAAwM,yBAAAT,EAAAE,UAAA,kBAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,WAuUKM,KAvULvM,OAAAwM,yBAAAT,EAAAE,UAAA,WAAAF,EAAAE,WAAAjM,OAAAgM,EAAA,EAAAhM,CAAA+L,EAAAE,UAAA,cA6ZKM,KA7ZLvM,OAAAwM,yBAAAT,EAAAE,UAAA,cAAAF,EAAAE,WAAAF,GCRaW,UAAb,SAAA3M,GAAA,SAAA2M,IAAA,OAAA1M,OAAAC,EAAA,EAAAD,CAAAE,KAAAwM,GAAA1M,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0M,GAAArM,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA0M,EAAA3M,GAAAC,OAAAQ,EAAA,EAAAR,CAAA0M,EAAA,EAAAjM,IAAA,SAAAC,MAAA,WAEQ,OACIW,EAAA,mBAAGC,UAAU,QACTD,EAAA,sBAAMC,UAAU,QAAhB,aAJhBoL,EAAA,CAA0BjL,cCSbkL,GADZrK,YACDsK,EAAA,SAAA7M,GAAA,SAAA4M,IAAA,OAAA3M,OAAAC,EAAA,EAAAD,CAAAE,KAAAyM,GAAA3M,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2M,GAAAtM,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA2M,EAAA5M,GAAAC,OAAAQ,EAAA,EAAAR,CAAA2M,EAAA,EAAAlM,IAAA,SAAAC,MAAA,WAEoB,IAAAiB,EAEoBzB,KAAKU,MAA7B6B,EAFId,EAEJc,MAAOoK,EAFHlL,EAEGkL,aACP7E,EAA2BvF,EAA3BuF,GAAI7B,EAAuB1D,EAAvB0D,YAAaE,EAAU5D,EAAV4D,MAGnByG,EAAgB,CAClBC,UAAS,cAAA7L,QAAiB,IAFb8G,EAAG7B,EAAc,IAErB,OAGP6G,EAAYvK,EAAMmE,aAAe,SAAW,OAElD,OACIvF,EAAA,qBAAKC,UAAU,6BACTuL,GAAgBxL,EAAA,qBAAKC,UAAU,uBAAuBQ,QAAS,kBAAMW,EAAMwK,mBACzE5L,EAAA,qBAAKC,UAAS,QAAAJ,OAAU8L,MAE5B3L,EAAA,qBAAKC,UAAU,uBACXD,EAAA,qBAAKC,UAAU,iCAAiCQ,QAAS,kBAAMW,EAAM0E,gBACjE9F,EAAA,qBAAKC,UAAU,iBACXD,EAAA,qBAAKC,UAAU,WACXD,EAAA,oCACAA,EAAA,yBAAKA,EAAA,cAAC6L,GAAD,MAAL,IAAehI,GAAWgC,eAE9B7F,EAAA,qBAAKC,UAAU,OAAON,MAAO,CAACC,gBAAiB,4BAIvDI,EAAA,qBAAKC,UAAU,4BAA4BQ,QAAS,kBAAMW,EAAM0K,UAC5D9L,EAAA,qBAAKC,UAAU,YACXD,EAAA,qBAAKC,UAAU,WACXD,EAAA,qBAAKC,UAAU,WACXD,EAAA,qBAAKC,UAAU,SAAf,UACAD,EAAA,qBAAKC,UAAU,aACXD,EAAA,cAAC6L,GAAD,MAAShI,GAAW4C,cAG5BzG,EAAA,qBAAKC,UAAU,OAAON,MAAO,CAACC,gBAAiB,4BAEnDI,EAAA,qBAAKC,UAAU,eACXD,EAAA,qBAAKC,UAAU,YAAY0G,EAA3B,IAAgC7B,GAChC9E,EAAA,qBAAKC,UAAU,mBACXD,EAAA,qBAAKC,UAAU,OACXD,EAAA,qBAAKC,UAAU,OAAON,MAAO8L,OAIzCzL,EAAA,qBAAKC,UAAU,SAAS+E,WAjDpDsG,EAAA,CAAkClL,eAAlCmL,ECAaQ,UAAb,SAAArN,GAAA,SAAAqN,IAAA,OAAApN,OAAAC,EAAA,EAAAD,CAAAE,KAAAkN,GAAApN,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoN,GAAA/M,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAoN,EAAArN,GAAAC,OAAAQ,EAAA,EAAAR,CAAAoN,EAAA,EAAA3M,IAAA,SAAAC,MAAA,WAEoB,IAAAiB,EACazB,KAAKU,MAAtB+G,EADIhG,EACJgG,KAAM4E,EADF5K,EACE4K,OADFc,EAEwB1F,EAAK9G,MAAjCU,EAFI8L,EAEJ9L,KAAM4G,EAFFkF,EAEElF,KAAM/G,EAFRiM,EAEQjM,GAAI8J,EAFZmC,EAEYnC,QAElBlK,EAAQ,CACVC,gBAAe,OAAAC,OAASC,gBAAT,sBAAAD,OAAoDE,EAApD,UAGnB,OACIC,EAAA,qBAAKC,UAAS,yBAAAJ,OAA2BiH,GAAQrG,QAAS,kBAAMyK,EAAO5E,KACnEtG,EAAA,qBAAKC,UAAU,eACfD,EAAA,qBAAKC,UAAS,iBAAAJ,OAAmBE,GAAMJ,MAAOA,GACzCkK,EAAQrI,IAAI,SAAAgB,GAAC,OAAIxC,EAAA,qBAAKC,UAAU,cAAcb,IAAKoD,GAAIA,MAE5DxC,EAAA,qBAAKC,UAAS,sBAAAJ,OAAwBiH,IAClC9G,EAAA,qBAAKC,UAAU,QAAQC,GACvBF,EAAA,qBAAKC,UAAU,QACXD,EAAA,0BACIA,EAAA,cAAC6L,GAAD,MACC/E,UArB7BiF,EAAA,CAA0B3L,cCPb6L,GAAb,SAAAvN,GAAA,SAAAuN,IAAA,OAAAtN,OAAAC,EAAA,EAAAD,CAAAE,KAAAoN,GAAAtN,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsN,GAAAjN,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAsN,EAAAvN,GAAAC,OAAAQ,EAAA,EAAAR,CAAAsN,EAAA,EAAA7M,IAAA,SAAAC,MAAA,WAGQ,OACIW,EAAA,qBAAKC,UAAU,yBAJ3BgM,EAAA,CAA+B7L,aCUjB8L,GADbjL,YACAkL,EAAA,SAAAzN,GAAA,SAAAwN,IAAA,OAAAvN,OAAAC,EAAA,EAAAD,CAAAE,KAAAqN,GAAAvN,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuN,GAAAlN,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAuN,EAAAxN,GAAAC,OAAAQ,EAAA,EAAAR,CAAAuN,EAAA,EAAA9M,IAAA,SAAAC,MAAA,WAEmB,IAAAiB,EACazB,KAAKU,MAAtB6M,EADI9L,EACJ8L,KAAMlB,EADF5K,EACE4K,OAEd,OACIlL,EAAA,qBAAKC,UAAU,QACVmM,EAAK5K,IAAK,SAAC8E,EAAM5E,GAAP,OAAiByB,QAAQmD,GAChCtG,EAAA,cAACqM,GAAD,CAAM/F,KAAMA,EAAMlH,IAAKkH,EAAKwB,KAAMoD,OAAQA,IAC1ClL,EAAA,cAACsM,GAAD,CAAWlN,IAAKsC,EAAQ,kBAT3CwK,EAAA,CAA0B9L,eAA1B+L,ECDYI,GADZtL,YACDuL,EAAA,SAAA9N,GAAA,SAAA6N,IAAA,OAAA5N,OAAAC,EAAA,EAAAD,CAAAE,KAAA0N,GAAA5N,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4N,GAAAvN,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA4N,EAAA7N,GAAAC,OAAAQ,EAAA,EAAAR,CAAA4N,EAAA,EAAAnN,IAAA,SAAAC,MAAA,WAEoB,IAAA8B,EAAAtC,KAAAyB,EAEoBzB,KAAKU,MAA7B6B,EAFId,EAEJc,MAAOoK,EAFHlL,EAEGkL,aACP3G,EAAqBzD,EAArByD,YAAaY,EAAQrE,EAARqE,KAErB,OACIzF,EAAA,qBAAKC,UAAU,0BACTuL,GAAgBxL,EAAA,qBAAKC,UAAU,4BAC7BD,EAAA,qBAAKC,UAAU,cACXD,EAAA,cAAC6L,GAAD,MAAQpG,IAGhBzF,EAAA,cAACyM,GAAD,CAAML,KAAMvH,EAAaqG,OAAQ,SAAA1I,GAAC,OAAIrB,EAAKuL,QAAQlK,SAdnE,CAAApD,IAAA,UAAAC,MAAA,SAmBoBiH,GACZ5D,QAAQC,IAAI,0BAA2B2D,EAAK9G,MAAMU,MAClDrB,KAAKU,MAAM6B,MAAMsL,QAAQpG,OArBjCiG,EAAA,CAA+BnM,eAA/BoM,ECHaG,GADZ1L,YACD2L,EAAA,SAAAlO,GAAA,SAAAiO,IAAA,OAAAhO,OAAAC,EAAA,EAAAD,CAAAE,KAAA8N,GAAAhO,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgO,GAAA3N,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAgO,EAAAjO,GAAAC,OAAAQ,EAAA,EAAAR,CAAAgO,EAAA,EAAAvN,IAAA,SAAAC,MAAA,WAEoB,IAEJ+B,EAAUvC,KAAKU,MAAf6B,MACAoC,EAAiBpC,EAAjBoC,aACR,QAAoBf,IAAjBe,IAA+BA,EAAalE,KAAQ,OAAO,KAJlD,IAMJY,EAASsD,EAAalE,KAAKE,MAA3BU,KACF4G,EAAO1F,EAAMwF,iBAAiBpD,EAAalE,MAEjD,OACIU,EAAA,qBAAKC,UAAU,wBAAwBQ,QAAS,kBAAMW,EAAMyL,qBACxD7M,EAAA,mBAAGC,UAAU,UACbD,EAAA,kCAAYE,EAAZ,QAAsBF,EAAA,cAAC6L,GAAD,MAAtB,IAAgC/E,EAAhC,UAdhB6F,EAAA,CAA+BvM,eAA/BwM,ECKaE,GAFZhM,YAAO,QAERiM,CAAAC,EADC/L,YACD+L,EAAA,SAAAtO,GAAA,SAAAoO,IAAA,OAAAnO,OAAAC,EAAA,EAAAD,CAAAE,KAAAiO,GAAAnO,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmO,GAAA9N,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAmO,EAAApO,GAAAC,OAAAQ,EAAA,EAAAR,CAAAmO,EAAA,EAAA1N,IAAA,SAAAC,MAAA,WAEoB,IACJ+B,EAAUvC,KAAKU,MAAf6B,MAEF6L,OAAkCxK,IAAvBrB,EAAMoC,aAEvB,OACIxD,EAAA,yBAASC,UAAU,SACfD,EAAA,cAACkN,GAAD,CAAc9L,MAAOA,EAAOoK,aAAcyB,IAC1CjN,EAAA,cAACmN,GAAD,CAAW/L,MAAOA,EAAOoK,aAAcyB,IACtCA,GAAYjN,EAAA,cAACoN,GAAD,CAAWhM,MAAOA,SAX/C0L,EAAA,CAA2B1M,eAA3B4M,MCNaK,UADZpM,YACDqM,EAAA,SAAA5O,GAAA,SAAA2O,IAAA,OAAA1O,OAAAC,EAAA,EAAAD,CAAAE,KAAAwO,GAAA1O,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0O,GAAArO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA0O,EAAA3O,GAAAC,OAAAQ,EAAA,EAAAR,CAAA0O,EAAA,EAAAjO,IAAA,SAAAC,MAAA,WAEoB,IAEJkO,EAAY1O,KAAKU,MAAjBgO,QACApN,EAASoN,EAATpN,KAEFqN,EAA6B,IAATrN,GAAc,EAAIoN,EAAQjD,OAAOvD,OAAS5G,EAC9DsN,EAAqB,IAATtN,GAAc,EAAIoN,EAAQjD,OAAOkD,EAAoB,GAEvE,OADA9K,QAAQC,IAAI,IAAK4K,EAASC,EAAmBC,GAEzCzN,EAAA,qBAAKC,UAAS,qBAAAJ,OAAuB0N,EAAQpN,OACzCH,EAAA,qBAAKC,UAAU,QACZD,EAAA,qBAAKC,UAAU,GAAGyN,IAAI,OAAOC,IAAG,mBAAA9N,OAAqB0N,EAAQxN,GAA7B,WAEpCC,EAAA,0BACEuN,EAAQrN,KADV,KACkBqN,EAAQnD,MACxBqD,EAAY,GAAKzN,EAAA,gCAAUyN,SAjB5CJ,EAAA,CAAiCjN,eAAjCkN,GCEaM,GADZ3M,YACD4M,EAAA,SAAAnP,GAAA,SAAAkP,IAAA,OAAAjP,OAAAC,EAAA,EAAAD,CAAAE,KAAA+O,GAAAjP,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiP,GAAA5O,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAiP,EAAAlP,GAAAC,OAAAQ,EAAA,EAAAR,CAAAiP,EAAA,EAAAxO,IAAA,SAAAC,MAAA,WAEoB,IAAAiB,EAEezB,KAAKU,MAAxB4K,EAFI7J,EAEJ6J,UAAWhK,EAFPG,EAEOH,KACnB,OAAwB,IAArBgK,EAAUpD,OAAuB,KAGhC/G,EAAA,qBAAKC,UAAU,gBACXD,EAAA,oBAAIC,UAAS,QAAAJ,OAAUM,IAClBgK,EAAU3I,IAAK,SAAAsM,GAAC,OAAI9N,EAAA,cAAC+N,GAAD,CAAaR,QAASO,EAAG1O,IAAK0O,EAAE/N,aAVzE6N,EAAA,CAAiCxN,eAAjCyN,ECEaG,UADZ/M,YACDgN,EAAA,SAAAvP,GAAA,SAAAsP,IAAA,OAAArP,OAAAC,EAAA,EAAAD,CAAAE,KAAAmP,GAAArP,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqP,GAAAhP,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAqP,EAAAtP,GAAAC,OAAAQ,EAAA,EAAAR,CAAAqP,EAAA,EAAA5O,IAAA,SAAAC,MAAA,WAGQ,IAKM6J,EAAQ,CALIrK,KAAKqP,mBAAmB,GACtBrP,KAAKqP,mBAAmB,GACxBrP,KAAKqP,mBAAmB,GAC1BrP,KAAKqP,mBAAmB,IAI1C,OACIlO,EAAA,yBAASC,UAAU,aACbiJ,EAAM1H,IAAI,SAACrB,EAAMuB,GAAP,OACR1B,EAAA,cAACmO,GAAD,CAAahE,UAAWhK,EAAMA,KAAMuB,EAAQ,EAAGtC,IAAG,QAAAS,OAAU6B,EAAQ,UAbxF,CAAAtC,IAAA,qBAAAC,MAAA,SAoB+Bc,GACvB,OAAOtB,KAAKU,MAAM6B,MAAMgN,uBAAuB5G,OAAO,SAAAsG,GAAC,OAAIA,EAAE3N,OAASA,QArB9E6N,EAAA,CAAkC5N,eAAlC6N,GCCaI,GAFZvN,YAAO,QAERwN,CAAAC,EADCtN,YACDsN,EAAA,SAAA7P,GAAA,SAAA2P,IAAA,OAAA1P,OAAAC,EAAA,EAAAD,CAAAE,KAAAwP,GAAA1P,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0P,GAAArP,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA0P,EAAA3P,GAAAC,OAAAQ,EAAA,EAAAR,CAAA0P,EAAA,EAAAjP,IAAA,SAAAC,MAAA,WACoB,IACJ+B,EAAUvC,KAAKU,MAAf6B,MACR,OAAKA,EAGDpB,EAAA,yBAASC,UAAU,cACfD,EAAA,qBAAKC,UAAU,SACXD,EAAA,cAACwO,GAAD,CAAcpN,MAAOA,IACrBpB,EAAA,qBAAKC,UAAU,iBACXD,EAAA,2CAAqBoB,EAAMiE,gBAA3B,MAAgDjE,EAAM4D,QAE1DhF,EAAA,qBAAKC,UAAU,iBACXD,EAAA,4CAAsBoB,EAAMoE,YAC5BxF,EAAA,wBAAQS,QAAS,kBAAMW,EAAMqN,cAA7B,iBAXK,SAH7BJ,EAAA,CAAgCjO,eAAhCmO,MCAaG,IAAbC,EAAA,SAAAjQ,GAKI,SAAAgQ,EAAYnP,GAAO,IAAA4B,EAAA,OAAAxC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6P,GACfvN,EAAAxC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+P,GAAAxN,KAAArC,KAAMU,IADSZ,OAAAqF,EAAA,EAAArF,CAAAwC,EAAA,aAAAyN,EAAAjQ,OAAAkQ,EAAA,EAAAlQ,CAAAwC,IAEfA,EAAK2N,WAAa,IAAIjL,GAEtB1C,EAAK2N,WAAWC,iBAChB5N,EAAK2N,WAAWtI,WAChB9D,QAAQC,IAAIxB,EAAK2N,YAEjBE,OAAM,UAAgBC,GARP9N,EALvB,OAAAxC,OAAAO,EAAA,EAAAP,CAAA+P,EAAAhQ,GAAAC,OAAAQ,EAAA,EAAAR,CAAA+P,EAAA,EAAAtP,IAAA,SAAAC,MAAA,WAkBQ,OACIW,EAAA,yBAASC,UAAU,aACfD,EAAA,cAACkP,EAAA,EAAD,CAAU9N,MAAOvC,KAAKiQ,YAClB9O,EAAA,cAAAA,EAAA,cACIA,EAAA,qBAAKC,UAAU,SACXD,EAAA,qBAAKC,UAAU,uBACXD,EAAA,cAACmP,GAAD,OAEJnP,EAAA,qBAAKC,UAAU,sBACXD,EAAA,cAACoP,EAAD,MACApP,EAAA,cAACqP,EAAD,QAGRrP,EAAA,cAACsP,GAAD,aA/BxBZ,EAAA,CAA8BtO,aAA9BwO,EAAAjQ,OAAAgM,EAAA,EAAAhM,CAAAgQ,EAAA/D,UAAA,cAEKC,KAFL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,kBAG6B,QAH7B0D,GCAeY,OAVf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKzP,UAAU,oBACbuP,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACC,GAAD,SCIYxM,QACW,cAA7B6L,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOR,EAAAC,EAAAC,cAACO,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.049a6862.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Unit } from '../../stores/types';\r\n\r\ninterface ChampionProps {\r\n    unit: Unit;\r\n}\r\n\r\nexport class Champion extends React.Component<ChampionProps> {\r\n\r\n    public render() {\r\n        const { unit } = this.props;\r\n        const { champ } = unit;\r\n\r\n        const stars = this.getTierString(unit);\r\n\r\n        const style = {\r\n            backgroundImage: `url(${process.env.PUBLIC_URL}/img/champ-square/${champ.id}.png)`\r\n        };\r\n\r\n        return (\r\n            <div className=\"champion\" style={style}>\r\n                <div className=\"champion-tier\">{stars}</div>\r\n                <div className=\"champion-name\">{champ.name}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getTierString(unit: Unit): string {\r\n        switch(unit.tier) {\r\n            case 1: return '★';\r\n            case 2: return '★★';\r\n            case 3: return '★★★';\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { BoardUnit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\n\r\ninterface CellProps {\r\n    boardUnit: BoardUnit;\r\n    onSelect: (bu: BoardUnit) => void;\r\n}\r\n\r\nexport class Cell extends React.Component<CellProps> {\r\n    public render() {\r\n        const { boardUnit, onSelect } = this.props;\r\n        const { unit } = boardUnit;\r\n        \r\n        return (\r\n            <div className=\"cell\" onClick={() => onSelect(boardUnit)}>\r\n                <div className=\"contents\">\r\n                    {unit && <Champion unit={unit} /> }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import { Coords } from './stores/types';\r\n\r\nexport const BOARD_WIDTH = 7;\r\nexport const BOARD_HEIGHT = 3;\r\n\r\nexport const getIndexForCoords = (x: number, y: number): number => {\r\n    return y * BOARD_WIDTH + x;\r\n}\r\n\r\nexport const getCoordsForIndex = (index: number): Coords => {\r\n    return {\r\n        x: index % BOARD_WIDTH,\r\n        y: Math.floor(index / BOARD_WIDTH)\r\n    };\r\n}","import * as React from 'react';\r\nimport { Cell } from './cell';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport \"./board.scss\";\r\nimport { BOARD_HEIGHT, BOARD_WIDTH } from '../../utils';\r\nimport { BoardUnit, UnitSelection } from '../../stores/types';\r\n\r\ninterface BoardProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Board extends React.Component<BoardProps> {\r\n\r\n    public constructor(props: BoardProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const { draft } = this.props;\r\n\r\n        if(!draft) { return; }\r\n\r\n        const rows = [...Array(BOARD_HEIGHT)].map((_, index) => this.getRow(index + 1));\r\n\r\n        return (\r\n            <div className=\"board\">\r\n                {rows.map((row: BoardUnit[], index: number) => this.renderRow(row, index))}                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getRow(i: number): BoardUnit[] {\r\n        const { draft } = this.props;\r\n        const start = BOARD_WIDTH * (i - 1);\r\n        const end = BOARD_WIDTH * i;\r\n\r\n        return draft.boardUnits.slice(start, end);\r\n    }\r\n\r\n\r\n    private renderRow(boardUnits: BoardUnit[], row: number) {\r\n        const isOdd = row%2 === 1; \r\n        return (\r\n            <div className=\"board__row\" key={row}>\r\n                {isOdd && <div className=\"board-spacer spacer--left\"></div>}\r\n                {boardUnits.map(bu=>\r\n                    <Cell key={this.getKey(bu)} boardUnit={bu} onSelect={x => this.onSelect(x)} />\r\n                )}\r\n                {!isOdd && <div className=\"board-spacer spacer--right\"></div>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getKey(boardUnit: BoardUnit): string {\r\n        const { unit, index } = boardUnit;\r\n        if(unit === undefined) {\r\n            return `blank_${index}`;\r\n        } else {\r\n            return `${unit.champ.id}_${unit.tier}_${index}`;\r\n        }\r\n    }\r\n\r\n    private onSelect(boardUnit: BoardUnit) {\r\n        const { draft } = this.props;\r\n\r\n        console.log(\"Selected Board Unit\", boardUnit);\r\n        //If empty space\r\n        if(boardUnit.unit === undefined) {\r\n            draft.moveSelectedUnitToBoard(boardUnit.index);\r\n            return;\r\n        }\r\n\r\n        const selection = {\r\n            unit: boardUnit.unit,\r\n            index: boardUnit.index,\r\n            isBenched: false\r\n        } as UnitSelection;\r\n\r\n        draft.toggleSelectedUnit(selection);\r\n    }\r\n}","import * as React from 'react';\r\nimport { Unit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\n\r\ninterface BenchSlotProps {\r\n    unit?: Unit;\r\n    index: number;\r\n    isSelected: boolean;\r\n    onSelect: (unit: Unit, index: number) => void\r\n}\r\n\r\nexport class BenchSlot extends React.Component<BenchSlotProps> {\r\n    public render() {\r\n        const { unit, index, onSelect, isSelected } = this.props;\r\n        const selectedClass = isSelected ? 'selected' : '';\r\n        return (\r\n            <div className={`bench-slot ${selectedClass}`} onClick={() => onSelect(unit, index)}>\r\n                {Boolean(unit) && <Champion unit={unit} />}\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { BenchSlot } from './bench-slot';\r\nimport './bench.scss';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { UnitSelection, Unit } from '../../stores/types';\r\ninterface BenchProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Bench extends React.Component<BenchProps> {\r\n    public render() {\r\n        const { draft } = this.props;\r\n        const { benchedUnits, selectedUnit } = draft;\r\n        const selectedBenchIndex = (selectedUnit !== undefined && selectedUnit.isBenched) ? selectedUnit.index : -1;\r\n\r\n        return (\r\n            <div className=\"bench\">\r\n                {benchedUnits.map((unit, index) => <BenchSlot\r\n                    unit={unit}\r\n                    index={index}\r\n                    isSelected={selectedBenchIndex === index}\r\n                    onSelect={(unit, index) => this.onSelectUnit(unit, index)}\r\n                    key={ `${unit ? unit.champ.id + '_' + unit.tier : 'blank'}_${index}`}\r\n                />)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onSelectUnit(unit: Unit, index: number) {\r\n        const { draft } = this.props;\r\n        if(!unit) {\r\n            draft.moveSelectedUnitToBench(index);\r\n            return;\r\n        }\r\n        \r\n        const selection = {\r\n            unit,\r\n            index,\r\n            isBenched: true\r\n        } as UnitSelection;\r\n\r\n        draft.toggleSelectedUnit(selection);\r\n    }\r\n}","import { observable, action, computed } from 'mobx';\r\n\r\nimport * as tiers from '../data/tiers.json';\r\nimport * as levels from '../data/levels.json';\r\nimport * as champions from '../data/champions.json';\r\nimport { synergies } from '../data/synergies.json';\r\nimport { Unit, ChampData, ChampCard, UnitSelection, BoardUnit, SynergyData, Synergy } from './types';\r\nimport { BOARD_WIDTH, BOARD_HEIGHT } from '../utils';\r\n\r\n\r\nexport class DraftStore {\r\n\r\n    public static REFRESH_COST = 2;\r\n    public static BUY_XP_COST = 4;\r\n    public static BENCH_SIZE = 9;\r\n    public static XP_PER_ROUND = 2;\r\n    public static MAXIMIM_INTEREST = 5;\r\n\r\n    @observable\r\n    pool: ChampCard[];\r\n\r\n    @observable\r\n    currentHand: (ChampCard | null)[];\r\n\r\n    @observable\r\n    benchedUnits: (Unit | null)[] = [];\r\n\r\n    @observable\r\n    boardUnits: BoardUnit[] = [];\r\n\r\n    @observable\r\n    xp: number = 0;\r\n\r\n    @observable\r\n    nextLevelXp: number = 2;\r\n\r\n    @observable\r\n    level: number = 1;\r\n\r\n    @observable\r\n    gold: number = 3;\r\n\r\n    @observable\r\n    isHandLocked: boolean = false;\r\n\r\n    @observable\r\n    selectedUnit?: UnitSelection = undefined;\r\n\r\n    @observable\r\n    roundCount: number = 1;\r\n\r\n    constructor() {\r\n        this.pool = [];\r\n        this.currentHand = [];\r\n        this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n        this.benchedUnits = [...Array(DraftStore.BENCH_SIZE)].fill(null);\r\n        this.boardUnits = [...Array(BOARD_WIDTH * BOARD_HEIGHT)].map(\r\n            (_, index) => ({ unit: undefined, index } as BoardUnit)\r\n        );\r\n    }\r\n\r\n    @action\r\n    public toggleSelectedUnit(selection: UnitSelection) {\r\n\r\n        if(this.selectedUnit === undefined) {\r\n            this.selectedUnit = selection;\r\n            console.log(\"Selected\", selection.unit);\r\n            return;\r\n        }\r\n        \r\n        const isSameUnit = this.selectedUnit !== undefined && selection.index === this.selectedUnit.index;\r\n\r\n        //Click the same unit twice to Deselect it.\r\n        //Click 2 different units to swap their positions\r\n        if(isSameUnit) { \r\n            this.selectedUnit = undefined;\r\n            console.log(\"Deselected\", selection.unit.champ.name);\r\n        } else {\r\n           if(this.selectedUnit.isBenched) {\r\n               this.moveUnitToBench(selection.unit, this.selectedUnit.index);\r\n           } else {\r\n               this.moveUnitToBoard(selection.unit, this.selectedUnit.index);\r\n           }\r\n\r\n           if(selection.isBenched) {\r\n                this.moveUnitToBench(this.selectedUnit.unit, selection.index);\r\n            } else {\r\n               this.moveUnitToBoard(this.selectedUnit.unit, selection.index);\r\n            }\r\n\r\n            this.selectedUnit = undefined;\r\n        }\r\n    }\r\n\r\n\r\n    @computed\r\n    public get placedUnitCount() {\r\n        return this.boardUnits.filter(bu => bu.unit).length;\r\n    }\r\n\r\n    @computed\r\n    public get unitSynergies() {\r\n        const champs: ChampData[] = this.boardUnits.map(x => x.unit).map(unit => unit ? unit.champ : null).filter(champ => champ !== null) as ChampData[];\r\n        const champIds: string[] = champs.map(champ => champ.id);\r\n        const uniqueChampIds: string[] = [...new Set(champIds)];\r\n\r\n        const champClasses: string[] = uniqueChampIds.map(id => champions.champions.find(champ => champ.id === id)).flatMap(champ => champ === undefined ? [] : champ.classes).sort();\r\n        const classCounts: object = champClasses.reduce((obj, id) => {\r\n            obj[id] = (obj[id] || 0) + 1;\r\n            return obj;\r\n        }, {} as any);\r\n\r\n        console.log(\"Class Counts\", classCounts);\r\n        return classCounts;\r\n    }\r\n\r\n    @computed\r\n    public get unitSynergiesWithTiers(): Synergy[] {\r\n        const activeClasses = Object.keys(this.unitSynergies);\r\n\r\n        return activeClasses.map( key => {\r\n            const synergyData = (synergies as any)[key] as SynergyData;\r\n            const count = (this.unitSynergies as any)[key] as number;\r\n            const medalIndex = synergyData.stages.findIndex(x =>  synergyData.exact ? x === count : x <= count);\r\n\r\n            //Tiers, 1 = Gold, 2 = Silver, 3 = Bronze, 4 = Inactive;\r\n            const tier = medalIndex === -1 ? 4 : synergyData.stages.length - medalIndex;\r\n            const active = tier < 4;\r\n\r\n            return {\r\n                ...synergyData,\r\n                id: key,\r\n                tier,\r\n                active,\r\n                count\r\n            } as Synergy;\r\n        });\r\n    }\r\n\r\n    @action\r\n    public moveSelectedUnitToBench(index: number) {\r\n        if(this.selectedUnit === undefined || this.selectedUnit.unit === null) { return; }\r\n        //Remove selected unit from current space;\r\n        if(this.selectedUnit.isBenched) {\r\n            this.benchedUnits[this.selectedUnit.index] = null;\r\n        } else {\r\n            this.boardUnits[this.selectedUnit.index].unit = undefined;\r\n        }\r\n        //Move into new space\r\n        this.moveUnitToBench(this.selectedUnit.unit, index);\r\n\r\n        //Remove selection\r\n        this.selectedUnit = undefined;\r\n    }\r\n\r\n    @action\r\n    public moveSelectedUnitToBoard(index: number) {\r\n        if(this.selectedUnit === undefined || this.selectedUnit.unit === null) { return; }\r\n\r\n        if(this.placedUnitCount >= this.level) {\r\n            console.log(\"You've reached your unit cap. Level up to allow for more units\");\r\n            return;\r\n        }\r\n\r\n        //Remove the selected unit from current space\r\n        if(this.selectedUnit.isBenched) {\r\n            this.benchedUnits[this.selectedUnit.index] = null;\r\n        } else {\r\n            this.boardUnits[this.selectedUnit.index].unit = undefined;\r\n        }\r\n\r\n        //Move into new space\r\n        this.moveUnitToBoard(this.selectedUnit.unit, index);\r\n\r\n        //Remove selection\r\n        this.selectedUnit = undefined;\r\n    }\r\n\r\n    @action\r\n    private moveUnitToBench(unit: Unit, index: number) {\r\n        this.benchedUnits[index] = unit;\r\n    }\r\n\r\n    @action\r\n    private moveUnitToBoard(unit: Unit, index: number) {\r\n        const newBoardUnit = { index, unit } as BoardUnit;\r\n        this.boardUnits[index] = newBoardUnit;\r\n    }\r\n\r\n    @action\r\n    public toggleHandLock() {\r\n        this.isHandLocked = !this.isHandLocked;\r\n    }\r\n\r\n    @action\r\n    public nextRound() {\r\n        this.roundCount += 1;      \r\n        this.gold += this.calculateIncome();\r\n        this.addXP(DraftStore.XP_PER_ROUND);\r\n        if(!this.isHandLocked) {\r\n            this.gold += DraftStore.REFRESH_COST;\r\n            this.refreshHand();    \r\n        }\r\n\r\n    }\r\n\r\n    private calculateIncome(): number {\r\n        const passive = this.calculatePassiveIncome();\r\n        const interest =  this.calculateInterest();\r\n        const streak = 0; //TODO: Simulate Wins/Losses??\r\n        return passive + interest + streak;\r\n    }\r\n\r\n    private calculateInterest(): number {\r\n        return Math.min(Math.floor(this.gold / 10), DraftStore.MAXIMIM_INTEREST);\r\n    }\r\n\r\n    private calculatePassiveIncome(): number {\r\n        if(this.roundCount > 6) {\r\n            return 5;\r\n        } else if (this.roundCount > 3) {\r\n            return 4\r\n        } else {\r\n            return 3;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public refreshHand() {\r\n        if (this.gold < DraftStore.REFRESH_COST) {\r\n            console.log(\"You cannot afford to refresh\");\r\n            return;\r\n        }\r\n\r\n        //Return hand to pool\r\n        this.currentHand.forEach(card => {\r\n            if(card) {\r\n                this.pool.push(card);\r\n            }\r\n        });\r\n\r\n        this.currentHand = [];\r\n\r\n        this.drawHand();\r\n        this.gold -= DraftStore.REFRESH_COST;\r\n    }\r\n\r\n    @action\r\n    public buyXP() {\r\n        if(this.gold < DraftStore.BUY_XP_COST) {\r\n            console.log(\"You cannot afford to buy XP\");\r\n            return;\r\n        }\r\n        this.addXP(4);\r\n        this.gold -= DraftStore.BUY_XP_COST;\r\n    }\r\n\r\n    @action\r\n    public addXP(amount: number) {\r\n        this.xp += amount;\r\n        //Level Up\r\n        if(this.xp >= this.nextLevelXp) {\r\n            this.xp = this.xp - this.nextLevelXp;\r\n            this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n            this.level += 1;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public sellSelectedUnit() {\r\n        if(this.selectedUnit === undefined) { return; }\r\n\r\n        //Give gold;\r\n        this.gold += this.getUnitSalePrice(this.selectedUnit.unit);\r\n\r\n        //Remove Unit;\r\n        if(this.selectedUnit.isBenched) {\r\n            this.benchedUnits[this.selectedUnit.index] = null;\r\n        } else {\r\n            this.boardUnits[this.selectedUnit.index].unit = undefined;\r\n        }\r\n\r\n        this.selectedUnit = undefined;\r\n    }\r\n\r\n    public getUnitSalePrice(unit: Unit): number {\r\n        let tierBonus = 0;\r\n        switch (unit.tier) {\r\n            case 2: {\r\n                tierBonus = 2;\r\n                break; \r\n            }\r\n            case 3: {\r\n                tierBonus = 4;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return unit.champ.cost + tierBonus;\r\n    }\r\n\r\n    @action\r\n    public drawHand() {\r\n        while(this.currentHand.length < 5) {\r\n            this.drawCard();\r\n        }\r\n    }\r\n\r\n    @action\r\n    public drawCard() {\r\n        const key = `level${this.level}`;\r\n        \r\n        const odds = (levels.levels as any)[key].tierOdds;\r\n        const roll = Math.random();\r\n\r\n        const cost = this.getCost(roll, odds);\r\n\r\n        const cardSet = this.pool.filter(x => x.champ.cost === cost);\r\n        const index = Math.floor(Math.random() * cardSet.length);\r\n        const card = cardSet[index];\r\n\r\n        this.currentHand.push(card);\r\n        this.pool.splice(index, 1);\r\n        console.log(`Your new card: ${card.champ.name}`);\r\n    }\r\n\r\n    @action\r\n    public initializePool() {\r\n        this.pool = champions.champions.flatMap(champ => {\r\n            const poolSize = this.getInitialPoolSizeForChamp(champ.id);\r\n            return [...Array(poolSize)].map((_, index) => ({\r\n                champ,\r\n                guid: champ.id + \"_\" + index\r\n            } as ChampCard));            \r\n        });\r\n    }\r\n\r\n    @action\r\n    public buyCard(card: ChampCard) {\r\n\r\n        if(!card || !card.champ) {\r\n            return;\r\n        }\r\n\r\n        const { guid, champ } = card;\r\n        \r\n        console.log(\"DraftStore::buyCard\", champ);\r\n        let cost = champ.cost;\r\n        let removeExtra = false;\r\n\r\n        if(this.gold < champ.cost) {\r\n            console.log(`You cannot afford to buy ${champ.name} for ${champ.cost} coins`);\r\n            return;\r\n        }\r\n\r\n        /* Several cases:\r\n        1. Player has empty space for unit, all good\r\n        2. Player has no empty space, but has 2 units of the same type at tier 1 already, merge to free up space\r\n        3. Player has no empty space, but has 1 unit of the same type at tier 1,\r\n           and the hand has 2 of that same champ\r\n           3a. If they have the gold to buy 2, buy both and merge to free up space\r\n           3b. If they don't have the gold, abort\r\n        */\r\n\r\n\r\n        //Add unit to bench\r\n        const firstEmpty = this.benchedUnits.findIndex(x => x === null);\r\n        //Case 1\r\n        if(firstEmpty >= 0) {\r\n            this.benchedUnits[firstEmpty] = ({\r\n                tier: 1,\r\n                champ\r\n            });\r\n\r\n        } else {\r\n            const matchingBenchUnits = this.benchedUnits\r\n                .filter(unit => unit !== null && unit.tier === 1 && unit.champ.id === champ.id);\r\n            const matchingBoardUnits = this.boardUnits\r\n                .map(bu => bu.unit || null)\r\n                .filter(unit => unit !== null && unit.tier === 1 && unit.champ.id === champ.id);\r\n\r\n            const matchingUnits = [...matchingBenchUnits, ...matchingBoardUnits];\r\n\r\n            const availableToBuy = this.currentHand\r\n                .filter(card => card != null && card.champ.id === champ.id) as ChampCard[];\r\n\r\n            //Case 2\r\n            if (matchingUnits.length === 2) {\r\n                this.mergeUnits(1, availableToBuy); //Upgrade\r\n            } else if (matchingUnits.length === 1 && availableToBuy.length >= 2) {\r\n                if(this.gold >= champ.cost * 2) { //3a\r\n                    cost *= 2; //Increase Cost\r\n                    this.mergeUnits(1, availableToBuy); //Upgrade\r\n                    removeExtra = true; //Flag that theres a 2nd card to remove\r\n                } else { //3b\r\n                    console.log(\"You don't have space and can't afford to buy 2 of unit: \", champ.name);\r\n                    return;\r\n                }\r\n            } else {\r\n                \r\n                console.log(\"You don't have space to buy this unit: \", champ.name);\r\n                return;\r\n            }\r\n        }\r\n\r\n        //Remove card\r\n        const index = this.currentHand.findIndex(c => c != null && c.guid === guid);\r\n        this.currentHand[index] = null;\r\n\r\n        //Remove 2nd card if needed\r\n        if(removeExtra) {\r\n            const index = this.currentHand.findIndex(card => card != null && card.champ.id === champ.id);\r\n            this.currentHand[index] = null;    \r\n        }\r\n\r\n        //Merge Units\r\n        this.mergeUnits(1);\r\n\r\n        console.log(\"Hello\", cost, this.gold);\r\n        //Pay money\r\n        this.gold -= cost;\r\n    }\r\n\r\n    @action\r\n    private mergeUnits(tier: number = 1, extraCards: ChampCard[] = []) {\r\n        const extraUnits: Unit[] = extraCards.map(card => ({champ: card.champ, tier: 1}));\r\n        const boardUnits: (Unit|null)[] = this.boardUnits.map(bu => bu.unit || null);\r\n        const totalUnits: (Unit|null)[] = [...this.benchedUnits, ...boardUnits, ...extraUnits];\r\n\r\n        const onlyCurrentTier = totalUnits.filter(c => c!== null && c.tier === tier) as Unit[];\r\n        \r\n        //Remap to count champions\r\n        const champCount = onlyCurrentTier.reduce((m: object, unit: Unit) => {\r\n            const id = unit.champ.id;\r\n            const val = (m as any)[id];\r\n            if (!val) {\r\n                (m as any)[id] = 1;\r\n            } else {\r\n                (m as any)[id] = val+1;\r\n            }\r\n            return m;\r\n        }, {});\r\n\r\n        //Find champs to merge\r\n        const idsToMerge = Object.keys(champCount).filter(x => (champCount as any)[x] >= 3);\r\n\r\n        //Merge and upgrade the champs\r\n        idsToMerge.forEach(id => {\r\n            const champ = (champions.champions as ChampData[]).find(c => c.id === id);\r\n            \r\n            let index = -1;\r\n            //Remove all of that unit from bench\r\n            while(-1 !== (index = this.benchedUnits.findIndex(unit => \r\n                unit !== null &&\r\n                unit.champ.id === id &&\r\n                unit.tier === tier\r\n            ))) {\r\n                this.benchedUnits[index] = null;\r\n            }\r\n\r\n            //Remove all of that unit from the board\r\n            index = -1;\r\n            let boardIndex = -1;\r\n            while(-1 !== (index = this.boardUnits.findIndex(boardUnit => \r\n                boardUnit.unit !== undefined &&\r\n                boardUnit.unit.champ.id === id &&\r\n                boardUnit.unit.tier === tier\r\n            ))) {\r\n                this.boardUnits[index].unit = undefined;\r\n                boardIndex = index;\r\n            }\r\n\r\n            //Add upgraded unit\r\n            //Priorise returning to board\r\n            if(boardIndex !== -1) {\r\n                this.boardUnits[boardIndex].unit = {\r\n                    tier: tier + 1,\r\n                    champ\r\n                } as Unit;\r\n            } else {\r\n                const firstEmpty = this.benchedUnits.findIndex(x => x === null);\r\n                this.benchedUnits[firstEmpty] = {\r\n                    tier: tier + 1,\r\n                    champ\r\n                } as Unit;    \r\n            }\r\n        });\r\n\r\n        if (tier === 1) {\r\n            this.mergeUnits(2);\r\n        }\r\n    }\r\n\r\n    private getXpForLevelUp(currentLevel: number) {\r\n        return (levels.levels as any)[`level${currentLevel}`].xp;\r\n    }\r\n\r\n    private getInitialPoolSizeForChamp(id: string): number {\r\n        const champ = champions.champions.find(x => x.id === id);\r\n        if(champ == null) { return 0; }\r\n\r\n        switch(champ.cost) {\r\n            case 1: return tiers.unitsPerTier.tier1;\r\n            case 2: return tiers.unitsPerTier.tier2;\r\n            case 3: return tiers.unitsPerTier.tier3;\r\n            case 4: return tiers.unitsPerTier.tier4;\r\n            case 5: return tiers.unitsPerTier.tier5;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    private getCost(roll: number, odds: number[]) {\r\n        let total = 0;\r\n        let index = 0;\r\n       console.log(`You rolled: ${roll}`, odds);\r\n        while(total < roll) {\r\n            total += odds[index];\r\n            ++index;\r\n            console.log(`Total odds for cost ${index} unit: ${total}`);\r\n        }\r\n        console.log(`You're getting as ${index} cost unit`);\r\n\r\n        return index;\r\n    }\r\n\r\n    private getUnitsByCost(cost: number) {\r\n        return champions.champions.filter(champ => champ.cost === cost);\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport './coin.scss'\r\nexport class Coin extends React.Component{\r\n    public render() {\r\n        return (\r\n            <i className=\"coin\">\r\n                <span className=\"a11y\">Coin</span>\r\n            </i>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../../stores/draft-store';\r\nimport { Coin } from '../../shared/coin';\r\nimport { observer } from 'mobx-react';\r\n\r\ninterface DraftSidebarProps {\r\n    draft: DraftStore;\r\n    hideAboveBar: boolean;\r\n}\r\n\r\n@observer\r\nexport class DraftSidebar extends React.Component<DraftSidebarProps> {\r\n    \r\n    public render() {\r\n\r\n        const { draft, hideAboveBar } = this.props;\r\n        const { xp, nextLevelXp, level } = draft;\r\n\r\n        const progress = xp/nextLevelXp * 100;\r\n        const progressStyle = {\r\n            transform: `translateX(${-100 + progress}%)`\r\n        }\r\n\r\n        const lockClass = draft.isHandLocked ? 'closed' : 'open';\r\n\r\n        return (\r\n            <div className=\"draft-sidebar draft-area\">\r\n                {!hideAboveBar && <div className=\"draft-lock above-bar\" onClick={() => draft.toggleHandLock()}>\r\n                    <div className={`lock ${lockClass}`}></div>\r\n                </div> }\r\n                <div className=\"draft-sidebar-items\">\r\n                    <div className=\"sidebar-item refresh clickable\" onClick={() => draft.refreshHand()}>\r\n                        <div className=\"refresh-panel\">\r\n                            <div className=\"content\">\r\n                                <div>Refresh</div>\r\n                                <div><Coin /> {DraftStore.REFRESH_COST}</div>\r\n                            </div>\r\n                            <div className=\"icon\" style={{backgroundImage: \"url(img/refresh.png)\"}}>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"sidebar-item xp clickable\" onClick={() => draft.buyXP()}>\r\n                        <div className=\"xp-panel\">\r\n                            <div className=\"details\">\r\n                                <div className=\"content\">\r\n                                    <div className=\"label\">Buy XP</div>\r\n                                    <div className=\"sub-label\">\r\n                                        <Coin />{DraftStore.BUY_XP_COST}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"icon\" style={{backgroundImage: \"url(img/level-up.png)\"}}></div>\r\n                            </div>\r\n                            <div className=\"xp-progress\">\r\n                                <div className=\"xp-label\">{xp}/{nextLevelXp}</div>\r\n                                <div className=\"xp-progress-bar\">\r\n                                    <div className=\"bar\">\r\n                                        <div className=\"fill\" style={progressStyle}></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"level\">{level}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\nimport { ChampCard } from '../../stores/types';\r\nimport { Coin } from '../shared/coin';\r\n\r\ninterface CardProps {\r\n    card: ChampCard;\r\n    action: (card: ChampCard) => void;\r\n}\r\n\r\nexport class Card extends React.Component<CardProps> {\r\n\r\n    public render() {\r\n        const { card, action } = this.props;\r\n        const { name, cost, id, classes } = card.champ;\r\n\r\n        const style = {\r\n            backgroundImage: `url(${process.env.PUBLIC_URL}/img/champ-square/${id}.png)`\r\n        };\r\n\r\n        return (\r\n            <div className={`champ-card champ-cost-${cost}`} onClick={() => action(card)}>\r\n                <div className=\"decoration\"></div>\r\n                <div className={`hero champ-bg-${id}`} style={style}>\r\n                    {classes.map(x => <div className=\"champ-class\" key={x}>{x}</div>)}\r\n                </div>\r\n                <div className={`banner banner-cost-${cost}`}>\r\n                    <div className=\"name\">{name}</div>\r\n                    <div className=\"cost\">\r\n                        <span>\r\n                            <Coin />\r\n                            {cost}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\n\r\nexport class BlankCard extends React.Component {\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"champ-card blank\">\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Card } from './card';\r\nimport { BlankCard } from './blank-card';\r\nimport { observer } from 'mobx-react';\r\nimport { ChampCard } from '../../stores/types';\r\n\r\n\r\ninterface HandProps {\r\n    hand: ChampCard[];\r\n    action: (card: ChampCard) => void;\r\n}\r\n\r\n\r\n@observer\r\n export class Hand extends React.Component<HandProps> {\r\n\r\n    public render() {\r\n        const { hand, action } = this.props;\r\n\r\n        return (\r\n            <div className=\"hand\">\r\n                {hand.map( (card, index) => Boolean(card) ? \r\n                    <Card card={card} key={card.guid} action={action}/> :\r\n                    <BlankCard key={index + '-blank'} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { Coin } from '../shared/coin';\r\nimport { ChampCard } from '../../stores/types';\r\nimport { Hand } from './hand';\r\nimport { observer } from 'mobx-react';\r\n\r\ninterface DraftMainProps {\r\n    draft: DraftStore;\r\n    hideAboveBar: boolean;\r\n}\r\n\r\n@observer\r\nexport class DraftMain extends React.Component<DraftMainProps> {\r\n    \r\n    public render() {\r\n\r\n        const { draft, hideAboveBar } = this.props;\r\n        const { currentHand, gold} = draft;\r\n\r\n        return (\r\n            <div className=\"draft-main draft-area\">\r\n                {!hideAboveBar && <div className=\"draft-gold-bar above-bar\">\r\n                    <div className=\"draft-gold\">\r\n                        <Coin/>{gold}\r\n                    </div>\r\n                </div>}\r\n                <Hand hand={currentHand} action={x => this.buyCard(x)} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private buyCard(card: ChampCard) {\r\n        console.log(\"Attempting to buy champ\", card.champ.name);\r\n        this.props.draft.buyCard(card);\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { Coin } from '../shared/coin';\r\nimport { observer } from 'mobx-react';\r\n\r\ninterface DraftSellProps {\r\n    draft: DraftStore;\r\n}\r\n\r\n@observer\r\nexport class DraftSell extends React.Component<DraftSellProps> {\r\n    \r\n    public render() {\r\n\r\n        const { draft } = this.props;\r\n        const { selectedUnit } = draft;\r\n        if(selectedUnit === undefined || !selectedUnit.unit) { return null; }\r\n\r\n        const { name } = selectedUnit.unit.champ;\r\n        const cost = draft.getUnitSalePrice(selectedUnit.unit);\r\n\r\n        return (\r\n            <div className=\"draft-sell draft-area\" onClick={() => draft.sellSelectedUnit()}>\r\n                <i className=\"trash\"></i>\r\n                <span>Sell {name} for <Coin /> {cost} </span>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport './draft.scss';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { inject } from 'mobx-react';\r\nimport { observer } from 'mobx-react';\r\nimport { DraftSidebar } from './sidebar/draft-sidebar';\r\nimport { DraftMain } from './draft-main';\r\nimport { DraftSell } from './draft-sell';\r\n\r\ninterface DraftProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Draft extends React.Component<DraftProps> {\r\n    \r\n    public render() {\r\n        const { draft } = this.props;\r\n\r\n        const showSell = draft.selectedUnit !== undefined;\r\n\r\n        return (\r\n            <section className=\"draft\">\r\n                <DraftSidebar draft={draft} hideAboveBar={showSell} />\r\n                <DraftMain draft={draft} hideAboveBar={showSell}/>              \r\n                {showSell && <DraftSell draft={draft} />}\r\n            </section>            \r\n        );\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Synergy } from '../../stores/types';\r\n\r\ninterface SynergyItemProps {\r\n    synergy: Synergy;\r\n}\r\n\r\n@observer\r\nexport class SynergyItem extends React.Component<SynergyItemProps> {\r\n\r\n    public render() {\r\n\r\n        const { synergy } = this.props;\r\n        const { tier } = synergy;\r\n\r\n        const currentBonusIndex = tier === 4 ? -1 : synergy.stages.length - tier;\r\n        const nextBonus = tier === 1 ? -1 : synergy.stages[currentBonusIndex + 1];\r\n        console.log(\"H\", synergy, currentBonusIndex, nextBonus);\r\n        return (\r\n            <div className={`synergy-item tier-${synergy.tier}`}>\r\n                <div className=\"icon\">\r\n                   <img className=\"\" alt=\"icon\" src={`img/class-icons/${synergy.id}.png`} />\r\n                </div>\r\n               <span>\r\n                {synergy.name}: {synergy.count}\r\n                {nextBonus > 0 && <span> / {nextBonus}</span>}\r\n               </span>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Synergy } from '../../stores/types';\r\nimport { SynergyItem } from './synergy-item';\r\n\r\ninterface SynergyTierProps {\r\n    synergies: Synergy[];\r\n    tier: number;\r\n}\r\n\r\n@observer\r\nexport class SynergyTier extends React.Component<SynergyTierProps> {\r\n\r\n    public render() {\r\n\r\n        const { synergies, tier} = this.props;\r\n        if(synergies.length === 0) { return null; }\r\n\r\n        return (\r\n            <div className=\"synergy-tier\">\r\n                <ul className={`tier-${tier}`}>\r\n                    {synergies.map( s => <SynergyItem synergy={s} key={s.id} />)}\r\n                </ul>                \r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { observer } from 'mobx-react';\r\nimport { Synergy } from '../../stores/types';\r\nimport { SynergyTier } from './synergy-tier';\r\n\r\nimport \"./synergy.scss\";\r\n\r\ninterface SynergiesBarProps {\r\n    draft: DraftStore\r\n}\r\n\r\n@observer\r\nexport class SynergiesBar extends React.Component<SynergiesBarProps> {\r\n\r\n    public render() {\r\n        const goldItems = this.getSynergiesOfTier(1);\r\n        const silverItems = this.getSynergiesOfTier(2);\r\n        const bronzeItems = this.getSynergiesOfTier(3);\r\n        const greyItems = this.getSynergiesOfTier(4);\r\n\r\n        const tiers = [ goldItems, silverItems, bronzeItems, greyItems ];\r\n\r\n        return (\r\n            <section className=\"synergies\">\r\n                { tiers.map((tier, index) => \r\n                    <SynergyTier synergies={tier} tier={index + 1} key={`tier_${index + 1}`} />\r\n                )}\r\n            </section>\r\n\r\n        );\r\n    }\r\n\r\n    private getSynergiesOfTier(tier: number): Synergy[] {\r\n        return this.props.draft.unitSynergiesWithTiers.filter(s => s.tier === tier);\r\n    }\r\n}","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { DraftStore } from '../../stores/draft-store';\r\n\r\nimport './simulation.scss';\r\nimport { SynergiesBar } from '../synergies/synergies-bar';\r\n\r\ninterface SimulationProps {\r\n    draft?: DraftStore\r\n}\r\n\r\n@inject(\"draft\")\r\n@observer\r\nexport class Simulation extends React.Component<SimulationProps> {\r\n    public render() {\r\n        const { draft } = this.props;\r\n        if (!draft) { return null; }\r\n\r\n        return (\r\n            <section className=\"simulation\">\r\n                <div className=\"inner\">\r\n                    <SynergiesBar draft={draft} />\r\n                    <div className=\"level-section\">\r\n                        <span>Units Placed: {draft.placedUnitCount} / { draft.level}</span>\r\n                    </div>\r\n                    <div className=\"round-section\">\r\n                        <span>Current Round: {draft.roundCount}</span>\r\n                        <button onClick={() => draft.nextRound()}>Next Round</button>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './main-page.scss';\r\n\r\nimport { Board } from './board/board';\r\nimport { Bench } from './bench/bench';\r\nimport { Draft } from './draft/draft';\r\n\r\nimport { DraftStore } from '../stores/draft-store';\r\nimport { observable } from 'mobx';\r\n\r\nimport * as ChampionsData from '../data/champions.json';\r\nimport { Provider } from 'mobx-react';\r\nimport { Simulation } from './simulation/simulation';\r\nexport class MainPage extends React.Component {\r\n\r\n    @observable\r\n    draftStore: DraftStore = null;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.draftStore = new DraftStore();\r\n\r\n        this.draftStore.initializePool();\r\n        this.draftStore.drawHand();\r\n        console.log(this.draftStore);\r\n\r\n        window[\"champions\"] = ChampionsData;\r\n\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <section className=\"main-page\">\r\n                <Provider draft={this.draftStore} >\r\n                    <>\r\n                        <div className=\"split\">\r\n                            <div className=\"split-section aside\">\r\n                                <Simulation />\r\n                            </div>\r\n                            <div className=\"split-section main\">\r\n                                <Board />\r\n                                <Bench />\r\n                            </div>\r\n                        </div>\r\n                        <Draft />\r\n                    </>\r\n                </Provider>\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './app.scss';\r\nimport { MainPage } from './components/main-page';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"theory-draft app\">\r\n      <main>\r\n        <MainPage />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}