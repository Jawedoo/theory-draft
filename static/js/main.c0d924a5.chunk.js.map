{"version":3,"sources":["logo.svg","components/board/cell.tsx","components/board/board.tsx","components/champion/champion.tsx","components/bench/bench-slot.tsx","components/bench/bench.tsx","components/hand/card.tsx","components/hand/hand.tsx","components/hand/draft.tsx","stores/draft-store.ts","components/main-page.tsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Cell","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","x","y","unit","react","className","JSON","stringify","React","Board","_this","call","renderRow","bind","assertThisInitialized","fullBoard","WIDTH","HEIGHT","push","findCellData","getCoords","rows","getRow","map","i","start","end","slice","cells","row","isOdd","c","cell_Cell","assign","index","cellData","_Board$getCoords","find","datum","Math","floor","Champion","stars","getTierString","name","cost","tier","BenchSlot","Boolean","champion_Champion","Bench","units","bench_slot_BenchSlot","BENCH_SIZE","Card","id","classes","concat","Hand","hand","champ","card_Card","Draft","currentHand","currentGold","hand_Hand","DraftStore","_class","initializerDefineProperty","_descriptor","_descriptor2","pool","champions","flatMap","poolSize","getInitialPoolSizeForChamp","toConsumableArray","Array","fill","objectSpread","tiers","tier1","tier2","tier3","tier4","tier5","length","drawCard","odds","levels","tierOdds","roll","random","getCost","cardSet","filter","card","splice","console","log","total","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","MainPage","main_page_class","main_page_descriptor","draftStore","initializePool","drawHand","board_Board","bench_Bench","draft_Draft","App","react_default","a","createElement","main_page_MainPage","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0d924a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from 'react';\n\ninterface CellProps {\n    x: number;\n    y: number;\n    unit?: any;\n}\n\nexport class Cell extends React.Component<CellProps> {\n    public render() {\n        const { x, y, unit } = this.props;\n        \n        return (\n            <div className=\"cell\">\n                <div className=\"contents\">\n                    {x}, {y}, {unit && JSON.stringify(unit, null, 2)}\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { CellOccupancy } from './cell-occupancy';\nimport { Cell } from './cell';\ninterface BoardProps {\n    cellData: CellOccupancy[];\n}\n\nexport class Board extends React.Component<BoardProps> {\n    public static WIDTH = 7;\n    public static HEIGHT = 3;\n\n    public constructor(props) {\n        super(props);\n        this.renderRow = this.renderRow.bind(this);\n    }\n\n    public render() {\n\n        let fullBoard = [];\n        for (let x = 0; x < Board.WIDTH * Board.HEIGHT; ++x) {\n            fullBoard.push(this.findCellData(x) || Board.getCoords(x));\n        }\n\n        let rows = [];\n        for (let x = 1; x <= Board.HEIGHT; ++x) {\n            rows.push(this.getRow(fullBoard, x));\n        }\n\n        return (\n            <div className=\"board\">\n                {rows.map(this.renderRow)}                \n            </div>\n        );\n    }\n\n    private getRow(fullBoard, i) {\n        const start = Board.WIDTH * (i-1);\n        const end = Board.WIDTH * i;\n\n        return fullBoard.slice(start, end);\n    }\n\n\n    private renderRow(cells, row) {\n        const isOdd = row%2 === 1; \n        return (\n            <div className=\"board__row\" key={row}>\n                {isOdd && <div className=\"board-spacer spacer--left\"></div>}\n                {cells.map(c=>\n                    <Cell key={c.x + ',' + c.y} {...c} />\n                )}\n                {!isOdd && <div className=\"board-spacer spacer--right\"></div>}\n            </div>\n        );\n    }\n\n    private findCellData(index) {\n        const { cellData } = this.props;\n        const {x, y} = Board.getCoords(index);\n\n        return cellData.find(datum => datum.x === x && datum.y === y) || null;\n    }\n\n    public static getIndex(x, y) {\n        return y * Board.WIDTH + x;\n    }\n\n    public static getCoords(index) {\n        return {\n            x: index % Board.WIDTH,\n            y: Math.floor(index / Board.WIDTH)\n        };\n    }\n}","import * as React from 'react';\nimport { Unit } from '../../stores/unit';\n\ninterface ChampionProps {\n    unit: Unit;\n}\n\nexport class Champion extends React.Component<ChampionProps> {\n\n    public render() {\n        const { unit } = this.props;\n\n        const stars = this.getTierString(unit);\n\n        return (\n            <div className=\"champion\">\n                <div className=\"champion-name\">{unit.name}</div>\n                <div className=\"champion-tier\">{stars}</div>\n                <div className=\"champion-cost\">{unit.cost}</div>\n            </div>\n        );\n    }\n\n    private getTierString(unit: Unit): string {\n        switch(unit.tier) {\n            case 1: return '*';\n            case 2: return '**';\n            case 3: return '***';\n        }\n    }\n}","import * as React from 'react';\nimport { Unit } from '../../stores/unit';\nimport { Champion } from '../champion/champion';\n\ninterface BenchSlotProps {\n    unit?: Unit;\n}\n\nexport class BenchSlot extends React.Component<BenchSlotProps> {\n    public render() {\n        const { unit } = this.props;\n\n        return (\n            <div className=\"bench-slot\">\n                {Boolean(unit) && <Champion unit={unit} />}\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { Unit } from '../../stores/unit';\nimport { BenchSlot } from './bench-slot';\nimport './bench.css';\ninterface BenchProps {\n    units: Unit[];\n}\n\nexport class Bench extends React.Component<BenchProps> {\n\n    public static BENCH_SIZE = 9;\n\n    public render() {\n        const { units } = this.props;\n\n        return (\n            <div className=\"bench\">\n                {units.map((unit, index) => <BenchSlot unit={unit} key={index}/>)}\n            </div>\n        );\n    }\n}","import * as React from 'react';\n\nimport './card.scss';\n\ninterface CardProps {\n    id: string,\n    name: string,\n    cost: number,\n    classes: string[]\n}\n\nexport class Card extends React.Component<CardProps> {\n\n    public render() {\n        const { name, cost, id, classes } = this.props;\n\n        return (\n            <div className=\"champ-card\">\n                <div className={`hero champ-bg-${id}`}>\n                    {classes.map(x => <div className=\"champ-class\" key={x}>{x}</div>)}\n                </div>\n                <div className={`banner banner-cost-${cost}`}>\n                    <div className=\"name\">{name}</div>\n                    <div className=\"cost\">{cost}</div>\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { Card } from './card';\nimport { ChampData } from '../../stores/draft-store';\n\ninterface HandProps {\n    hand: ChampData[];\n}\n\nexport class Hand extends React.Component<HandProps> {\n\n    public render() {\n        const { hand } = this.props;\n\n        return (\n            <div className=\"hand\">\n                {hand.map( (champ, index) => <Card {...champ} key={index + champ.id}/>)}\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { Hand } from './hand';\nimport './draft.css';\nimport { ChampData } from '../../stores/draft-store';\n\ninterface DraftProps {\n    currentHand: ChampData[];\n    currentGold: number;\n}\n\nexport class Draft extends React.Component<DraftProps> {\n    public render() {\n        const { currentHand, currentGold } = this.props;\n\n        return (\n            <div className=\"draft\">\n                <div className=\"draft-sidebar draft-area\">\n                    <div className=\"draft-lock above-bar\">\n                        Lock\n                    </div>\n                    <div className=\"draft-sidebar-items\">\n                        <div className=\"sidebar-item refresh\">\n                            Refresh\n                        </div>\n                        <div className=\"sidebar-item xp\">\n                            <div className=\"xp-panel\">\n                                <div className=\"label\">Buy XP</div>\n                                <div className=\"sub-label\">() 4</div>\n                                <div className=\"xp-progress\">\n                                    {/* TODO: XP stats */}\n                                    <div className=\"xp-label\">4/16</div>\n                                    <div className=\"xp-progress-bar\">||....</div>\n                                    <div className=\"level\">5</div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"draft-main draft-area\">\n                    <div className=\"draft-gold-bar above-bar\">\n                        <div className=\"draft-gold\">\n                            {currentGold}\n                        </div>\n                    </div>\n                    <Hand hand={currentHand} />\n                </div>\n            </div>            \n        );\n    }\n}","import { observable } from 'mobx';\n\nimport * as tiers from '../data/tiers.json';\nimport * as levels from '../data/levels.json';\nimport * as champions from '../data/champions.json';\n\nexport interface ChampData {\n    id: string;\n    name: string;\n    cost: number;\n    classes: string[];\n}\n\nexport class DraftStore {\n\n    @observable\n    pool: ChampData[];\n\n    @observable\n    currentHand: ChampData[];\n\n    constructor() {\n        this.pool = [];\n        this.currentHand = [];\n    }\n\n    public initializePool() {\n        this.pool = champions.champions.flatMap(champ => {\n            const poolSize = this.getInitialPoolSizeForChamp(champ.id);\n            return [...Array(poolSize)].fill({\n                ...champ\n            });\n        });\n    }\n\n    private getInitialPoolSizeForChamp(id: string): number {\n        const champ = champions.champions.find(x => x.id === id);\n        if(champ == null) { return 0; }\n\n        switch(champ.cost) {\n            case 1: return tiers.unitsPerTier.tier1;\n            case 2: return tiers.unitsPerTier.tier2;\n            case 3: return tiers.unitsPerTier.tier3;\n            case 4: return tiers.unitsPerTier.tier4;\n            case 5: return tiers.unitsPerTier.tier5;\n            default: return 0;\n        }\n    }\n\n    public drawHand() {\n        while(this.currentHand.length < 5) {\n            this.drawCard();\n        }\n    }\n\n    public drawCard() {\n        //TODO: player level;\n        const level = 6;\n\n        const odds = levels.levels[level].tierOdds;\n        const roll = Math.random();\n\n        const cost = this.getCost(roll, odds);\n\n        const cardSet = this.pool.filter(x => x.cost === cost);\n        const index = Math.floor(Math.random() * cardSet.length);\n        const card = cardSet[index];\n\n        this.currentHand.push(card);\n        this.pool.splice(index, 1);\n        console.log(`Your new card: ${card.name}`);\n    }\n\n    private getCost(roll: number, odds: number[]) {\n        let total = 0;\n        let index = 0;\n       console.log(`You rolled: ${roll}`, odds);\n        while(total < roll) {\n            total += odds[index];\n            ++index;\n            console.log(`Total odds for cost ${index} unit: ${total}`);\n        }\n        console.log(`You're getting as ${index} cost unit`);\n\n        return index;\n    }\n\n    private getUnitsByCost(cost: number) {\n        return champions.champions.filter(champ => champ.cost === cost);\n    }\n\n}","import * as React from 'react';\nimport { Board } from './board/board';\nimport { Bench } from './bench/bench';\nimport { Draft } from './hand/draft';\n\nimport { DraftStore } from '../stores/draft-store';\nimport { observable } from 'mobx';\n\nexport class MainPage extends React.Component {\n\n    @observable\n    draftStore: DraftStore = null;\n\n    constructor(props) {\n        super(props);\n        this.draftStore = new DraftStore();\n\n        this.draftStore.initializePool();\n        this.draftStore.drawHand();\n        console.log(this.draftStore);\n\n    }\n\n    public render() {\n\n        const units = [...Array(Bench.BENCH_SIZE)].map(x => null);\n\n        return (\n            <section className=\"main-page\">\n                <Board cellData={[]}/>\n                <Bench units={units} />\n                <Draft currentHand={this.draftStore.currentHand} currentGold={23} />\n            </section>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { MainPage } from './components/main-page';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <MainPage />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}