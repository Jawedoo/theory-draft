{"version":3,"sources":["components/champion/champion.tsx","stores/drag-drop.ts","components/board/cell.tsx","utils.ts","components/board/board.tsx","components/bench/bench-slot.tsx","components/bench/bench.tsx","stores/draft-store.ts","components/shared/coin.tsx","components/draft/sidebar/draft-refresh-panel.tsx","components/draft/sidebar/draft-xp-panel.tsx","components/draft/sidebar/next-round-panel.tsx","components/draft/sidebar/draft-sidebar.tsx","components/draft/card.tsx","components/draft/blank-card.tsx","components/draft/hand.tsx","components/draft/draft-main.tsx","components/draft/draft-sell.tsx","components/draft/tooltip/tooltip.tsx","components/draft/draft.tsx","components/synergies/synergy-item.tsx","components/synergies/synergy-tier.tsx","components/synergies/synergies-bar.tsx","components/simulation/simulation.tsx","components/hotkeys.tsx","components/advanced/editor.tsx","components/advanced/advanced.tsx","components/splash/splash.tsx","stores/data-store.ts","components/main-page.tsx","App.js","serviceWorker.js","index.js"],"names":["Champion","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","unit","props","champ","stars","getTierString","style","backgroundImage","concat","process","id","react","className","name","tier","React","Types","Cell","_ref","boardUnit","isActive","onPickUpUnit","onDropUnit","onDrop","index","_useDrag","useDrag","item","type","collect","monitor","isDragging","begin","end","_useDrag2","slicedToArray","drag","_useDrop","useDrop","accept","drop","isOver","canDrop","_useDrop2","_useDrop2$","dragClass","activeClass","overClass","ref","Boolean","champion_Champion","BOARD_WIDTH","BOARD_HEIGHT","Board","inject","_dec","_class","observer","call","_this","draft","rows","toConsumableArray","Array","map","_","getRow","row","renderRow","i","start","boardUnits","slice","_this2","activeUnit","isOdd","activeBoardIndex","undefined","isBenched","bu","cell_Cell","getKey","source","dest","unitPickedUp","unitDropped","selectionA","selectionB","swapUnits","shiftUnitToBoard","BenchSlot","Bench","bench_dec","bench_class","benchedUnits","activeBenchIndex","bench_slot_BenchSlot","shiftUnitToBench","DraftStore","_temp","_class2","dataStore","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","showPlacedDisposer","autorun","placedUnitCount","showPlaced","setTimeout","pool","currentHand","nextLevelXp","getXpForLevelUp","level","BENCH_SIZE","fill","console","log","initializePool","drawHand","isSplashOpen","selA","selB","selection","moveUnitToBench","moveUnitToBoard","clearUnitFromCurrentSpace","newBoardUnit","isHandLocked","roundCount","gold","calculateIncome","addXP","XP_PER_ROUND","REFRESH_COST","refreshHand","calculatePassiveIncome","calculateInterest","calculateStreakBonus","Math","min","floor","MAXIMIM_INTEREST","forEach","card","push","BUY_XP_COST","amount","xp","unitSelection","unitExists","getUnitSalePrice","returnUnitToPool","guids","filter","x","guid","iterations","pow","includes","tierBonus","cost","length","drawCard","levelData","levels","get","odds","tierOdds","roll","random","getCost","cardSet","indexToRemove","findIndex","c","splice","_this3","champions","flatMap","poolSize","getInitialPoolSizeForChamp","removeExtra","firstEmpty","matchingBenchUnits","matchingBoardUnits","matchingUnits","availableToBuy","mergeUnits","_this4","extraUnits","champCount","reduce","m","val","keys","find","boardIndex","currentLevel","_this$dataStore","unitsPerTier","total","_this5","champIds","Set","classes","sort","obj","_this6","unitSynergies","synergyData","synergies","count","medalIndex","stages","exact","active","objectSpread","draft_store_class","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","computed","Coin","RefreshPanel","refresh","setTooltip","onClick","onMouseEnter","onMouseLeave","coin_Coin","BuyXpPanel","buyXP","progressStyle","transform","NextRoundPanel","nextRound","DraftSidebar","draft_sidebar_class","_this$props","draft_refresh_panel_RefreshPanel","draft_xp_panel_BuyXpPanel","next_round_panel_NextRoundPanel","Card","_card$champ","BlankCard","Hand","hand_class","hand","card_Card","blank_card_BlankCard","DraftMain","draft_main_class","hand_Hand","buyCard","DraftSell","sellUnit","getContent","tooltip","renderIncomeTooltip","renderNextRoundTooltip","renderLockHandTooltip","Tooltip","content","Draft","draft_dec","draft_class","state","activeTooltip","showSell","area","setState","lockClass","toggleHandLock","draft_sidebar_DraftSidebar","draft_main_DraftMain","draft_sell_DraftSell","tooltip_Tooltip","SynergyItem","synergy_item_class","synergy","currentBonusIndex","nextBonus","alt","src","SynergyTier","synergy_tier_class","s","synergy_item_SynergyItem","SynergiesBar","synergies_bar_class","tiers","getSynergiesOfTier","synergy_tier_SynergyTier","unitSynergiesWithTiers","Simulation","simulation_dec","simulation_class","fadeClass","synergies_bar_SynergiesBar","Hotkeys","useHotkeys","Editor","json","onChange","schema","es","ace","theme","AdvancedScreen","activeDataset","updatedData","data","mapToObj","JSON","parse","stringify","_this$state","setLevelsFromJson","setUnitsPerTierFromJson","setChampsFromJson","close","setActive","setActiveDataset","bind","getTitle","editor_Editor","getActiveJson","j","updateActiveDataset","getSchema","applyChanges","SplashScreen","isAdvancedOpen","advanced_AdvancedScreen","closeAdvancedPage","openAdvancedPage","DataStore","data_store_temp","data_store_class2","data_store_descriptor","data_store_descriptor2","data_store_descriptor3","Map","tiersData","levelsData","championsData","clear","Number","set","emptyLevel","emptyChamp","data_store_class","MainPage","main_page_class2","main_page_descriptor","assertThisInitialized","draftStore","splash_SplashScreen","lib","backend","MultiBackend","HTML5toTouch","mobx_react_module","simulation_Simulation","board_Board","bench_Bench","draft_Draft","hotkeys_Hotkeys","main_page_class","App","react_default","a","createElement","main_page_MainPage","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c709331b.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Unit } from '../../stores/types';\r\n\r\ninterface ChampionProps {\r\n    unit: Unit;\r\n}\r\n\r\nexport class Champion extends React.Component<ChampionProps> {\r\n\r\n    public render() {\r\n        const { unit } = this.props;\r\n        const { champ } = unit;\r\n\r\n        const stars = this.getTierString(unit);\r\n\r\n        const style = {\r\n            backgroundImage: `url(${process.env.PUBLIC_URL}/img/champ-square/${champ.id}.png)`\r\n        };\r\n\r\n        return (\r\n            <div className=\"champion\" style={style}>\r\n                <div className=\"champion-tier\">{stars}</div>\r\n                <div className=\"champion-name\">{champ.name}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getTierString(unit: Unit): string {\r\n        switch(unit.tier) {\r\n            case 1: return '★';\r\n            case 2: return '★★';\r\n            case 3: return '★★★';\r\n        }\r\n    }\r\n}","export const Types = {\r\n    BENCH: 'bench',\r\n    BOARD: 'board',\r\n    SELL: 'sell'\r\n}","import * as React from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\nimport { BoardUnit, Unit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\nimport { Types } from '../../stores/drag-drop';\r\n// import {Preview } from 'react-dnd-multi-backend';\r\n\r\ninterface CellProps {\r\n    boardUnit: BoardUnit;\r\n    isActive: boolean;\r\n    onPickUpUnit: (unit: Unit, index: number) => void;\r\n    onDropUnit: () => void;\r\n    onDrop:(source: any, dest: any) => void;\r\n}\r\n\r\n// const generatePreview = (type, item, style) => {\r\n//     const modStyle = {\r\n//         ...style,\r\n//         width: '8em',\r\n//         height: '8em'\r\n//     };\r\n//     return <div className=\"cell\" style={modStyle}>\r\n//         <div className=\"contents\">\r\n//             <Champion unit={item.unit} />\r\n//         </div>\r\n//     </div>;\r\n// }\r\n\r\nexport const Cell: React.FC<CellProps> = ({\r\n    boardUnit,\r\n    isActive,\r\n    onPickUpUnit,\r\n    onDropUnit,\r\n    onDrop\r\n }) => {\r\n    const { unit, index } = boardUnit;\r\n    \r\n    const [{isDragging}, drag] = useDrag({\r\n        item: { unit, index, type: Types.BOARD },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        begin: () => onPickUpUnit(unit, index),\r\n        end: () => onDropUnit()\r\n    });\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: [Types.BENCH, Types.BOARD],\r\n        drop: (item) => onDrop(item, {\r\n            unit,\r\n            index,\r\n            type: Types.BOARD\r\n        }),\r\n        collect: monitor => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n    });    \r\n\r\n    const dragClass = isDragging ? 'dragging' : '';\r\n    const activeClass = isActive ? 'active' : '';\r\n    const overClass = isOver && canDrop ? 'drag-over' : '';\r\n\r\n    return (\r\n        <div ref={drop} className={`cell ${dragClass} ${activeClass} ${overClass}`}>\r\n            <div ref={drag} className=\"contents\">\r\n                {Boolean(unit) && <Champion unit={unit} /> }\r\n            </div>\r\n            {/* <Preview generator={generatePreview} /> */}\r\n        </div>\r\n    );\r\n}","import { Coords } from './stores/types';\r\n\r\nexport const BOARD_WIDTH = 7;\r\nexport const BOARD_HEIGHT = 3;\r\n\r\nexport const getIndexForCoords = (x: number, y: number): number => {\r\n    return y * BOARD_WIDTH + x;\r\n}\r\n\r\nexport const getCoordsForIndex = (index: number): Coords => {\r\n    return {\r\n        x: index % BOARD_WIDTH,\r\n        y: Math.floor(index / BOARD_WIDTH)\r\n    };\r\n}","import * as React from 'react';\r\nimport { Cell } from './cell';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport \"./board.scss\";\r\nimport { BOARD_HEIGHT, BOARD_WIDTH } from '../../utils';\r\nimport { BoardUnit, UnitSelection, Unit } from '../../stores/types';\r\nimport { Types } from '../../stores/drag-drop';\r\n\r\ninterface BoardProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Board extends React.Component<BoardProps> {\r\n\r\n    public constructor(props: BoardProps) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        const { draft } = this.props;\r\n\r\n        if(!draft) { return; }\r\n\r\n        const rows = [...Array(BOARD_HEIGHT)].map((_, index) => this.getRow(index + 1));\r\n\r\n        return (\r\n            <div className=\"board\">\r\n                {rows.map((row: BoardUnit[], index: number) => this.renderRow(row, index))}                \r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getRow(i: number): BoardUnit[] {\r\n        const { draft } = this.props;\r\n        const start = BOARD_WIDTH * (i - 1);\r\n        const end = BOARD_WIDTH * i;\r\n\r\n        return draft.boardUnits.slice(start, end);\r\n    }\r\n\r\n\r\n    private renderRow(boardUnits: BoardUnit[], row: number) {\r\n        const {draft} = this.props;\r\n        const { activeUnit } = draft;\r\n        const isOdd = row%2 === 1;\r\n        const activeBoardIndex = (activeUnit !== undefined && !activeUnit.isBenched) ? activeUnit.index : -1;\r\n\r\n        return (\r\n            <div className=\"board__row\" key={row}>\r\n                {isOdd && <div className=\"board-spacer spacer--left\"></div>}\r\n                {boardUnits.map(bu=>\r\n                    <Cell\r\n                        key={this.getKey(bu)}\r\n                        boardUnit={bu}\r\n                        isActive={activeBoardIndex === bu.index}\r\n                        onPickUpUnit={(unit, index) => this.onPickUpUnit(unit, index)}\r\n                        onDropUnit={() => this.onDropUnit()}\r\n                        onDrop={(source, dest) => this.onDrop(source, dest)}                        \r\n                    />\r\n                )}\r\n                {!isOdd && <div className=\"board-spacer spacer--right\"></div>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onPickUpUnit(unit: Unit, index: number) {\r\n        const { draft } = this.props;\r\n        draft.unitPickedUp({\r\n            unit,\r\n            index,\r\n            isBenched: false\r\n        } as UnitSelection);\r\n        \r\n    }\r\n\r\n    private onDropUnit() {\r\n        const { draft } = this.props;\r\n        draft.unitDropped();\r\n    }\r\n\r\n    private onDrop(source, dest) {\r\n        const { draft } = this.props;\r\n        \r\n        const selectionA = {\r\n            unit: source.unit,\r\n            index: source.index,\r\n            isBenched: source.type === Types.BENCH\r\n        } as UnitSelection;\r\n\r\n        const selectionB = {\r\n            unit: dest.unit,\r\n            index: dest.index,\r\n            isBenched: dest.type === Types.BENCH\r\n        } as UnitSelection;\r\n\r\n        //Is destination empty\r\n        if(!dest.unit) {\r\n            draft.shiftUnitToBoard(selectionA, dest.index);\r\n        } else {\r\n            draft.swapUnits(selectionA, selectionB);\r\n        }\r\n    }\r\n    \r\n    private getKey(boardUnit: BoardUnit): string {\r\n        const { unit, index } = boardUnit;\r\n        if(unit === undefined) {\r\n            return `blank_${index}`;\r\n        } else {\r\n            return `${unit.champ.id}_${unit.tier}_${index}`;\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\n\r\nimport { Unit } from '../../stores/types';\r\nimport { Champion } from '../champion/champion';\r\nimport { Types } from '../../stores/drag-drop';\r\n\r\ninterface BenchSlotProps {\r\n    unit?: Unit;\r\n    index: number;\r\n    isActive: boolean;\r\n    onPickUpUnit: (unit: Unit, index: number) => void;\r\n    onDropUnit: () => void;\r\n    onDrop:(source: any, dest: any) => void;\r\n}\r\n\r\nexport const BenchSlot: React.FC<BenchSlotProps> = ({\r\n    unit,\r\n    index,\r\n    isActive,\r\n    onPickUpUnit,\r\n    onDropUnit,\r\n    onDrop\r\n}) => {    \r\n    const [{isDragging}, drag] = useDrag({\r\n        item: { unit, index, type: Types.BENCH },\r\n        collect: monitor => ({\r\n            isDragging: monitor.isDragging()\r\n        }),\r\n        begin: () => onPickUpUnit(unit, index),\r\n        end: () => onDropUnit()\r\n    });\r\n\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: [Types.BENCH, Types.BOARD],\r\n        drop: (item) => onDrop(item, {\r\n            unit,\r\n            index,\r\n            type: Types.BENCH\r\n        }),\r\n        collect: monitor => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n    });\r\n\r\n    const dragClass = isDragging ? 'dragging' : '';\r\n    const activeClass = isActive ? 'active' : '';\r\n    const overClass = isOver && canDrop ? 'drag-over' : '';\r\n    return (\r\n        <div ref={drop} className={`bench-slot ${activeClass} ${dragClass} ${overClass}`}>\r\n            <div ref={drag} className=\"bench-slot-inner\">\r\n                {Boolean(unit) && <Champion unit={unit} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { BenchSlot } from './bench-slot';\r\nimport './bench.scss';\r\nimport { inject, observer } from 'mobx-react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { UnitSelection, Unit } from '../../stores/types';\r\nimport { Types } from '../../stores/drag-drop';\r\ninterface BenchProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Bench extends React.Component<BenchProps> {\r\n    public render() {\r\n        const { draft } = this.props;\r\n        const { benchedUnits, activeUnit } = draft;\r\n        const activeBenchIndex = (activeUnit !== undefined && activeUnit.isBenched) ? activeUnit.index : -1;\r\n\r\n        return (\r\n            <div className=\"bench\">\r\n                {benchedUnits.map((unit, index) => <BenchSlot\r\n                    unit={unit}\r\n                    index={index}\r\n                    isActive={activeBenchIndex === index}\r\n                    onPickUpUnit={(unit, index) => this.onPickUpUnit(unit, index)}\r\n                    onDropUnit={() => this.onDropUnit()}\r\n                    onDrop={(source, dest) => this.onDrop(source, dest)}\r\n                    key={ `${unit ? unit.champ.id + '_' + unit.tier : 'blank'}_${index}`}\r\n                />)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onPickUpUnit(unit: Unit, index: number) {\r\n        const { draft } = this.props;\r\n        draft.unitPickedUp({\r\n            unit,\r\n            index,\r\n            isBenched: true\r\n        } as UnitSelection);\r\n        \r\n    }\r\n\r\n    private onDropUnit() {\r\n        const { draft } = this.props;\r\n        draft.unitDropped();\r\n    }\r\n\r\n    private onDrop(source, dest) {\r\n        const { draft } = this.props;\r\n        \r\n        const selectionA = {\r\n            unit: source.unit,\r\n            index: source.index,\r\n            isBenched: source.type === Types.BENCH\r\n        } as UnitSelection;\r\n        const selectionB = {\r\n            unit: dest.unit,\r\n            index: dest.index,\r\n            isBenched: dest.type === Types.BENCH\r\n        } as UnitSelection;\r\n\r\n        //Is destination empty\r\n        if(!dest.unit) {\r\n            draft.shiftUnitToBench(selectionA, dest.index);\r\n        } else {\r\n            draft.swapUnits(selectionA, selectionB);\r\n        }\r\n\r\n    }\r\n}","import { observable, action, computed, autorun } from 'mobx';\r\n\r\nimport { synergies } from '../data/synergies.json';\r\nimport { Unit, ChampData, ChampCard, UnitSelection, BoardUnit, SynergyData, Synergy } from './types';\r\nimport { BOARD_WIDTH, BOARD_HEIGHT } from '../utils';\r\nimport { DataStore } from './data-store';\r\n\r\n\r\nexport class DraftStore {\r\n\r\n    public static REFRESH_COST = 2;\r\n    public static BUY_XP_COST = 4;\r\n    public static BENCH_SIZE = 9;\r\n    public static XP_PER_ROUND = 2;\r\n    public static MAXIMIM_INTEREST = 5;\r\n\r\n    dataStore: DataStore;\r\n\r\n    @observable\r\n    pool: ChampCard[];\r\n\r\n    @observable\r\n    currentHand: (ChampCard | null)[];\r\n\r\n    @observable\r\n    benchedUnits: (Unit | null)[] = [];\r\n\r\n    @observable\r\n    boardUnits: BoardUnit[] = [];\r\n\r\n    @observable\r\n    xp: number = 0;\r\n\r\n    @observable\r\n    nextLevelXp: number = 2;\r\n\r\n    @observable\r\n    level: number = 1;\r\n\r\n    @observable\r\n    gold: number = 3;\r\n\r\n    @observable\r\n    isHandLocked: boolean = false;\r\n\r\n    @observable\r\n    activeUnit?: UnitSelection = undefined;\r\n\r\n    @observable\r\n    roundCount: number = 1;\r\n\r\n    @observable\r\n    isSplashOpen = true;\r\n\r\n    constructor(dataStore: DataStore) {\r\n        this.dataStore = dataStore;\r\n        this.pool = [];\r\n        this.currentHand = [];\r\n        this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n        this.benchedUnits = [...Array(DraftStore.BENCH_SIZE)].fill(null);\r\n        this.boardUnits = [...Array(BOARD_WIDTH * BOARD_HEIGHT)].map(\r\n            (_, index) => ({ unit: undefined, index } as BoardUnit)\r\n        );\r\n    }\r\n\r\n    \r\n    @action\r\n    public start() {\r\n        console.log(\"Lets Go!\");     \r\n        this.initializePool();\r\n        this.drawHand();\r\n        this.isSplashOpen = false;\r\n    }\r\n\r\n /*****************************\r\n * Unit Selection and Movement\r\n ******************************/\r\n\r\n    public selectionsMatch(selA: UnitSelection, selB: UnitSelection): boolean {\r\n        return selA !== undefined\r\n            && selB !== undefined\r\n            && selB.index === selA.index\r\n            && selB.isBenched === selA.isBenched        \r\n    }\r\n\r\n    @action unitPickedUp(selection: UnitSelection) {\r\n        this.activeUnit = selection;\r\n    }\r\n\r\n    @action unitDropped() {\r\n        this.activeUnit = undefined;\r\n    }\r\n\r\n    @action\r\n    public swapUnits(source: UnitSelection, dest: UnitSelection) {\r\n        if(source.isBenched) {\r\n            this.moveUnitToBench(dest.unit, source.index);\r\n        } else {\r\n            this.moveUnitToBoard(dest.unit, source.index);\r\n        }\r\n\r\n        if(dest.isBenched) {\r\n             this.moveUnitToBench(source.unit, dest.index);\r\n         } else {\r\n            this.moveUnitToBoard(source.unit, dest.index);\r\n         }\r\n    }\r\n\r\n    @action\r\n    public shiftUnitToBench(selection: UnitSelection, index: number) {\r\n        //Only if bench is empty\r\n        if(this.benchedUnits[index] !== null) { \r\n            return;\r\n        }\r\n\r\n        //Remove unit from current space\r\n        this.clearUnitFromCurrentSpace(selection);\r\n\r\n        //Move into new space\r\n        this.moveUnitToBench(selection.unit, index)\r\n    }\r\n\r\n    @action\r\n    public shiftUnitToBoard(selection: UnitSelection, index: number) {\r\n        //Only if board space is empty\r\n        if(this.boardUnits[index].unit !== undefined) { \r\n            return;\r\n        }\r\n\r\n        if(this.placedUnitCount >= this.level) {\r\n            return;\r\n        }\r\n\r\n        //Remove unit from current space\r\n        this.clearUnitFromCurrentSpace(selection);\r\n\r\n        //Move into new space\r\n        this.moveUnitToBoard(selection.unit, index)\r\n    }\r\n\r\n    private clearUnitFromCurrentSpace(selection: UnitSelection) {\r\n        if(selection.isBenched) {\r\n            this.benchedUnits[selection.index] = null;\r\n        } else {\r\n            this.boardUnits[selection.index].unit = undefined;\r\n        }\r\n    }\r\n\r\n    @action\r\n    private moveUnitToBench(unit: Unit, index: number) {\r\n        this.benchedUnits[index] = unit;\r\n    }\r\n\r\n    @action\r\n    private moveUnitToBoard(unit: Unit, index: number) {\r\n        const newBoardUnit = { index, unit } as BoardUnit;\r\n        this.boardUnits[index] = newBoardUnit;\r\n    }\r\n\r\n/***************************\r\n * Synergies and Place Units\r\n ***************************/\r\n    \r\n    @computed\r\n    public get placedUnitCount() {\r\n        return this.boardUnits.filter(bu => bu.unit).length;\r\n    }\r\n\r\n    @observable\r\n    showPlaced: boolean = false;\r\n\r\n    public showPlacedDisposer = autorun(() => {\r\n        if (this.placedUnitCount !== -1) {\r\n            this.showPlaced = true;\r\n            setTimeout(() => {\r\n                this.showPlaced = false;\r\n            }, 500);          \r\n        }\r\n    });\r\n\r\n    @computed\r\n    public get unitSynergies() {\r\n        const champs: ChampData[] = this.boardUnits.map(x => x.unit).map(unit => unit ? unit.champ : null).filter(champ => champ !== null) as ChampData[];\r\n        const champIds: string[] = champs.map(champ => champ.id);\r\n        const uniqueChampIds: string[] = [...new Set(champIds)];\r\n\r\n        const champClasses: string[] = uniqueChampIds.map(id => this.dataStore.champions.find(champ => champ.id === id)).flatMap(champ => champ === undefined ? [] : champ.classes).sort();\r\n        const classCounts: object = champClasses.reduce((obj, id) => {\r\n            obj[id] = (obj[id] || 0) + 1;\r\n            return obj;\r\n        }, {} as any);\r\n\r\n        return classCounts;\r\n    }\r\n\r\n    @computed\r\n    public get unitSynergiesWithTiers(): Synergy[] {\r\n        const activeClasses = Object.keys(this.unitSynergies);\r\n\r\n        return activeClasses.map( key => {\r\n            const synergyData = (synergies as any)[key] as SynergyData;\r\n            const count = (this.unitSynergies as any)[key] as number;\r\n\r\n            let medalIndex = -1;\r\n            synergyData.stages.forEach((x, index) => {\r\n                if (synergyData.exact && count === x) {\r\n                    medalIndex = index;\r\n                } else if(synergyData && count >= x) {\r\n                    medalIndex = index;\r\n                }\r\n            });\r\n\r\n            //Tiers, 1 = Gold, 2 = Silver, 3 = Bronze, 4 = Inactive;\r\n            const tier = medalIndex === -1 ? 4 : synergyData.stages.length - medalIndex;\r\n            const active = tier < 4;\r\n\r\n            return {\r\n                ...synergyData,\r\n                id: key,\r\n                tier,\r\n                active,\r\n                count\r\n            } as Synergy;\r\n        });\r\n    }\r\n\r\n\r\n    @action\r\n    public toggleHandLock() {\r\n        this.isHandLocked = !this.isHandLocked;\r\n    }\r\n\r\n    @action\r\n    public nextRound() {\r\n        this.roundCount += 1;      \r\n        this.gold += this.calculateIncome();\r\n        this.addXP(DraftStore.XP_PER_ROUND);\r\n        if(!this.isHandLocked) {\r\n            this.gold += DraftStore.REFRESH_COST;\r\n            this.refreshHand();    \r\n        }\r\n\r\n    }\r\n\r\n    public calculateIncome(): number {\r\n        const passive = this.calculatePassiveIncome();\r\n        const interest =  this.calculateInterest();\r\n        const streak = this.calculateStreakBonus();\r\n        return passive + interest + streak;\r\n    }\r\n\r\n    public calculateInterest(): number {\r\n        return Math.min(Math.floor(this.gold / 10), DraftStore.MAXIMIM_INTEREST);\r\n    }\r\n\r\n    public calculateStreakBonus(): number {\r\n        return 0; //TODO: Simulate Wins/Losses??\r\n    }\r\n\r\n    public calculatePassiveIncome(): number {\r\n        switch(this.roundCount) {\r\n            case 0: \r\n            case 1: return 2;\r\n            case 2:\r\n            case 3: return 3;\r\n            case 4: return 4;\r\n            default: return 5;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public refreshHand() {\r\n        if (this.gold < DraftStore.REFRESH_COST) {\r\n            return;\r\n        }\r\n\r\n        //Return hand to pool\r\n        this.currentHand.forEach(card => {\r\n            if(card) {\r\n                this.pool.push(card);\r\n            }\r\n        });\r\n\r\n        this.currentHand = [];\r\n\r\n        this.drawHand();\r\n        this.gold -= DraftStore.REFRESH_COST;\r\n    }\r\n\r\n    @action\r\n    public buyXP() {\r\n        if(this.gold < DraftStore.BUY_XP_COST) {\r\n            return;\r\n        }\r\n        this.addXP(4);\r\n        this.gold -= DraftStore.BUY_XP_COST;\r\n    }\r\n\r\n    @action\r\n    public addXP(amount: number) {\r\n        this.xp += amount;\r\n        //Level Up\r\n        if(this.xp >= this.nextLevelXp) {\r\n            this.xp = this.xp - this.nextLevelXp;\r\n            this.nextLevelXp = this.getXpForLevelUp(this.level + 1);\r\n            this.level += 1;\r\n        }\r\n    }\r\n\r\n    @action\r\n    public sellUnit(unitSelection: UnitSelection) {\r\n        let unitExists = false;\r\n        const { unit, index, isBenched } = unitSelection;\r\n\r\n        //Remove Unit;\r\n        if(isBenched) {\r\n            if(this.benchedUnits[index] !== null) {\r\n                this.benchedUnits[index] = null;\r\n                unitExists = true;\r\n            }\r\n        } else {\r\n            if(this.boardUnits[index].unit !== undefined) {\r\n                this.boardUnits[index].unit = undefined;\r\n                unitExists = true;\r\n            }\r\n        }\r\n\r\n        //If there was a unit to sell, give gold;\r\n        if(unitExists) {\r\n            this.gold += this.getUnitSalePrice(unit);\r\n            this.returnUnitToPool(unit);\r\n        }\r\n    }\r\n\r\n    @action\r\n    private  returnUnitToPool(unit: Unit) {\r\n        const {champ} = unit;\r\n        const unitsInPool = this.pool.filter(x => x.champ.id === champ.id);\r\n        const guids = unitsInPool.map(x => x.guid);\r\n\r\n        let iterations = 3**(unit.tier - 1);\r\n        \r\n        let index = 0;\r\n        while(iterations > 0) {\r\n            const guid = `${champ.id}_${index}`;\r\n            if(!guids.includes(guid)) {\r\n                --iterations;\r\n                this.pool.push({\r\n                    guid,\r\n                    champ\r\n                });\r\n            }\r\n            ++index;\r\n        }\r\n    }\r\n\r\n    public getUnitSalePrice(unit: Unit): number {\r\n        let tierBonus = 0;\r\n        switch (unit.tier) {\r\n            case 2: {\r\n                tierBonus = 2;\r\n                break; \r\n            }\r\n            case 3: {\r\n                tierBonus = 4;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return unit.champ.cost + tierBonus;\r\n    }\r\n\r\n    @action\r\n    public drawHand() {\r\n        while(this.currentHand.length < 5) {\r\n            this.drawCard();\r\n        }\r\n    }\r\n\r\n    @action\r\n    public drawCard() {\r\n        const key = `level${this.level}`;\r\n        const levelData = this.dataStore.levels.get(key);\r\n        const odds = levelData ? levelData.tierOdds : [0,0,0,0,0];\r\n        const roll = Math.random();\r\n\r\n        const cost = this.getCost(roll, odds);\r\n\r\n        const cardSet = this.pool.filter(x => x.champ.cost === cost);\r\n        const index = Math.floor(Math.random() * cardSet.length);\r\n        const card = cardSet[index];\r\n\r\n        const indexToRemove = this.pool.findIndex(c => c.guid === card.guid);\r\n        this.pool.splice(indexToRemove, 1);\r\n        \r\n        this.currentHand.push(card);\r\n    }\r\n\r\n    @action\r\n    public initializePool() {\r\n        this.pool = this.dataStore.champions.flatMap(champ => {\r\n            const poolSize = this.getInitialPoolSizeForChamp(champ.id);\r\n            return [...Array(poolSize)].map((_, index) => ({\r\n                champ,\r\n                guid: champ.id + \"_\" + index\r\n            } as ChampCard));            \r\n        });\r\n    }\r\n\r\n    @action\r\n    public buyCard(card: ChampCard) {\r\n\r\n        if(!card || !card.champ) {\r\n            return;\r\n        }\r\n\r\n        const { guid, champ } = card;\r\n        \r\n        let cost = champ.cost;\r\n        let removeExtra = false;\r\n\r\n        if(this.gold < champ.cost) {\r\n            return;\r\n        }\r\n\r\n        /* Several cases:\r\n        1. Player has empty space for unit, all good\r\n        2. Player has no empty space, but has 2 units of the same type at tier 1 already, merge to free up space\r\n        3. Player has no empty space, but has 1 unit of the same type at tier 1,\r\n           and the hand has 2 of that same champ\r\n           3a. If they have the gold to buy 2, buy both and merge to free up space\r\n           3b. If they don't have the gold, abort\r\n        */\r\n\r\n        //Add unit to bench\r\n        const firstEmpty = this.benchedUnits.findIndex(x => x === null);\r\n        //Case 1\r\n        if(firstEmpty >= 0) {\r\n            this.benchedUnits[firstEmpty] = ({\r\n                tier: 1,\r\n                champ\r\n            });\r\n\r\n        } else {\r\n            const matchingBenchUnits = this.benchedUnits\r\n                .filter(unit => unit !== null && unit.tier === 1 && unit.champ.id === champ.id);\r\n            const matchingBoardUnits = this.boardUnits\r\n                .map(bu => bu.unit || null)\r\n                .filter(unit => unit !== null && unit.tier === 1 && unit.champ.id === champ.id);\r\n\r\n            const matchingUnits = [...matchingBenchUnits, ...matchingBoardUnits];\r\n\r\n            const availableToBuy = this.currentHand\r\n                .filter(card => card != null && card.champ.id === champ.id) as ChampCard[];\r\n\r\n            //Case 2\r\n            if (matchingUnits.length === 2) {\r\n                this.mergeUnits(1, availableToBuy); //Upgrade\r\n            } else if (matchingUnits.length === 1 && availableToBuy.length >= 2) {\r\n                if(this.gold >= champ.cost * 2) { //3a\r\n                    cost *= 2; //Increase Cost\r\n                    this.mergeUnits(1, availableToBuy); //Upgrade\r\n                    removeExtra = true; //Flag that theres a 2nd card to remove\r\n                } else { //3b\r\n                    return;\r\n                }\r\n            } else {        \r\n                return;\r\n            }\r\n        }\r\n\r\n        //Remove card\r\n        const index = this.currentHand.findIndex(c => c != null && c.guid === guid);\r\n        this.currentHand[index] = null;\r\n\r\n        //Remove 2nd card if needed\r\n        if(removeExtra) {\r\n            const index = this.currentHand.findIndex(card => card != null && card.champ.id === champ.id);\r\n            this.currentHand[index] = null;    \r\n        }\r\n\r\n        //Merge Units\r\n        this.mergeUnits(1);\r\n\r\n        //Pay money\r\n        this.gold -= cost;\r\n    }\r\n\r\n    @action\r\n    private mergeUnits(tier: number = 1, extraCards: ChampCard[] = []) {\r\n        const extraUnits: Unit[] = extraCards.map(card => ({champ: card.champ, tier: 1}));\r\n        const boardUnits: (Unit|null)[] = this.boardUnits.map(bu => bu.unit || null);\r\n        const totalUnits: (Unit|null)[] = [...this.benchedUnits, ...boardUnits, ...extraUnits];\r\n\r\n        const onlyCurrentTier = totalUnits.filter(c => c!== null && c.tier === tier) as Unit[];\r\n        \r\n        //Remap to count champions\r\n        const champCount = onlyCurrentTier.reduce((m: object, unit: Unit) => {\r\n            const id = unit.champ.id;\r\n            const val = (m as any)[id];\r\n            if (!val) {\r\n                (m as any)[id] = 1;\r\n            } else {\r\n                (m as any)[id] = val+1;\r\n            }\r\n            return m;\r\n        }, {});\r\n\r\n        //Find champs to merge\r\n        const idsToMerge = Object.keys(champCount).filter(x => (champCount as any)[x] >= 3);\r\n\r\n        //Merge and upgrade the champs\r\n        idsToMerge.forEach(id => {\r\n            const champ = (this.dataStore.champions).find(c => c.id === id);\r\n            \r\n            let index = -1;\r\n            //Remove all of that unit from bench\r\n            while(-1 !== (index = this.benchedUnits.findIndex(unit => \r\n                unit !== null &&\r\n                unit.champ.id === id &&\r\n                unit.tier === tier\r\n            ))) {\r\n                this.benchedUnits[index] = null;\r\n            }\r\n\r\n            //Remove all of that unit from the board\r\n            index = -1;\r\n            let boardIndex = -1;\r\n            while(-1 !== (index = this.boardUnits.findIndex(boardUnit => \r\n                boardUnit.unit !== undefined &&\r\n                boardUnit.unit.champ.id === id &&\r\n                boardUnit.unit.tier === tier\r\n            ))) {\r\n                this.boardUnits[index].unit = undefined;\r\n                boardIndex = index;\r\n            }\r\n\r\n            //Add upgraded unit\r\n            //Priorise returning to board\r\n            if(boardIndex !== -1) {\r\n                this.boardUnits[boardIndex].unit = {\r\n                    tier: tier + 1,\r\n                    champ\r\n                } as Unit;\r\n            } else {\r\n                const firstEmpty = this.benchedUnits.findIndex(x => x === null);\r\n                this.benchedUnits[firstEmpty] = {\r\n                    tier: tier + 1,\r\n                    champ\r\n                } as Unit;    \r\n            }\r\n        });\r\n\r\n        if (tier === 1) {\r\n            this.mergeUnits(2);\r\n        }\r\n    }\r\n\r\n    private getXpForLevelUp(currentLevel: number) {\r\n        const level = (this.dataStore.levels).get(`level${currentLevel}`);\r\n        return level ? level.xp : 0;\r\n    }\r\n\r\n    private getInitialPoolSizeForChamp(id: string): number {\r\n        const { unitsPerTier, champions} = this.dataStore;\r\n        const champ = champions.find(x => x.id === id);\r\n        if(champ == null) { return 0; }\r\n\r\n        switch(champ.cost) {\r\n            case 1: return unitsPerTier.get(\"tier1\") || 0;\r\n            case 2: return unitsPerTier.get(\"tier2\") || 0;\r\n            case 3: return unitsPerTier.get(\"tier3\") || 0;\r\n            case 4: return unitsPerTier.get(\"tier4\") || 0;\r\n            case 5: return unitsPerTier.get(\"tier5\") || 0;\r\n            default: return 0;\r\n        }\r\n    }\r\n\r\n    private getCost(roll: number, odds: number[]) {\r\n        let total = 0;\r\n        let index = 0;\r\n        while(total < roll) {\r\n            total += odds[index];\r\n            ++index;\r\n        }\r\n        return index;\r\n    }\r\n\r\n    private getUnitsByCost(cost: number) {\r\n        return this.dataStore.champions.filter(champ => champ.cost === cost);\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport './coin.scss'\r\nexport class Coin extends React.Component{\r\n    public render() {\r\n        return (\r\n            <i className=\"coin\">\r\n                <span className=\"a11y\">Coin</span>\r\n            </i>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Coin } from '../../shared/coin';\r\n\r\ninterface RefreshPanelProps {\r\n    refresh: () => void;\r\n    cost: number;\r\n    setTooltip: (area?: string) => void;\r\n}\r\n\r\nexport const RefreshPanel: React.FC<RefreshPanelProps> = ({ refresh, cost, setTooltip }) => {\r\n    return (<div className=\"sidebar-item refresh clickable\" onClick={refresh}>\r\n        <div className=\"refresh-panel\" onMouseEnter={() => setTooltip('refresh')} onMouseLeave={() => setTooltip(null)}>\r\n            <div className=\"content\">\r\n                <div>Refresh</div>\r\n                <div><Coin /> {cost}</div>\r\n            </div>\r\n            <div className=\"icon\" style={{backgroundImage: \"url(img/refresh.png)\"}}>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}","import * as React from 'react';\r\nimport { Coin } from '../../shared/coin';\r\n\r\ninterface BuyXpPanelProps {\r\n    buyXP: () => void;\r\n    cost: number;\r\n    xp: number;\r\n    nextLevelXp: number;\r\n    level: number;\r\n    setTooltip: (area?: string) => void;\r\n}\r\n\r\nexport const BuyXpPanel: React.FC<BuyXpPanelProps> = ({ buyXP, cost, xp, nextLevelXp, level, setTooltip }) => {\r\n    \r\n    const progress = xp/nextLevelXp * 100;\r\n    const progressStyle = {\r\n        transform: `translateX(${-100 + progress}%)`\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar-item xp clickable\" onClick={() => buyXP()}>\r\n            <div className=\"xp-panel\" onMouseEnter={() => setTooltip('buyXp')} onMouseLeave={() => setTooltip(null)}>\r\n                <div className=\"details\">\r\n                    <div className=\"content\">\r\n                        <div className=\"label\">Buy XP</div>\r\n                        <div className=\"sub-label\">\r\n                            <Coin />{cost}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"icon\" style={{backgroundImage: \"url(img/level-up.png)\"}}></div>\r\n                </div>\r\n                <div className=\"xp-progress\">\r\n                    <div className=\"xp-label\">{xp}/{nextLevelXp}</div>\r\n                    <div className=\"xp-progress-bar\">\r\n                        <div className=\"bar\">\r\n                            <div className=\"fill\" style={progressStyle}></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"level\">{level}</div>\r\n            </div>\r\n        </div>        \r\n    );\r\n}","import * as React from 'react';\r\n\r\ninterface NextRoundPanelProps {\r\n    nextRound: () => void;\r\n    setTooltip: (area?: string) => void;\r\n}\r\n\r\nexport const NextRoundPanel: React.FC<NextRoundPanelProps> = ({ nextRound, setTooltip }) => {\r\n    return (<div className=\"sidebar-item next-round clickable\" onClick={nextRound}>\r\n        <div className=\"next-round-panel\" onMouseEnter={() => setTooltip('nextRound')} onMouseLeave={() => setTooltip(null)}>\r\n            <div className=\"content\">\r\n                <div>Next Round</div>\r\n            </div>\r\n            <div className=\"icon\" style={{backgroundImage: \"url(img/next-round.png)\"}}>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../../stores/draft-store';\r\nimport { observer } from 'mobx-react';\r\nimport { RefreshPanel } from './draft-refresh-panel';\r\nimport { BuyXpPanel } from './draft-xp-panel';\r\nimport { NextRoundPanel } from './next-round-panel';\r\n\r\ninterface DraftSidebarProps {\r\n    draft: DraftStore;\r\n    setTooltip: (area: string) => void;\r\n}\r\n\r\n@observer\r\nexport class DraftSidebar extends React.Component<DraftSidebarProps> {\r\n    \r\n    public render() {\r\n\r\n        const { draft, setTooltip } = this.props;\r\n        const { xp, nextLevelXp, level } = draft;\r\n\r\n        return (\r\n            <div className=\"draft-sidebar draft-area\">\r\n                <div className=\"draft-sidebar-items\">\r\n                    <RefreshPanel cost={DraftStore.REFRESH_COST} refresh={() => draft.refreshHand()} setTooltip={setTooltip}/>\r\n                    <BuyXpPanel\r\n                        cost={DraftStore.BUY_XP_COST}\r\n                        buyXP={() => draft.buyXP()}\r\n                        setTooltip={setTooltip}\r\n                        level={level}\r\n                        xp={xp}\r\n                        nextLevelXp={nextLevelXp}\r\n                    />\r\n                    <NextRoundPanel \r\n                        nextRound={() => draft.nextRound()}\r\n                        setTooltip={setTooltip}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\nimport { ChampCard } from '../../stores/types';\r\nimport { Coin } from '../shared/coin';\r\n\r\ninterface CardProps {\r\n    card: ChampCard;\r\n    action: (card: ChampCard) => void;\r\n}\r\n\r\nexport class Card extends React.Component<CardProps> {\r\n\r\n    public render() {\r\n        const { card, action } = this.props;\r\n        const { name, cost, id, classes } = card.champ;\r\n\r\n        const style = {\r\n            backgroundImage: `url(${process.env.PUBLIC_URL}/img/champ-square/${id}.png)`\r\n        };\r\n\r\n        return (\r\n            <div className={`champ-card champ-cost-${cost}`} onClick={() => action(card)}>\r\n                <div className=\"decoration\"></div>\r\n                <div className={`hero champ-bg-${id}`} style={style}>\r\n                    {classes.map(x => <div className=\"champ-class\" key={x}>{x}</div>)}\r\n                </div>\r\n                <div className={`banner banner-cost-${cost}`}>\r\n                    <div className=\"name\">{name}</div>\r\n                    <div className=\"cost\">\r\n                        <span>\r\n                            <Coin />\r\n                            {cost}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\n\r\nimport './card.scss';\r\n\r\nexport class BlankCard extends React.Component {\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"champ-card blank\">\r\n            </div>\r\n        )\r\n    }\r\n}","import * as React from 'react';\r\nimport { Card } from './card';\r\nimport { BlankCard } from './blank-card';\r\nimport { observer } from 'mobx-react';\r\nimport { ChampCard } from '../../stores/types';\r\n\r\n\r\ninterface HandProps {\r\n    hand: ChampCard[];\r\n    action: (card: ChampCard) => void;\r\n}\r\n\r\n\r\n@observer\r\n export class Hand extends React.Component<HandProps> {\r\n\r\n    public render() {\r\n        const { hand, action } = this.props;\r\n\r\n        return (\r\n            <div className=\"hand\">\r\n                {hand.map( (card, index) => Boolean(card) ? \r\n                    <Card card={card} key={card.guid} action={action}/> :\r\n                    <BlankCard key={index + '-blank'} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { ChampCard } from '../../stores/types';\r\nimport { Hand } from './hand';\r\nimport { observer } from 'mobx-react';\r\n\r\ninterface DraftMainProps {\r\n    draft: DraftStore;\r\n}\r\n\r\n@observer\r\nexport class DraftMain extends React.Component<DraftMainProps> {\r\n    \r\n    public render() {\r\n\r\n        const { draft } = this.props;\r\n        const { currentHand} = draft;\r\n\r\n        return (\r\n            <div className=\"draft-main draft-area\">\r\n                <Hand hand={currentHand} action={x => this.buyCard(x)} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private buyCard(card: ChampCard) {\r\n        this.props.draft.buyCard(card);\r\n    }\r\n}","import * as React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\n\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { Coin } from '../shared/coin';\r\nimport { Types } from '../../stores/drag-drop';\r\nimport { UnitSelection } from '../../stores/types';\r\ninterface DraftSellProps {\r\n    draft: DraftStore;\r\n}\r\n\r\nexport const DraftSell: React.FC<DraftSellProps> = ({\r\n    draft\r\n}) => {\r\n    const [{ isOver, canDrop }, drop] = useDrop({\r\n        accept: [Types.BENCH, Types.BOARD],\r\n        drop: (item) => onDrop(item, draft),\r\n        collect: monitor => ({\r\n            isOver: monitor.isOver(),\r\n            canDrop: monitor.canDrop(),\r\n        }),\r\n    });\r\n    const { activeUnit } = draft;\r\n    if(activeUnit === undefined || !activeUnit.unit) { return null; }\r\n\r\n    const { name } = activeUnit.unit.champ;\r\n    const cost = draft.getUnitSalePrice(activeUnit.unit);\r\n\r\n    const activeClass = canDrop && isOver ? 'active' : '';\r\n\r\n    return (\r\n        <div className={`draft-sell draft-area ${activeClass}`} ref={drop}>\r\n            <div className=\"\">\r\n                <i className=\"trash\"></i>\r\n            </div>\r\n            <div className=\"message\">\r\n                <span>Sell {name} for <Coin /> {cost} </span>\r\n            </div>\r\n            { canDrop && isOver && <div>\r\n                Release to Sell\r\n            </div> }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst onDrop = (item: any, draft: DraftStore) => {\r\n    const selection = {\r\n        unit: item.unit,\r\n        index: item.index,\r\n        isBenched: item.type === Types.BENCH\r\n    } as UnitSelection;\r\n    draft.sellUnit(selection);\r\n};","import * as React from 'react';\r\n\r\nimport \"./tooltip.scss\";\r\n\r\nimport { DraftStore } from '../../../stores/draft-store';\r\nimport { Coin } from '../../shared/coin';\r\n\r\ninterface TooltipProps {\r\n    tooltip: string;\r\n    draft: DraftStore;\r\n}\r\n\r\nconst renderRefreshTooltip = () => {\r\n    return (\r\n        <>\r\n            <div>Refresh [Shift + D]</div>\r\n            <div>Refresh the store with a new set of champions</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst renderBuyXpTooltip = () => {\r\n    return (\r\n        <>\r\n            <div>Buy XP [Shift + F]</div>\r\n            <div>Gain 4 XP toward your next level. Levelling up increases your team size and gives you access to stronger champions in the store. You gain 2 XP for free at the begninning of each round</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst renderIncomeTooltip = (draft: DraftStore) => {\r\n    return (\r\n        <>\r\n            <h4>Total Income <Coin /> {draft.calculateIncome()}</h4>\r\n            <div>Passive Income <Coin /> +{draft.calculatePassiveIncome()}</div>\r\n            <div>Interest (Max 5) <Coin /> +{draft.calculateInterest()}</div>\r\n            <div>Win/Lost Streak <Coin /> +{draft.calculateStreakBonus()}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst renderNextRoundTooltip = (draft: DraftStore) => {\r\n    return (\r\n        <>\r\n            <div>Go to the next round [Shift + R]</div>\r\n            <div>Current Round: {draft.roundCount}</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst renderLockHandTooltip = (draft: DraftStore) => {\r\n    return (\r\n        <>\r\n            <div>Toggle Lock [Shift + L]</div>\r\n            <div>{draft.isHandLocked ? 'Unlock' : 'Lock'} your current store offerings.</div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst getContent = (tooltip: string, draft: DraftStore): string|React.ReactElement => {\r\n    switch(tooltip) {\r\n        case 'refresh': return renderRefreshTooltip();\r\n        case 'income': return renderIncomeTooltip(draft);\r\n        case 'buyXp': return renderBuyXpTooltip();\r\n        case 'nextRound': return renderNextRoundTooltip(draft);\r\n        case 'lock': return renderLockHandTooltip(draft);\r\n        default: return null;\r\n    }\r\n}\r\n\r\nexport const Tooltip: React.FC<TooltipProps> = ({tooltip, draft}) => {\r\n    if(!tooltip) { return null; }\r\n    const content = getContent(tooltip, draft);\r\n\r\n    return (\r\n        <div className=\"tooltip\">\r\n            <div className=\"inner\">\r\n                {content}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport './draft.scss';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { inject } from 'mobx-react';\r\nimport { observer } from 'mobx-react';\r\nimport { DraftSidebar } from './sidebar/draft-sidebar';\r\nimport { DraftMain } from './draft-main';\r\nimport { DraftSell } from './draft-sell';\r\nimport { Tooltip } from './tooltip/tooltip';\r\nimport { Coin } from '../shared/coin';\r\n\r\ninterface DraftProps {\r\n    draft?: DraftStore;\r\n}\r\n\r\ninterface DraftState {\r\n    activeTooltip?: string;\r\n}\r\n\r\n@inject('draft')\r\n@observer\r\nexport class Draft extends React.Component<DraftProps, DraftState> {\r\n    \r\n    public constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeTooltip: null\r\n        };\r\n    }\r\n\r\n    public render() {\r\n        const { draft } = this.props;\r\n        const { gold } = draft;\r\n        const showSell = draft.activeUnit !== undefined;\r\n\r\n        const setTooltip = ((area: string) => this.setState({\r\n            activeTooltip: area\r\n        }));\r\n\r\n        const lockClass = draft.isHandLocked ? 'closed' : 'open';\r\n\r\n        return (\r\n            <section className=\"draft\">\r\n                {!showSell && <>\r\n                     <div className=\"draft-gold-bar above-bar\" \r\n                        onMouseEnter={() => setTooltip('income')}\r\n                        onMouseLeave={() => setTooltip(null)}\r\n                    >\r\n                        <div className=\"draft-gold\">\r\n                            <Coin/>{gold}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"draft-lock above-bar\"\r\n                        onClick={() => draft.toggleHandLock()}\r\n                        onMouseEnter={() => setTooltip('lock')}\r\n                        onMouseLeave={() => setTooltip(null)}\r\n                    >\r\n                        <div className={`lock ${lockClass}`}></div>\r\n                    </div> \r\n                </>}\r\n                <DraftSidebar draft={draft} setTooltip={setTooltip} />\r\n                <DraftMain draft={draft} />              \r\n                {showSell && <DraftSell draft={draft} />}\r\n                <Tooltip tooltip={this.state.activeTooltip} draft={draft} />\r\n            </section>            \r\n        );\r\n    }\r\n\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Synergy } from '../../stores/types';\r\n\r\ninterface SynergyItemProps {\r\n    synergy: Synergy;\r\n}\r\n\r\n@observer\r\nexport class SynergyItem extends React.Component<SynergyItemProps> {\r\n\r\n    public render() {\r\n\r\n        const { synergy } = this.props;\r\n        const { tier } = synergy;\r\n\r\n        const currentBonusIndex = tier === 4 ? -1 : synergy.stages.length - tier;\r\n        const nextBonus = tier === 1 ? -1 : synergy.stages[currentBonusIndex + 1];\r\n        \r\n        return (\r\n            <div className={`synergy-item tier-${synergy.tier}`}>\r\n                <div className=\"icon\">\r\n                   <img className=\"\" alt=\"icon\" src={`img/class-icons/${synergy.id}.png`} />\r\n                </div>\r\n               <span>\r\n                <span className=\"synergy-name\">{synergy.name}: </span>{synergy.count}\r\n                {nextBonus > 0 && <span> / {nextBonus}</span>}\r\n               </span>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Synergy } from '../../stores/types';\r\nimport { SynergyItem } from './synergy-item';\r\n\r\ninterface SynergyTierProps {\r\n    synergies: Synergy[];\r\n    tier: number;\r\n}\r\n\r\n@observer\r\nexport class SynergyTier extends React.Component<SynergyTierProps> {\r\n\r\n    public render() {\r\n\r\n        const { synergies, tier} = this.props;\r\n        if(synergies.length === 0) { return null; }\r\n\r\n        return (\r\n            <div className=\"synergy-tier\">\r\n                <ul className={`tier-${tier}`}>\r\n                    {synergies.map( s => <SynergyItem synergy={s} key={s.id} />)}\r\n                </ul>                \r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../../stores/draft-store';\r\nimport { observer } from 'mobx-react';\r\nimport { Synergy } from '../../stores/types';\r\nimport { SynergyTier } from './synergy-tier';\r\n\r\nimport \"./synergy.scss\";\r\n\r\ninterface SynergiesBarProps {\r\n    draft: DraftStore\r\n}\r\n\r\n@observer\r\nexport class SynergiesBar extends React.Component<SynergiesBarProps> {\r\n\r\n    public render() {\r\n        const goldItems = this.getSynergiesOfTier(1);\r\n        const silverItems = this.getSynergiesOfTier(2);\r\n        const bronzeItems = this.getSynergiesOfTier(3);\r\n        const greyItems = this.getSynergiesOfTier(4);\r\n\r\n        const tiers = [ goldItems, silverItems, bronzeItems, greyItems ];\r\n\r\n        return (\r\n            <section className=\"synergies\">\r\n                { tiers.map((tier, index) => \r\n                    <SynergyTier synergies={tier} tier={index + 1} key={`tier_${index + 1}`} />\r\n                )}\r\n            </section>\r\n\r\n        );\r\n    }\r\n\r\n    private getSynergiesOfTier(tier: number): Synergy[] {\r\n        return this.props.draft.unitSynergiesWithTiers.filter(s => s.tier === tier);\r\n    }\r\n}","import * as React from 'react';\r\nimport { inject, observer } from 'mobx-react';\r\n\r\nimport { DraftStore } from '../../stores/draft-store';\r\n\r\nimport './simulation.scss';\r\nimport { SynergiesBar } from '../synergies/synergies-bar';\r\n\r\ninterface SimulationProps {\r\n    draft?: DraftStore\r\n}\r\n\r\n@inject(\"draft\")\r\n@observer\r\nexport class Simulation extends React.Component<SimulationProps> {\r\n    public render() {\r\n        const { draft } = this.props;\r\n        const { level, showPlaced, placedUnitCount } = draft;\r\n        if (!draft) { return null; }\r\n\r\n        const fadeClass = showPlaced ? '' : 'fade';\r\n\r\n        return (\r\n            <section className=\"simulation\">\r\n                <div className=\"inner\">\r\n                    <SynergiesBar draft={draft} />\r\n                    <div className={`level-section ${fadeClass}`}>\r\n                        <span>Units Placed: { placedUnitCount } / { level }</span>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { DraftStore } from '../stores/draft-store';\r\nimport { useHotkeys } from 'react-hotkeys-hook';\r\n\r\ninterface HotKeysProps{\r\n    draft: DraftStore;\r\n}\r\n\r\nexport const Hotkeys: React.FC<HotKeysProps> = ({draft}) =>{\r\n    useHotkeys(\"shift+r\", () => draft.nextRound());\r\n    useHotkeys('shift+d', () => draft.refreshHand());\r\n    useHotkeys('shift+f', () => draft.buyXP());\r\n    useHotkeys('shift+l', () => draft.toggleHandLock());\r\n    return null;\r\n}","import * as React from 'react';\r\nimport { JsonEditor } from 'jsoneditor-react';\r\nimport ace from 'brace';\r\n\r\nimport 'jsoneditor-react/es/editor.min.css';\r\nimport 'brace/mode/json';\r\nimport 'brace/theme/github';\r\n\r\ninterface EditorProps {\r\n    json: string;\r\n    onChange: (string) => void;\r\n    schema: any\r\n}\r\n\r\nexport class Editor extends React.Component<EditorProps> {\r\n    render() {\r\n        const { json, onChange, schema } = this.props;\r\n\r\n        return (\r\n            <section className=\"editor\">\r\n                <JsonEditor\r\n                    value={json}\r\n                    onChange={onChange}\r\n                    ace={ace}\r\n                    theme=\"ace/theme/github\"\r\n                    schema={schema}\r\n                />\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\n","import * as React from 'react';\r\nimport { DataStore } from '../../stores/data-store';\r\nimport { Editor } from './editor';\r\n\r\nimport \"./advanced.scss\";\r\n\r\ninterface AdvancedScreenProps {\r\n    data: DataStore;\r\n    close: () => void;\r\n}\r\n\r\ninterface AdvancedScreenState {\r\n    activeDataset: string;\r\n    updatedData: any;\r\n}\r\n\r\nexport class AdvancedScreen extends React.Component<AdvancedScreenProps, AdvancedScreenState> {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeDataset: null,\r\n            updatedData: null\r\n        };\r\n    }\r\n\r\n    private updateActiveDataset(json) {\r\n        const { activeDataset } = this.state;\r\n        if(!activeDataset) { return; }\r\n        this.setState({ updatedData: json });\r\n    }\r\n\r\n    private getActiveJson() {\r\n        const {activeDataset} = this.state;\r\n        const {data} = this.props;\r\n\r\n        const mapToObj = m => JSON.parse(JSON.stringify(m));\r\n\r\n        switch(activeDataset) {\r\n            case \"levels\": return mapToObj(data.levels);\r\n            case \"tiers\": return mapToObj(data.unitsPerTier);\r\n            case \"champs\": return mapToObj(data.champions);\r\n            default: return \"\";\r\n        }\r\n    }\r\n\r\n    private getSchema() {\r\n        return null;\r\n    }\r\n\r\n    private getTitle() {\r\n        switch(this.state.activeDataset) {\r\n            case \"levels\": return \"Levels\";\r\n            case \"tiers\": return \"Units Per Tier\";\r\n            case \"champs\": return \"Champions\";\r\n            default: return \"\";\r\n        }\r\n    }\r\n\r\n    private applyChanges() {\r\n        const { activeDataset, updatedData } = this.state;\r\n        const { data } = this.props;\r\n\r\n        if(!activeDataset) { return; }\r\n\r\n        if(activeDataset === 'levels') {\r\n            data.setLevelsFromJson(updatedData);\r\n        } else if(activeDataset === 'tiers') {\r\n            data.setUnitsPerTierFromJson(updatedData);\r\n        } else if(activeDataset === 'champs') {\r\n            data.setChampsFromJson(updatedData);\r\n        }\r\n    }\r\n\r\n    private setActiveDataset(val) {\r\n        return () => {\r\n            \r\n            this.setState({\r\n                activeDataset: null\r\n            }, () => this.setState({\r\n                activeDataset: val\r\n            }));\r\n        }\r\n    }\r\n\r\n    public render(){\r\n        const { close } = this.props;\r\n        const { activeDataset } = this.state;\r\n\r\n        const setActive = this.setActiveDataset.bind(this);\r\n\r\n        return (\r\n            <div className=\"advanced-screen\">\r\n                <div className=\"inner\">\r\n                    <div className=\"close\" onClick={close}>X</div>\r\n                    <h2>Edit Datasets</h2>\r\n                    <div className=\"actions\">\r\n                        <button className=\"action\" onClick={setActive('champs')}>\r\n                            Champions\r\n                        </button>\r\n                        <button className=\"action\" onClick={setActive('tiers')}>\r\n                            Levels\r\n                        </button>\r\n                        <button className=\"action\" onClick={setActive('levels')}>\r\n                            Units Per Tier\r\n                        </button>\r\n                    </div>\r\n                    {activeDataset && <div className=\"editor-container\">\r\n                        <h4>Editing {this.getTitle()}</h4>\r\n                        <Editor\r\n                            json={this.getActiveJson()}\r\n                            onChange={(j) => this.updateActiveDataset(j)}\r\n                            schema={this.getSchema()}\r\n                        />\r\n                        <button className=\"action\" onClick={() => this.applyChanges()}>Apply Changes</button>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}   ","import * as React from 'react';\r\nimport \"./splash.scss\";\r\nimport { DataStore } from '../../stores/data-store';\r\nimport { AdvancedScreen } from '../advanced/advanced';\r\n\r\ninterface SplashScreenProps {\r\n    begin: () => void;\r\n    data: DataStore;\r\n}\r\n\r\ninterface SplaceScreenState {\r\n    isAdvancedOpen: boolean;\r\n}\r\n\r\nexport class SplashScreen extends React.Component<SplashScreenProps, SplaceScreenState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isAdvancedOpen: false\r\n        }\r\n    }\r\n\r\n    openAdvancedPage() {\r\n        this.setState({\r\n            isAdvancedOpen: true\r\n        });\r\n    }\r\n\r\n    closeAdvancedPage() {\r\n        this.setState({\r\n            isAdvancedOpen: false\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        const { begin, data } = this.props;\r\n        const { isAdvancedOpen } = this.state;\r\n\r\n        return (\r\n            <div className=\"splash\">\r\n                {isAdvancedOpen && <AdvancedScreen data={data} close={() => this.closeAdvancedPage()} />}\r\n                <div className=\"island\"></div>  \r\n                <div className=\"inner\">\r\n                    <h1>Theory Draft for</h1>\r\n                    <div className=\"tft-logo\"></div>\r\n                    <p> A Drafting Simulator and Practice Tool</p>\r\n                    <div className=\"tft-end-cap\"></div>\r\n                    <div className=\"actions\">\r\n                        <button className=\"action\" onClick={begin}>\r\n                            Begin\r\n                        </button>\r\n                        <button className=\"action minor\" onClick={() => this.openAdvancedPage()}>\r\n                            Advanced\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { observable, action } from 'mobx';\r\n\r\nimport * as tiersData from '../data/tiers.json';\r\nimport * as levelsData from '../data/levels.json';\r\nimport * as championsData from '../data/champions.json';\r\nimport { LevelData, ChampData } from './types';\r\n\r\nexport class DataStore {\r\n\r\n    @observable\r\n    unitsPerTier: Map<string, number>;\r\n\r\n    @observable\r\n    levels: Map<string, LevelData>;\r\n\r\n    @observable\r\n    champions: ChampData[];\r\n\r\n    private static emptyChamp: ChampData = {\r\n        name: \"\",\r\n        id: \"\",\r\n        cost: 0,\r\n        classes: []\r\n    };\r\n\r\n    private static emptyLevel: LevelData = {\r\n        xp: 0,\r\n        tierOdds: [0, 0, 0, 0, 0]\r\n    };\r\n\r\n    constructor() {\r\n        this.unitsPerTier = new Map();\r\n        this.levels = new Map();\r\n        this.champions = [];\r\n\r\n        this.setUnitsPerTierFromJson(tiersData.unitsPerTier);\r\n        this.setLevelsFromJson(levelsData.levels);\r\n        this.setChampsFromJson(championsData.champions)\r\n    }\r\n\r\n    @action\r\n    public setUnitsPerTierFromJson(unitsPerTier: any) {\r\n        this.unitsPerTier.clear();\r\n        Object.keys(unitsPerTier).forEach(key => {\r\n            let val = Number(unitsPerTier[key]) || 0;\r\n            this.unitsPerTier.set(key, val);\r\n        });\r\n    }\r\n\r\n    @action\r\n    public setLevelsFromJson(levels: any) {\r\n        this.levels.clear();\r\n        Object.keys(levels).forEach(key => {\r\n            let val = levels[key] as LevelData || DataStore.emptyLevel;\r\n            this.levels.set(key, val);\r\n        });\r\n    }\r\n\r\n    @action\r\n    public setChampsFromJson(champions: any) {\r\n        this.champions.splice(0);//Inline clear an array\r\n        Object.keys(champions).forEach(key => {\r\n            let val = champions[key] as ChampData || null;\r\n            if(val !== null) {\r\n                this.champions.push(val);\r\n            }\r\n        });\r\n    }\r\n}","import * as React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport MultiBackend from 'react-dnd-multi-backend';\r\nimport HTML5toTouch from 'react-dnd-multi-backend/lib/HTML5toTouch'\r\nimport { observable } from 'mobx';\r\nimport { Provider, observer } from 'mobx-react';\r\n\r\nimport './main-page.scss';\r\n\r\nimport { Board } from './board/board';\r\nimport { Bench } from './bench/bench';\r\nimport { Draft } from './draft/draft';\r\n\r\nimport { DraftStore } from '../stores/draft-store';\r\nimport { Simulation } from './simulation/simulation';\r\nimport { Hotkeys } from './hotkeys';\r\nimport { SplashScreen } from './splash/splash';\r\nimport { DataStore } from '../stores/data-store';\r\n\r\n@observer\r\nexport class MainPage extends React.Component {\r\n\r\n    @observable\r\n    draftStore: DraftStore = null;\r\n\r\n    dataStore: DataStore = null;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.dataStore = new DataStore();\r\n        this.draftStore = new DraftStore(this.dataStore);\r\n    }\r\n\r\n    public render() {\r\n        const showSp1ash = this.draftStore.isSplashOpen;\r\n\r\n        if(showSp1ash) {\r\n            return (\r\n                <section className=\"main-page\">\r\n                    <SplashScreen data={this.dataStore} begin={() => this.draftStore.start()} />\r\n                </section>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <section className=\"main-page\">\r\n\t\t\t\t<DndProvider backend={MultiBackend(HTML5toTouch)}>\r\n                    <Provider draft={this.draftStore} >\r\n                        <>\r\n                            <div className=\"board-container\">\r\n                                <div className=\"sidebar\">\r\n                                    <Simulation />\r\n                                </div>\r\n                                <div className=\"board-and-bench\">\r\n                                    <Board />\r\n                                    <Bench />\r\n                                </div>\r\n                            </div>\r\n                            <Draft />\r\n                        </>\r\n                    </Provider>\r\n                </DndProvider>\r\n                <Hotkeys draft={this.draftStore} />\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './app.scss';\r\nimport { MainPage } from './components/main-page';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"theory-draft app\">\r\n      <main>\r\n        <MainPage />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}